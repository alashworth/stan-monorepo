#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<int, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_63;

typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_0> AgradCcdfLogBinomial_ffv_0;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_1> AgradCcdfLogBinomial_ffv_1;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_2> AgradCcdfLogBinomial_ffv_2;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_3> AgradCcdfLogBinomial_ffv_3;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_4> AgradCcdfLogBinomial_ffv_4;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_5> AgradCcdfLogBinomial_ffv_5;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_6> AgradCcdfLogBinomial_ffv_6;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_7> AgradCcdfLogBinomial_ffv_7;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_8> AgradCcdfLogBinomial_ffv_8;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_9> AgradCcdfLogBinomial_ffv_9;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_10> AgradCcdfLogBinomial_ffv_10;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_11> AgradCcdfLogBinomial_ffv_11;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_12> AgradCcdfLogBinomial_ffv_12;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_13> AgradCcdfLogBinomial_ffv_13;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_14> AgradCcdfLogBinomial_ffv_14;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_15> AgradCcdfLogBinomial_ffv_15;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_16> AgradCcdfLogBinomial_ffv_16;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_17> AgradCcdfLogBinomial_ffv_17;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_18> AgradCcdfLogBinomial_ffv_18;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_19> AgradCcdfLogBinomial_ffv_19;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_20> AgradCcdfLogBinomial_ffv_20;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_21> AgradCcdfLogBinomial_ffv_21;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_22> AgradCcdfLogBinomial_ffv_22;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_23> AgradCcdfLogBinomial_ffv_23;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_24> AgradCcdfLogBinomial_ffv_24;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_25> AgradCcdfLogBinomial_ffv_25;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_26> AgradCcdfLogBinomial_ffv_26;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_27> AgradCcdfLogBinomial_ffv_27;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_28> AgradCcdfLogBinomial_ffv_28;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_29> AgradCcdfLogBinomial_ffv_29;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_30> AgradCcdfLogBinomial_ffv_30;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_31> AgradCcdfLogBinomial_ffv_31;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_32> AgradCcdfLogBinomial_ffv_32;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_33> AgradCcdfLogBinomial_ffv_33;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_34> AgradCcdfLogBinomial_ffv_34;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_35> AgradCcdfLogBinomial_ffv_35;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_36> AgradCcdfLogBinomial_ffv_36;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_37> AgradCcdfLogBinomial_ffv_37;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_38> AgradCcdfLogBinomial_ffv_38;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_39> AgradCcdfLogBinomial_ffv_39;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_40> AgradCcdfLogBinomial_ffv_40;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_41> AgradCcdfLogBinomial_ffv_41;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_42> AgradCcdfLogBinomial_ffv_42;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_43> AgradCcdfLogBinomial_ffv_43;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_44> AgradCcdfLogBinomial_ffv_44;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_45> AgradCcdfLogBinomial_ffv_45;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_46> AgradCcdfLogBinomial_ffv_46;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_47> AgradCcdfLogBinomial_ffv_47;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_48> AgradCcdfLogBinomial_ffv_48;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_49> AgradCcdfLogBinomial_ffv_49;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_50> AgradCcdfLogBinomial_ffv_50;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_51> AgradCcdfLogBinomial_ffv_51;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_52> AgradCcdfLogBinomial_ffv_52;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_53> AgradCcdfLogBinomial_ffv_53;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_54> AgradCcdfLogBinomial_ffv_54;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_55> AgradCcdfLogBinomial_ffv_55;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_56> AgradCcdfLogBinomial_ffv_56;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_57> AgradCcdfLogBinomial_ffv_57;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_58> AgradCcdfLogBinomial_ffv_58;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_59> AgradCcdfLogBinomial_ffv_59;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_60> AgradCcdfLogBinomial_ffv_60;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_61> AgradCcdfLogBinomial_ffv_61;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_62> AgradCcdfLogBinomial_ffv_62;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffv_63> AgradCcdfLogBinomial_ffv_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_0, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_1, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_2, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_3, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_4, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_5, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_6, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_7, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_8, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_9, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_10, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_11, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_12, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_13, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_14, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_15, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_16, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_17, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_18, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_19, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_20, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_21, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_22, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_23, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_24, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_25, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_26, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_27, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_28, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_29, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_30, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_31, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_32, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_33, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_34, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_35, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_36, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_37, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_38, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_39, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_40, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_41, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_42, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_43, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_44, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_45, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_46, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_47, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_48, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_49, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_50, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_51, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_52, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_53, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_54, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_55, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_56, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_57, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_58, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_59, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_60, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_61, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_62, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffv_63, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffv_63);

