#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<int, int, fvar<double>, empty, empty, empty> type_fd_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<double>, empty, empty, empty> type_fd_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, empty, empty, empty> type_fd_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, empty, empty, empty> type_fd_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_63;

typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_0> AgradCdfLogBinomial_fd_0;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_1> AgradCdfLogBinomial_fd_1;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_2> AgradCdfLogBinomial_fd_2;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_3> AgradCdfLogBinomial_fd_3;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_4> AgradCdfLogBinomial_fd_4;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_5> AgradCdfLogBinomial_fd_5;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_6> AgradCdfLogBinomial_fd_6;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_7> AgradCdfLogBinomial_fd_7;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_8> AgradCdfLogBinomial_fd_8;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_9> AgradCdfLogBinomial_fd_9;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_10> AgradCdfLogBinomial_fd_10;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_11> AgradCdfLogBinomial_fd_11;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_12> AgradCdfLogBinomial_fd_12;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_13> AgradCdfLogBinomial_fd_13;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_14> AgradCdfLogBinomial_fd_14;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_15> AgradCdfLogBinomial_fd_15;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_16> AgradCdfLogBinomial_fd_16;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_17> AgradCdfLogBinomial_fd_17;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_18> AgradCdfLogBinomial_fd_18;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_19> AgradCdfLogBinomial_fd_19;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_20> AgradCdfLogBinomial_fd_20;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_21> AgradCdfLogBinomial_fd_21;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_22> AgradCdfLogBinomial_fd_22;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_23> AgradCdfLogBinomial_fd_23;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_24> AgradCdfLogBinomial_fd_24;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_25> AgradCdfLogBinomial_fd_25;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_26> AgradCdfLogBinomial_fd_26;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_27> AgradCdfLogBinomial_fd_27;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_28> AgradCdfLogBinomial_fd_28;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_29> AgradCdfLogBinomial_fd_29;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_30> AgradCdfLogBinomial_fd_30;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_31> AgradCdfLogBinomial_fd_31;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_32> AgradCdfLogBinomial_fd_32;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_33> AgradCdfLogBinomial_fd_33;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_34> AgradCdfLogBinomial_fd_34;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_35> AgradCdfLogBinomial_fd_35;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_36> AgradCdfLogBinomial_fd_36;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_37> AgradCdfLogBinomial_fd_37;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_38> AgradCdfLogBinomial_fd_38;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_39> AgradCdfLogBinomial_fd_39;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_40> AgradCdfLogBinomial_fd_40;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_41> AgradCdfLogBinomial_fd_41;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_42> AgradCdfLogBinomial_fd_42;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_43> AgradCdfLogBinomial_fd_43;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_44> AgradCdfLogBinomial_fd_44;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_45> AgradCdfLogBinomial_fd_45;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_46> AgradCdfLogBinomial_fd_46;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_47> AgradCdfLogBinomial_fd_47;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_48> AgradCdfLogBinomial_fd_48;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_49> AgradCdfLogBinomial_fd_49;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_50> AgradCdfLogBinomial_fd_50;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_51> AgradCdfLogBinomial_fd_51;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_52> AgradCdfLogBinomial_fd_52;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_53> AgradCdfLogBinomial_fd_53;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_54> AgradCdfLogBinomial_fd_54;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_55> AgradCdfLogBinomial_fd_55;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_56> AgradCdfLogBinomial_fd_56;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_57> AgradCdfLogBinomial_fd_57;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_58> AgradCdfLogBinomial_fd_58;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_59> AgradCdfLogBinomial_fd_59;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_60> AgradCdfLogBinomial_fd_60;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_61> AgradCdfLogBinomial_fd_61;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_62> AgradCdfLogBinomial_fd_62;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fd_63> AgradCdfLogBinomial_fd_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_0, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_1, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_2, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_3, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_4, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_5, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_6, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_7, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_8, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_9, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_10, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_11, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_12, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_13, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_14, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_15, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_16, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_17, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_18, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_19, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_20, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_21, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_22, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_23, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_24, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_25, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_26, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_27, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_28, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_29, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_30, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_31, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_32, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_33, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_34, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_35, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_36, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_37, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_38, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_39, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_40, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_41, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_42, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_43, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_44, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_45, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_46, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_47, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_48, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_49, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_50, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_51, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_52, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_53, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_54, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_55, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_56, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_57, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_58, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_59, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_60, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_61, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_62, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fd_63, AgradCdfLogTestFixture, AgradCdfLogBinomial_fd_63);

