#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<int, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_63;

typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_0> AgradCdfLogBinomial_ffv_0;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_1> AgradCdfLogBinomial_ffv_1;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_2> AgradCdfLogBinomial_ffv_2;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_3> AgradCdfLogBinomial_ffv_3;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_4> AgradCdfLogBinomial_ffv_4;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_5> AgradCdfLogBinomial_ffv_5;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_6> AgradCdfLogBinomial_ffv_6;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_7> AgradCdfLogBinomial_ffv_7;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_8> AgradCdfLogBinomial_ffv_8;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_9> AgradCdfLogBinomial_ffv_9;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_10> AgradCdfLogBinomial_ffv_10;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_11> AgradCdfLogBinomial_ffv_11;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_12> AgradCdfLogBinomial_ffv_12;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_13> AgradCdfLogBinomial_ffv_13;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_14> AgradCdfLogBinomial_ffv_14;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_15> AgradCdfLogBinomial_ffv_15;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_16> AgradCdfLogBinomial_ffv_16;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_17> AgradCdfLogBinomial_ffv_17;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_18> AgradCdfLogBinomial_ffv_18;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_19> AgradCdfLogBinomial_ffv_19;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_20> AgradCdfLogBinomial_ffv_20;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_21> AgradCdfLogBinomial_ffv_21;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_22> AgradCdfLogBinomial_ffv_22;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_23> AgradCdfLogBinomial_ffv_23;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_24> AgradCdfLogBinomial_ffv_24;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_25> AgradCdfLogBinomial_ffv_25;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_26> AgradCdfLogBinomial_ffv_26;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_27> AgradCdfLogBinomial_ffv_27;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_28> AgradCdfLogBinomial_ffv_28;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_29> AgradCdfLogBinomial_ffv_29;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_30> AgradCdfLogBinomial_ffv_30;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_31> AgradCdfLogBinomial_ffv_31;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_32> AgradCdfLogBinomial_ffv_32;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_33> AgradCdfLogBinomial_ffv_33;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_34> AgradCdfLogBinomial_ffv_34;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_35> AgradCdfLogBinomial_ffv_35;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_36> AgradCdfLogBinomial_ffv_36;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_37> AgradCdfLogBinomial_ffv_37;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_38> AgradCdfLogBinomial_ffv_38;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_39> AgradCdfLogBinomial_ffv_39;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_40> AgradCdfLogBinomial_ffv_40;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_41> AgradCdfLogBinomial_ffv_41;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_42> AgradCdfLogBinomial_ffv_42;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_43> AgradCdfLogBinomial_ffv_43;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_44> AgradCdfLogBinomial_ffv_44;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_45> AgradCdfLogBinomial_ffv_45;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_46> AgradCdfLogBinomial_ffv_46;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_47> AgradCdfLogBinomial_ffv_47;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_48> AgradCdfLogBinomial_ffv_48;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_49> AgradCdfLogBinomial_ffv_49;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_50> AgradCdfLogBinomial_ffv_50;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_51> AgradCdfLogBinomial_ffv_51;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_52> AgradCdfLogBinomial_ffv_52;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_53> AgradCdfLogBinomial_ffv_53;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_54> AgradCdfLogBinomial_ffv_54;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_55> AgradCdfLogBinomial_ffv_55;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_56> AgradCdfLogBinomial_ffv_56;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_57> AgradCdfLogBinomial_ffv_57;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_58> AgradCdfLogBinomial_ffv_58;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_59> AgradCdfLogBinomial_ffv_59;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_60> AgradCdfLogBinomial_ffv_60;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_61> AgradCdfLogBinomial_ffv_61;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_62> AgradCdfLogBinomial_ffv_62;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffv_63> AgradCdfLogBinomial_ffv_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_0, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_1, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_2, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_3, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_4, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_5, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_6, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_7, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_8, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_9, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_10, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_11, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_12, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_13, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_14, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_15, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_16, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_17, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_18, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_19, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_20, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_21, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_22, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_23, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_24, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_25, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_26, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_27, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_28, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_29, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_30, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_31, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_32, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_33, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_34, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_35, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_36, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_37, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_38, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_39, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_40, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_41, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_42, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_43, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_44, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_45, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_46, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_47, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_48, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_49, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_50, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_51, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_52, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_53, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_54, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_55, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_56, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_57, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_58, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_59, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_60, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_61, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_62, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffv_63, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffv_63);

