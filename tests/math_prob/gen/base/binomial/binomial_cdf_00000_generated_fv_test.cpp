#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_test.hpp>

typedef boost::mpl::vector<int, int, fvar<var>, empty, empty, empty> type_fv_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<var>, empty, empty, empty> type_fv_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, empty, empty, empty> type_fv_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, empty, empty, empty> type_fv_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_63;

typedef boost::mpl::vector<AgradCdfBinomial, type_fv_0> AgradCdfBinomial_fv_0;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_1> AgradCdfBinomial_fv_1;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_2> AgradCdfBinomial_fv_2;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_3> AgradCdfBinomial_fv_3;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_4> AgradCdfBinomial_fv_4;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_5> AgradCdfBinomial_fv_5;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_6> AgradCdfBinomial_fv_6;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_7> AgradCdfBinomial_fv_7;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_8> AgradCdfBinomial_fv_8;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_9> AgradCdfBinomial_fv_9;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_10> AgradCdfBinomial_fv_10;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_11> AgradCdfBinomial_fv_11;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_12> AgradCdfBinomial_fv_12;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_13> AgradCdfBinomial_fv_13;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_14> AgradCdfBinomial_fv_14;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_15> AgradCdfBinomial_fv_15;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_16> AgradCdfBinomial_fv_16;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_17> AgradCdfBinomial_fv_17;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_18> AgradCdfBinomial_fv_18;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_19> AgradCdfBinomial_fv_19;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_20> AgradCdfBinomial_fv_20;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_21> AgradCdfBinomial_fv_21;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_22> AgradCdfBinomial_fv_22;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_23> AgradCdfBinomial_fv_23;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_24> AgradCdfBinomial_fv_24;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_25> AgradCdfBinomial_fv_25;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_26> AgradCdfBinomial_fv_26;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_27> AgradCdfBinomial_fv_27;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_28> AgradCdfBinomial_fv_28;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_29> AgradCdfBinomial_fv_29;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_30> AgradCdfBinomial_fv_30;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_31> AgradCdfBinomial_fv_31;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_32> AgradCdfBinomial_fv_32;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_33> AgradCdfBinomial_fv_33;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_34> AgradCdfBinomial_fv_34;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_35> AgradCdfBinomial_fv_35;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_36> AgradCdfBinomial_fv_36;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_37> AgradCdfBinomial_fv_37;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_38> AgradCdfBinomial_fv_38;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_39> AgradCdfBinomial_fv_39;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_40> AgradCdfBinomial_fv_40;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_41> AgradCdfBinomial_fv_41;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_42> AgradCdfBinomial_fv_42;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_43> AgradCdfBinomial_fv_43;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_44> AgradCdfBinomial_fv_44;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_45> AgradCdfBinomial_fv_45;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_46> AgradCdfBinomial_fv_46;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_47> AgradCdfBinomial_fv_47;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_48> AgradCdfBinomial_fv_48;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_49> AgradCdfBinomial_fv_49;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_50> AgradCdfBinomial_fv_50;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_51> AgradCdfBinomial_fv_51;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_52> AgradCdfBinomial_fv_52;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_53> AgradCdfBinomial_fv_53;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_54> AgradCdfBinomial_fv_54;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_55> AgradCdfBinomial_fv_55;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_56> AgradCdfBinomial_fv_56;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_57> AgradCdfBinomial_fv_57;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_58> AgradCdfBinomial_fv_58;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_59> AgradCdfBinomial_fv_59;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_60> AgradCdfBinomial_fv_60;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_61> AgradCdfBinomial_fv_61;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_62> AgradCdfBinomial_fv_62;
typedef boost::mpl::vector<AgradCdfBinomial, type_fv_63> AgradCdfBinomial_fv_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_0, AgradCdfTestFixture, AgradCdfBinomial_fv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_1, AgradCdfTestFixture, AgradCdfBinomial_fv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_2, AgradCdfTestFixture, AgradCdfBinomial_fv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_3, AgradCdfTestFixture, AgradCdfBinomial_fv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_4, AgradCdfTestFixture, AgradCdfBinomial_fv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_5, AgradCdfTestFixture, AgradCdfBinomial_fv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_6, AgradCdfTestFixture, AgradCdfBinomial_fv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_7, AgradCdfTestFixture, AgradCdfBinomial_fv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_8, AgradCdfTestFixture, AgradCdfBinomial_fv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_9, AgradCdfTestFixture, AgradCdfBinomial_fv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_10, AgradCdfTestFixture, AgradCdfBinomial_fv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_11, AgradCdfTestFixture, AgradCdfBinomial_fv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_12, AgradCdfTestFixture, AgradCdfBinomial_fv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_13, AgradCdfTestFixture, AgradCdfBinomial_fv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_14, AgradCdfTestFixture, AgradCdfBinomial_fv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_15, AgradCdfTestFixture, AgradCdfBinomial_fv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_16, AgradCdfTestFixture, AgradCdfBinomial_fv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_17, AgradCdfTestFixture, AgradCdfBinomial_fv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_18, AgradCdfTestFixture, AgradCdfBinomial_fv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_19, AgradCdfTestFixture, AgradCdfBinomial_fv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_20, AgradCdfTestFixture, AgradCdfBinomial_fv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_21, AgradCdfTestFixture, AgradCdfBinomial_fv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_22, AgradCdfTestFixture, AgradCdfBinomial_fv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_23, AgradCdfTestFixture, AgradCdfBinomial_fv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_24, AgradCdfTestFixture, AgradCdfBinomial_fv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_25, AgradCdfTestFixture, AgradCdfBinomial_fv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_26, AgradCdfTestFixture, AgradCdfBinomial_fv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_27, AgradCdfTestFixture, AgradCdfBinomial_fv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_28, AgradCdfTestFixture, AgradCdfBinomial_fv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_29, AgradCdfTestFixture, AgradCdfBinomial_fv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_30, AgradCdfTestFixture, AgradCdfBinomial_fv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_31, AgradCdfTestFixture, AgradCdfBinomial_fv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_32, AgradCdfTestFixture, AgradCdfBinomial_fv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_33, AgradCdfTestFixture, AgradCdfBinomial_fv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_34, AgradCdfTestFixture, AgradCdfBinomial_fv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_35, AgradCdfTestFixture, AgradCdfBinomial_fv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_36, AgradCdfTestFixture, AgradCdfBinomial_fv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_37, AgradCdfTestFixture, AgradCdfBinomial_fv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_38, AgradCdfTestFixture, AgradCdfBinomial_fv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_39, AgradCdfTestFixture, AgradCdfBinomial_fv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_40, AgradCdfTestFixture, AgradCdfBinomial_fv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_41, AgradCdfTestFixture, AgradCdfBinomial_fv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_42, AgradCdfTestFixture, AgradCdfBinomial_fv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_43, AgradCdfTestFixture, AgradCdfBinomial_fv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_44, AgradCdfTestFixture, AgradCdfBinomial_fv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_45, AgradCdfTestFixture, AgradCdfBinomial_fv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_46, AgradCdfTestFixture, AgradCdfBinomial_fv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_47, AgradCdfTestFixture, AgradCdfBinomial_fv_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_48, AgradCdfTestFixture, AgradCdfBinomial_fv_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_49, AgradCdfTestFixture, AgradCdfBinomial_fv_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_50, AgradCdfTestFixture, AgradCdfBinomial_fv_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_51, AgradCdfTestFixture, AgradCdfBinomial_fv_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_52, AgradCdfTestFixture, AgradCdfBinomial_fv_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_53, AgradCdfTestFixture, AgradCdfBinomial_fv_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_54, AgradCdfTestFixture, AgradCdfBinomial_fv_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_55, AgradCdfTestFixture, AgradCdfBinomial_fv_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_56, AgradCdfTestFixture, AgradCdfBinomial_fv_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_57, AgradCdfTestFixture, AgradCdfBinomial_fv_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_58, AgradCdfTestFixture, AgradCdfBinomial_fv_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_59, AgradCdfTestFixture, AgradCdfBinomial_fv_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_60, AgradCdfTestFixture, AgradCdfBinomial_fv_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_61, AgradCdfTestFixture, AgradCdfBinomial_fv_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_62, AgradCdfTestFixture, AgradCdfBinomial_fv_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fv_63, AgradCdfTestFixture, AgradCdfBinomial_fv_63);

