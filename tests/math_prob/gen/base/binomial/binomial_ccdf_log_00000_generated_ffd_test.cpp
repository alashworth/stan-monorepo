#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<int, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_63;

typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_0> AgradCcdfLogBinomial_ffd_0;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_1> AgradCcdfLogBinomial_ffd_1;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_2> AgradCcdfLogBinomial_ffd_2;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_3> AgradCcdfLogBinomial_ffd_3;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_4> AgradCcdfLogBinomial_ffd_4;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_5> AgradCcdfLogBinomial_ffd_5;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_6> AgradCcdfLogBinomial_ffd_6;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_7> AgradCcdfLogBinomial_ffd_7;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_8> AgradCcdfLogBinomial_ffd_8;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_9> AgradCcdfLogBinomial_ffd_9;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_10> AgradCcdfLogBinomial_ffd_10;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_11> AgradCcdfLogBinomial_ffd_11;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_12> AgradCcdfLogBinomial_ffd_12;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_13> AgradCcdfLogBinomial_ffd_13;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_14> AgradCcdfLogBinomial_ffd_14;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_15> AgradCcdfLogBinomial_ffd_15;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_16> AgradCcdfLogBinomial_ffd_16;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_17> AgradCcdfLogBinomial_ffd_17;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_18> AgradCcdfLogBinomial_ffd_18;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_19> AgradCcdfLogBinomial_ffd_19;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_20> AgradCcdfLogBinomial_ffd_20;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_21> AgradCcdfLogBinomial_ffd_21;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_22> AgradCcdfLogBinomial_ffd_22;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_23> AgradCcdfLogBinomial_ffd_23;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_24> AgradCcdfLogBinomial_ffd_24;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_25> AgradCcdfLogBinomial_ffd_25;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_26> AgradCcdfLogBinomial_ffd_26;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_27> AgradCcdfLogBinomial_ffd_27;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_28> AgradCcdfLogBinomial_ffd_28;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_29> AgradCcdfLogBinomial_ffd_29;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_30> AgradCcdfLogBinomial_ffd_30;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_31> AgradCcdfLogBinomial_ffd_31;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_32> AgradCcdfLogBinomial_ffd_32;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_33> AgradCcdfLogBinomial_ffd_33;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_34> AgradCcdfLogBinomial_ffd_34;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_35> AgradCcdfLogBinomial_ffd_35;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_36> AgradCcdfLogBinomial_ffd_36;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_37> AgradCcdfLogBinomial_ffd_37;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_38> AgradCcdfLogBinomial_ffd_38;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_39> AgradCcdfLogBinomial_ffd_39;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_40> AgradCcdfLogBinomial_ffd_40;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_41> AgradCcdfLogBinomial_ffd_41;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_42> AgradCcdfLogBinomial_ffd_42;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_43> AgradCcdfLogBinomial_ffd_43;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_44> AgradCcdfLogBinomial_ffd_44;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_45> AgradCcdfLogBinomial_ffd_45;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_46> AgradCcdfLogBinomial_ffd_46;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_47> AgradCcdfLogBinomial_ffd_47;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_48> AgradCcdfLogBinomial_ffd_48;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_49> AgradCcdfLogBinomial_ffd_49;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_50> AgradCcdfLogBinomial_ffd_50;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_51> AgradCcdfLogBinomial_ffd_51;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_52> AgradCcdfLogBinomial_ffd_52;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_53> AgradCcdfLogBinomial_ffd_53;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_54> AgradCcdfLogBinomial_ffd_54;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_55> AgradCcdfLogBinomial_ffd_55;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_56> AgradCcdfLogBinomial_ffd_56;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_57> AgradCcdfLogBinomial_ffd_57;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_58> AgradCcdfLogBinomial_ffd_58;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_59> AgradCcdfLogBinomial_ffd_59;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_60> AgradCcdfLogBinomial_ffd_60;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_61> AgradCcdfLogBinomial_ffd_61;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_62> AgradCcdfLogBinomial_ffd_62;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_ffd_63> AgradCcdfLogBinomial_ffd_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_0, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_1, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_2, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_3, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_4, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_5, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_6, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_7, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_8, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_9, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_10, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_11, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_12, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_13, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_14, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_15, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_16, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_17, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_18, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_19, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_20, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_21, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_22, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_23, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_24, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_25, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_26, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_27, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_28, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_29, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_30, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_31, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_32, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_33, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_34, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_35, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_36, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_37, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_38, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_39, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_40, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_41, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_42, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_43, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_44, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_45, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_46, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_47, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_48, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_49, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_50, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_51, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_52, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_53, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_54, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_55, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_56, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_57, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_58, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_59, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_60, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_61, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_62, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_ffd_63, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_ffd_63);

