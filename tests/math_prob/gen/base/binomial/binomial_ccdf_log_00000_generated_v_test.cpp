#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<int, int, double, empty, empty, empty> type_v_0;
typedef boost::mpl::vector<int, int, std::vector<double>, empty, empty, empty> type_v_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_3;
typedef boost::mpl::vector<int, int, var, empty, empty, empty> type_v_4;
typedef boost::mpl::vector<int, int, std::vector<var>, empty, empty, empty> type_v_5;
typedef boost::mpl::vector<int, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_6;
typedef boost::mpl::vector<int, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_7;
typedef boost::mpl::vector<int, std::vector<int>, double, empty, empty, empty> type_v_8;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<double>, empty, empty, empty> type_v_9;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_10;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_11;
typedef boost::mpl::vector<int, std::vector<int>, var, empty, empty, empty> type_v_12;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<var>, empty, empty, empty> type_v_13;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_14;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_15;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, empty, empty, empty> type_v_16;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_v_17;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_18;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_19;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, empty, empty, empty> type_v_20;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, empty, empty, empty> type_v_21;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_22;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_23;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, empty, empty, empty> type_v_24;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_v_25;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_26;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_27;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, empty, empty, empty> type_v_28;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, empty, empty, empty> type_v_29;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_30;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_31;
typedef boost::mpl::vector<std::vector<int>, int, double, empty, empty, empty> type_v_32;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<double>, empty, empty, empty> type_v_33;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_34;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_35;
typedef boost::mpl::vector<std::vector<int>, int, var, empty, empty, empty> type_v_36;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<var>, empty, empty, empty> type_v_37;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_38;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_39;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, double, empty, empty, empty> type_v_40;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<double>, empty, empty, empty> type_v_41;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_42;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_43;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, var, empty, empty, empty> type_v_44;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<var>, empty, empty, empty> type_v_45;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_46;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_47;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, empty, empty, empty> type_v_48;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_v_49;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_50;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_51;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, empty, empty, empty> type_v_52;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, empty, empty, empty> type_v_53;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_54;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_55;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, empty, empty, empty> type_v_56;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_v_57;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_58;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_59;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, empty, empty, empty> type_v_60;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, empty, empty, empty> type_v_61;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_62;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_63;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, double, empty, empty, empty> type_v_64;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<double>, empty, empty, empty> type_v_65;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_66;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_67;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, var, empty, empty, empty> type_v_68;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<var>, empty, empty, empty> type_v_69;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_70;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_71;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, empty, empty, empty> type_v_72;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, empty, empty, empty> type_v_73;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_74;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_75;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, empty, empty, empty> type_v_76;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, empty, empty, empty> type_v_77;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_78;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_79;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, empty, empty, empty> type_v_80;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_v_81;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_82;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_83;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, empty, empty, empty> type_v_84;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, empty, empty, empty> type_v_85;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_86;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_87;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, empty, empty, empty> type_v_88;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_v_89;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_90;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_91;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, empty, empty, empty> type_v_92;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, empty, empty, empty> type_v_93;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_94;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_95;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, empty, empty, empty> type_v_96;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, empty, empty, empty> type_v_97;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_98;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_99;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, empty, empty, empty> type_v_100;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, empty, empty, empty> type_v_101;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_102;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_103;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, empty, empty, empty> type_v_104;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, empty, empty, empty> type_v_105;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_106;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_107;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, empty, empty, empty> type_v_108;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, empty, empty, empty> type_v_109;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_110;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_111;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, empty, empty, empty> type_v_112;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_v_113;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_114;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_115;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, empty, empty, empty> type_v_116;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, empty, empty, empty> type_v_117;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_118;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_119;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, empty, empty, empty> type_v_120;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_v_121;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_122;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_123;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, empty, empty, empty> type_v_124;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, empty, empty, empty> type_v_125;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_126;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_127;

typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_0> AgradCcdfLogBinomial_v_0;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_1> AgradCcdfLogBinomial_v_1;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_2> AgradCcdfLogBinomial_v_2;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_3> AgradCcdfLogBinomial_v_3;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_4> AgradCcdfLogBinomial_v_4;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_5> AgradCcdfLogBinomial_v_5;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_6> AgradCcdfLogBinomial_v_6;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_7> AgradCcdfLogBinomial_v_7;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_8> AgradCcdfLogBinomial_v_8;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_9> AgradCcdfLogBinomial_v_9;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_10> AgradCcdfLogBinomial_v_10;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_11> AgradCcdfLogBinomial_v_11;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_12> AgradCcdfLogBinomial_v_12;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_13> AgradCcdfLogBinomial_v_13;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_14> AgradCcdfLogBinomial_v_14;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_15> AgradCcdfLogBinomial_v_15;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_16> AgradCcdfLogBinomial_v_16;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_17> AgradCcdfLogBinomial_v_17;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_18> AgradCcdfLogBinomial_v_18;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_19> AgradCcdfLogBinomial_v_19;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_20> AgradCcdfLogBinomial_v_20;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_21> AgradCcdfLogBinomial_v_21;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_22> AgradCcdfLogBinomial_v_22;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_23> AgradCcdfLogBinomial_v_23;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_24> AgradCcdfLogBinomial_v_24;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_25> AgradCcdfLogBinomial_v_25;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_26> AgradCcdfLogBinomial_v_26;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_27> AgradCcdfLogBinomial_v_27;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_28> AgradCcdfLogBinomial_v_28;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_29> AgradCcdfLogBinomial_v_29;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_30> AgradCcdfLogBinomial_v_30;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_31> AgradCcdfLogBinomial_v_31;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_32> AgradCcdfLogBinomial_v_32;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_33> AgradCcdfLogBinomial_v_33;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_34> AgradCcdfLogBinomial_v_34;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_35> AgradCcdfLogBinomial_v_35;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_36> AgradCcdfLogBinomial_v_36;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_37> AgradCcdfLogBinomial_v_37;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_38> AgradCcdfLogBinomial_v_38;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_39> AgradCcdfLogBinomial_v_39;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_40> AgradCcdfLogBinomial_v_40;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_41> AgradCcdfLogBinomial_v_41;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_42> AgradCcdfLogBinomial_v_42;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_43> AgradCcdfLogBinomial_v_43;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_44> AgradCcdfLogBinomial_v_44;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_45> AgradCcdfLogBinomial_v_45;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_46> AgradCcdfLogBinomial_v_46;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_47> AgradCcdfLogBinomial_v_47;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_48> AgradCcdfLogBinomial_v_48;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_49> AgradCcdfLogBinomial_v_49;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_50> AgradCcdfLogBinomial_v_50;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_51> AgradCcdfLogBinomial_v_51;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_52> AgradCcdfLogBinomial_v_52;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_53> AgradCcdfLogBinomial_v_53;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_54> AgradCcdfLogBinomial_v_54;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_55> AgradCcdfLogBinomial_v_55;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_56> AgradCcdfLogBinomial_v_56;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_57> AgradCcdfLogBinomial_v_57;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_58> AgradCcdfLogBinomial_v_58;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_59> AgradCcdfLogBinomial_v_59;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_60> AgradCcdfLogBinomial_v_60;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_61> AgradCcdfLogBinomial_v_61;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_62> AgradCcdfLogBinomial_v_62;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_63> AgradCcdfLogBinomial_v_63;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_64> AgradCcdfLogBinomial_v_64;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_65> AgradCcdfLogBinomial_v_65;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_66> AgradCcdfLogBinomial_v_66;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_67> AgradCcdfLogBinomial_v_67;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_68> AgradCcdfLogBinomial_v_68;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_69> AgradCcdfLogBinomial_v_69;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_70> AgradCcdfLogBinomial_v_70;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_71> AgradCcdfLogBinomial_v_71;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_72> AgradCcdfLogBinomial_v_72;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_73> AgradCcdfLogBinomial_v_73;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_74> AgradCcdfLogBinomial_v_74;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_75> AgradCcdfLogBinomial_v_75;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_76> AgradCcdfLogBinomial_v_76;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_77> AgradCcdfLogBinomial_v_77;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_78> AgradCcdfLogBinomial_v_78;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_79> AgradCcdfLogBinomial_v_79;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_80> AgradCcdfLogBinomial_v_80;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_81> AgradCcdfLogBinomial_v_81;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_82> AgradCcdfLogBinomial_v_82;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_83> AgradCcdfLogBinomial_v_83;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_84> AgradCcdfLogBinomial_v_84;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_85> AgradCcdfLogBinomial_v_85;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_86> AgradCcdfLogBinomial_v_86;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_87> AgradCcdfLogBinomial_v_87;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_88> AgradCcdfLogBinomial_v_88;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_89> AgradCcdfLogBinomial_v_89;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_90> AgradCcdfLogBinomial_v_90;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_91> AgradCcdfLogBinomial_v_91;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_92> AgradCcdfLogBinomial_v_92;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_93> AgradCcdfLogBinomial_v_93;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_94> AgradCcdfLogBinomial_v_94;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_95> AgradCcdfLogBinomial_v_95;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_96> AgradCcdfLogBinomial_v_96;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_97> AgradCcdfLogBinomial_v_97;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_98> AgradCcdfLogBinomial_v_98;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_99> AgradCcdfLogBinomial_v_99;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_100> AgradCcdfLogBinomial_v_100;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_101> AgradCcdfLogBinomial_v_101;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_102> AgradCcdfLogBinomial_v_102;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_103> AgradCcdfLogBinomial_v_103;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_104> AgradCcdfLogBinomial_v_104;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_105> AgradCcdfLogBinomial_v_105;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_106> AgradCcdfLogBinomial_v_106;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_107> AgradCcdfLogBinomial_v_107;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_108> AgradCcdfLogBinomial_v_108;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_109> AgradCcdfLogBinomial_v_109;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_110> AgradCcdfLogBinomial_v_110;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_111> AgradCcdfLogBinomial_v_111;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_112> AgradCcdfLogBinomial_v_112;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_113> AgradCcdfLogBinomial_v_113;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_114> AgradCcdfLogBinomial_v_114;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_115> AgradCcdfLogBinomial_v_115;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_116> AgradCcdfLogBinomial_v_116;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_117> AgradCcdfLogBinomial_v_117;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_118> AgradCcdfLogBinomial_v_118;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_119> AgradCcdfLogBinomial_v_119;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_120> AgradCcdfLogBinomial_v_120;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_121> AgradCcdfLogBinomial_v_121;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_122> AgradCcdfLogBinomial_v_122;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_123> AgradCcdfLogBinomial_v_123;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_124> AgradCcdfLogBinomial_v_124;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_125> AgradCcdfLogBinomial_v_125;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_126> AgradCcdfLogBinomial_v_126;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_v_127> AgradCcdfLogBinomial_v_127;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_0, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_1, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_2, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_3, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_4, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_5, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_6, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_7, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_8, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_9, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_10, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_11, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_12, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_13, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_14, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_15, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_16, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_17, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_18, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_19, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_20, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_21, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_22, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_23, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_24, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_25, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_26, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_27, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_28, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_29, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_30, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_31, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_32, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_33, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_34, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_35, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_36, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_37, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_38, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_39, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_40, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_41, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_42, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_43, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_44, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_45, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_46, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_47, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_48, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_49, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_50, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_51, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_52, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_53, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_54, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_55, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_56, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_57, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_58, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_59, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_60, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_61, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_62, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_63, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_63);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_64, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_64);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_65, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_65);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_66, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_66);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_67, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_67);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_68, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_68);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_69, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_69);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_70, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_70);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_71, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_71);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_72, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_72);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_73, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_73);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_74, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_74);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_75, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_75);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_76, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_76);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_77, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_77);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_78, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_78);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_79, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_79);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_80, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_80);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_81, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_81);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_82, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_82);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_83, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_83);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_84, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_84);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_85, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_85);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_86, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_86);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_87, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_87);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_88, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_88);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_89, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_89);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_90, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_90);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_91, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_91);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_92, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_92);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_93, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_93);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_94, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_94);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_95, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_95);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_96, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_96);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_97, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_97);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_98, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_98);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_99, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_99);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_100, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_100);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_101, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_101);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_102, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_102);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_103, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_103);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_104, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_104);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_105, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_105);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_106, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_106);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_107, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_107);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_108, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_108);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_109, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_109);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_110, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_110);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_111, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_111);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_112, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_112);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_113, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_113);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_114, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_114);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_115, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_115);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_116, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_116);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_117, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_117);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_118, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_118);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_119, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_119);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_120, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_120);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_121, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_121);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_122, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_122);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_123, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_123);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_124, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_124);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_125, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_125);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_126, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_126);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_v_127, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_v_127);

