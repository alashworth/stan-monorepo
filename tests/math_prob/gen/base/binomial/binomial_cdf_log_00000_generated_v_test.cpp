#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<int, int, double, empty, empty, empty> type_v_0;
typedef boost::mpl::vector<int, int, std::vector<double>, empty, empty, empty> type_v_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_3;
typedef boost::mpl::vector<int, int, var, empty, empty, empty> type_v_4;
typedef boost::mpl::vector<int, int, std::vector<var>, empty, empty, empty> type_v_5;
typedef boost::mpl::vector<int, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_6;
typedef boost::mpl::vector<int, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_7;
typedef boost::mpl::vector<int, std::vector<int>, double, empty, empty, empty> type_v_8;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<double>, empty, empty, empty> type_v_9;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_10;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_11;
typedef boost::mpl::vector<int, std::vector<int>, var, empty, empty, empty> type_v_12;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<var>, empty, empty, empty> type_v_13;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_14;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_15;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, empty, empty, empty> type_v_16;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_v_17;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_18;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_19;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, empty, empty, empty> type_v_20;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, empty, empty, empty> type_v_21;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_22;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_23;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, empty, empty, empty> type_v_24;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_v_25;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_26;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_27;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, empty, empty, empty> type_v_28;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, empty, empty, empty> type_v_29;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_30;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_31;
typedef boost::mpl::vector<std::vector<int>, int, double, empty, empty, empty> type_v_32;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<double>, empty, empty, empty> type_v_33;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_34;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_35;
typedef boost::mpl::vector<std::vector<int>, int, var, empty, empty, empty> type_v_36;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<var>, empty, empty, empty> type_v_37;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_38;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_39;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, double, empty, empty, empty> type_v_40;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<double>, empty, empty, empty> type_v_41;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_42;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_43;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, var, empty, empty, empty> type_v_44;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<var>, empty, empty, empty> type_v_45;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_46;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_47;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, empty, empty, empty> type_v_48;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_v_49;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_50;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_51;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, empty, empty, empty> type_v_52;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, empty, empty, empty> type_v_53;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_54;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_55;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, empty, empty, empty> type_v_56;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_v_57;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_58;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_59;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, empty, empty, empty> type_v_60;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, empty, empty, empty> type_v_61;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_62;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_63;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, double, empty, empty, empty> type_v_64;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<double>, empty, empty, empty> type_v_65;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_66;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_67;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, var, empty, empty, empty> type_v_68;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<var>, empty, empty, empty> type_v_69;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_70;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_71;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, empty, empty, empty> type_v_72;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, empty, empty, empty> type_v_73;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_74;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_75;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, empty, empty, empty> type_v_76;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, empty, empty, empty> type_v_77;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_78;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_79;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, empty, empty, empty> type_v_80;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_v_81;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_82;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_83;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, empty, empty, empty> type_v_84;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, empty, empty, empty> type_v_85;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_86;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_87;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, empty, empty, empty> type_v_88;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_v_89;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_90;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_91;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, empty, empty, empty> type_v_92;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, empty, empty, empty> type_v_93;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_94;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_95;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, empty, empty, empty> type_v_96;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, empty, empty, empty> type_v_97;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_98;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_99;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, empty, empty, empty> type_v_100;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, empty, empty, empty> type_v_101;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_102;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_103;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, empty, empty, empty> type_v_104;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, empty, empty, empty> type_v_105;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_106;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_107;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, empty, empty, empty> type_v_108;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, empty, empty, empty> type_v_109;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_110;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_111;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, empty, empty, empty> type_v_112;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_v_113;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_114;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_115;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, empty, empty, empty> type_v_116;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, empty, empty, empty> type_v_117;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_118;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_119;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, empty, empty, empty> type_v_120;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_v_121;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_v_122;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_v_123;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, empty, empty, empty> type_v_124;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, empty, empty, empty> type_v_125;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty, empty> type_v_126;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty, empty> type_v_127;

typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_0> AgradCdfLogBinomial_v_0;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_1> AgradCdfLogBinomial_v_1;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_2> AgradCdfLogBinomial_v_2;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_3> AgradCdfLogBinomial_v_3;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_4> AgradCdfLogBinomial_v_4;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_5> AgradCdfLogBinomial_v_5;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_6> AgradCdfLogBinomial_v_6;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_7> AgradCdfLogBinomial_v_7;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_8> AgradCdfLogBinomial_v_8;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_9> AgradCdfLogBinomial_v_9;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_10> AgradCdfLogBinomial_v_10;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_11> AgradCdfLogBinomial_v_11;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_12> AgradCdfLogBinomial_v_12;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_13> AgradCdfLogBinomial_v_13;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_14> AgradCdfLogBinomial_v_14;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_15> AgradCdfLogBinomial_v_15;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_16> AgradCdfLogBinomial_v_16;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_17> AgradCdfLogBinomial_v_17;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_18> AgradCdfLogBinomial_v_18;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_19> AgradCdfLogBinomial_v_19;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_20> AgradCdfLogBinomial_v_20;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_21> AgradCdfLogBinomial_v_21;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_22> AgradCdfLogBinomial_v_22;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_23> AgradCdfLogBinomial_v_23;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_24> AgradCdfLogBinomial_v_24;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_25> AgradCdfLogBinomial_v_25;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_26> AgradCdfLogBinomial_v_26;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_27> AgradCdfLogBinomial_v_27;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_28> AgradCdfLogBinomial_v_28;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_29> AgradCdfLogBinomial_v_29;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_30> AgradCdfLogBinomial_v_30;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_31> AgradCdfLogBinomial_v_31;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_32> AgradCdfLogBinomial_v_32;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_33> AgradCdfLogBinomial_v_33;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_34> AgradCdfLogBinomial_v_34;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_35> AgradCdfLogBinomial_v_35;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_36> AgradCdfLogBinomial_v_36;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_37> AgradCdfLogBinomial_v_37;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_38> AgradCdfLogBinomial_v_38;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_39> AgradCdfLogBinomial_v_39;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_40> AgradCdfLogBinomial_v_40;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_41> AgradCdfLogBinomial_v_41;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_42> AgradCdfLogBinomial_v_42;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_43> AgradCdfLogBinomial_v_43;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_44> AgradCdfLogBinomial_v_44;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_45> AgradCdfLogBinomial_v_45;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_46> AgradCdfLogBinomial_v_46;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_47> AgradCdfLogBinomial_v_47;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_48> AgradCdfLogBinomial_v_48;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_49> AgradCdfLogBinomial_v_49;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_50> AgradCdfLogBinomial_v_50;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_51> AgradCdfLogBinomial_v_51;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_52> AgradCdfLogBinomial_v_52;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_53> AgradCdfLogBinomial_v_53;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_54> AgradCdfLogBinomial_v_54;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_55> AgradCdfLogBinomial_v_55;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_56> AgradCdfLogBinomial_v_56;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_57> AgradCdfLogBinomial_v_57;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_58> AgradCdfLogBinomial_v_58;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_59> AgradCdfLogBinomial_v_59;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_60> AgradCdfLogBinomial_v_60;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_61> AgradCdfLogBinomial_v_61;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_62> AgradCdfLogBinomial_v_62;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_63> AgradCdfLogBinomial_v_63;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_64> AgradCdfLogBinomial_v_64;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_65> AgradCdfLogBinomial_v_65;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_66> AgradCdfLogBinomial_v_66;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_67> AgradCdfLogBinomial_v_67;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_68> AgradCdfLogBinomial_v_68;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_69> AgradCdfLogBinomial_v_69;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_70> AgradCdfLogBinomial_v_70;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_71> AgradCdfLogBinomial_v_71;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_72> AgradCdfLogBinomial_v_72;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_73> AgradCdfLogBinomial_v_73;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_74> AgradCdfLogBinomial_v_74;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_75> AgradCdfLogBinomial_v_75;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_76> AgradCdfLogBinomial_v_76;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_77> AgradCdfLogBinomial_v_77;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_78> AgradCdfLogBinomial_v_78;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_79> AgradCdfLogBinomial_v_79;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_80> AgradCdfLogBinomial_v_80;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_81> AgradCdfLogBinomial_v_81;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_82> AgradCdfLogBinomial_v_82;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_83> AgradCdfLogBinomial_v_83;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_84> AgradCdfLogBinomial_v_84;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_85> AgradCdfLogBinomial_v_85;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_86> AgradCdfLogBinomial_v_86;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_87> AgradCdfLogBinomial_v_87;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_88> AgradCdfLogBinomial_v_88;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_89> AgradCdfLogBinomial_v_89;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_90> AgradCdfLogBinomial_v_90;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_91> AgradCdfLogBinomial_v_91;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_92> AgradCdfLogBinomial_v_92;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_93> AgradCdfLogBinomial_v_93;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_94> AgradCdfLogBinomial_v_94;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_95> AgradCdfLogBinomial_v_95;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_96> AgradCdfLogBinomial_v_96;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_97> AgradCdfLogBinomial_v_97;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_98> AgradCdfLogBinomial_v_98;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_99> AgradCdfLogBinomial_v_99;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_100> AgradCdfLogBinomial_v_100;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_101> AgradCdfLogBinomial_v_101;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_102> AgradCdfLogBinomial_v_102;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_103> AgradCdfLogBinomial_v_103;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_104> AgradCdfLogBinomial_v_104;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_105> AgradCdfLogBinomial_v_105;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_106> AgradCdfLogBinomial_v_106;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_107> AgradCdfLogBinomial_v_107;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_108> AgradCdfLogBinomial_v_108;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_109> AgradCdfLogBinomial_v_109;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_110> AgradCdfLogBinomial_v_110;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_111> AgradCdfLogBinomial_v_111;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_112> AgradCdfLogBinomial_v_112;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_113> AgradCdfLogBinomial_v_113;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_114> AgradCdfLogBinomial_v_114;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_115> AgradCdfLogBinomial_v_115;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_116> AgradCdfLogBinomial_v_116;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_117> AgradCdfLogBinomial_v_117;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_118> AgradCdfLogBinomial_v_118;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_119> AgradCdfLogBinomial_v_119;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_120> AgradCdfLogBinomial_v_120;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_121> AgradCdfLogBinomial_v_121;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_122> AgradCdfLogBinomial_v_122;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_123> AgradCdfLogBinomial_v_123;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_124> AgradCdfLogBinomial_v_124;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_125> AgradCdfLogBinomial_v_125;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_126> AgradCdfLogBinomial_v_126;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_v_127> AgradCdfLogBinomial_v_127;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_0, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_1, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_2, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_3, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_4, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_5, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_6, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_7, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_8, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_9, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_10, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_11, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_12, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_13, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_14, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_15, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_16, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_17, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_18, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_19, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_20, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_21, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_22, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_23, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_24, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_25, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_26, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_27, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_28, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_29, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_30, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_31, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_32, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_33, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_34, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_35, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_36, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_37, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_38, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_39, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_40, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_41, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_42, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_43, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_44, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_45, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_46, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_47, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_48, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_49, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_50, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_51, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_52, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_53, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_54, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_55, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_56, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_57, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_58, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_59, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_60, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_61, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_62, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_63, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_63);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_64, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_64);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_65, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_65);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_66, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_66);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_67, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_67);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_68, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_68);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_69, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_69);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_70, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_70);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_71, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_71);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_72, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_72);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_73, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_73);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_74, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_74);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_75, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_75);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_76, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_76);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_77, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_77);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_78, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_78);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_79, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_79);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_80, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_80);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_81, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_81);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_82, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_82);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_83, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_83);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_84, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_84);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_85, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_85);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_86, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_86);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_87, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_87);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_88, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_88);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_89, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_89);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_90, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_90);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_91, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_91);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_92, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_92);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_93, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_93);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_94, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_94);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_95, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_95);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_96, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_96);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_97, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_97);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_98, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_98);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_99, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_99);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_100, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_100);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_101, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_101);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_102, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_102);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_103, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_103);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_104, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_104);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_105, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_105);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_106, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_106);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_107, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_107);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_108, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_108);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_109, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_109);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_110, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_110);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_111, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_111);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_112, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_112);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_113, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_113);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_114, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_114);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_115, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_115);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_116, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_116);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_117, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_117);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_118, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_118);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_119, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_119);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_120, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_120);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_121, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_121);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_122, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_122);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_123, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_123);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_124, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_124);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_125, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_125);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_126, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_126);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_v_127, AgradCdfLogTestFixture, AgradCdfLogBinomial_v_127);

