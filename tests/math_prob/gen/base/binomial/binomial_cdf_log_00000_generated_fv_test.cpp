#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<int, int, fvar<var>, empty, empty, empty> type_fv_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<var>, empty, empty, empty> type_fv_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, empty, empty, empty> type_fv_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, empty, empty, empty> type_fv_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_63;

typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_0> AgradCdfLogBinomial_fv_0;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_1> AgradCdfLogBinomial_fv_1;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_2> AgradCdfLogBinomial_fv_2;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_3> AgradCdfLogBinomial_fv_3;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_4> AgradCdfLogBinomial_fv_4;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_5> AgradCdfLogBinomial_fv_5;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_6> AgradCdfLogBinomial_fv_6;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_7> AgradCdfLogBinomial_fv_7;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_8> AgradCdfLogBinomial_fv_8;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_9> AgradCdfLogBinomial_fv_9;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_10> AgradCdfLogBinomial_fv_10;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_11> AgradCdfLogBinomial_fv_11;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_12> AgradCdfLogBinomial_fv_12;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_13> AgradCdfLogBinomial_fv_13;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_14> AgradCdfLogBinomial_fv_14;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_15> AgradCdfLogBinomial_fv_15;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_16> AgradCdfLogBinomial_fv_16;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_17> AgradCdfLogBinomial_fv_17;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_18> AgradCdfLogBinomial_fv_18;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_19> AgradCdfLogBinomial_fv_19;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_20> AgradCdfLogBinomial_fv_20;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_21> AgradCdfLogBinomial_fv_21;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_22> AgradCdfLogBinomial_fv_22;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_23> AgradCdfLogBinomial_fv_23;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_24> AgradCdfLogBinomial_fv_24;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_25> AgradCdfLogBinomial_fv_25;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_26> AgradCdfLogBinomial_fv_26;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_27> AgradCdfLogBinomial_fv_27;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_28> AgradCdfLogBinomial_fv_28;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_29> AgradCdfLogBinomial_fv_29;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_30> AgradCdfLogBinomial_fv_30;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_31> AgradCdfLogBinomial_fv_31;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_32> AgradCdfLogBinomial_fv_32;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_33> AgradCdfLogBinomial_fv_33;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_34> AgradCdfLogBinomial_fv_34;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_35> AgradCdfLogBinomial_fv_35;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_36> AgradCdfLogBinomial_fv_36;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_37> AgradCdfLogBinomial_fv_37;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_38> AgradCdfLogBinomial_fv_38;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_39> AgradCdfLogBinomial_fv_39;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_40> AgradCdfLogBinomial_fv_40;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_41> AgradCdfLogBinomial_fv_41;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_42> AgradCdfLogBinomial_fv_42;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_43> AgradCdfLogBinomial_fv_43;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_44> AgradCdfLogBinomial_fv_44;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_45> AgradCdfLogBinomial_fv_45;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_46> AgradCdfLogBinomial_fv_46;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_47> AgradCdfLogBinomial_fv_47;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_48> AgradCdfLogBinomial_fv_48;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_49> AgradCdfLogBinomial_fv_49;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_50> AgradCdfLogBinomial_fv_50;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_51> AgradCdfLogBinomial_fv_51;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_52> AgradCdfLogBinomial_fv_52;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_53> AgradCdfLogBinomial_fv_53;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_54> AgradCdfLogBinomial_fv_54;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_55> AgradCdfLogBinomial_fv_55;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_56> AgradCdfLogBinomial_fv_56;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_57> AgradCdfLogBinomial_fv_57;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_58> AgradCdfLogBinomial_fv_58;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_59> AgradCdfLogBinomial_fv_59;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_60> AgradCdfLogBinomial_fv_60;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_61> AgradCdfLogBinomial_fv_61;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_62> AgradCdfLogBinomial_fv_62;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_fv_63> AgradCdfLogBinomial_fv_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_0, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_1, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_2, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_3, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_4, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_5, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_6, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_7, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_8, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_9, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_10, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_11, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_12, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_13, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_14, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_15, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_16, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_17, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_18, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_19, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_20, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_21, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_22, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_23, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_24, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_25, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_26, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_27, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_28, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_29, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_30, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_31, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_32, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_33, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_34, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_35, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_36, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_37, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_38, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_39, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_40, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_41, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_42, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_43, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_44, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_45, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_46, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_47, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_48, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_49, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_50, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_51, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_52, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_53, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_54, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_55, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_56, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_57, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_58, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_59, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_60, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_61, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_62, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_fv_63, AgradCdfLogTestFixture, AgradCdfLogBinomial_fv_63);

