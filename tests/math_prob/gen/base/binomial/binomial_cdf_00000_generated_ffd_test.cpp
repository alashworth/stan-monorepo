#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_test.hpp>

typedef boost::mpl::vector<int, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_63;

typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_0> AgradCdfBinomial_ffd_0;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_1> AgradCdfBinomial_ffd_1;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_2> AgradCdfBinomial_ffd_2;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_3> AgradCdfBinomial_ffd_3;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_4> AgradCdfBinomial_ffd_4;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_5> AgradCdfBinomial_ffd_5;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_6> AgradCdfBinomial_ffd_6;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_7> AgradCdfBinomial_ffd_7;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_8> AgradCdfBinomial_ffd_8;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_9> AgradCdfBinomial_ffd_9;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_10> AgradCdfBinomial_ffd_10;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_11> AgradCdfBinomial_ffd_11;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_12> AgradCdfBinomial_ffd_12;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_13> AgradCdfBinomial_ffd_13;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_14> AgradCdfBinomial_ffd_14;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_15> AgradCdfBinomial_ffd_15;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_16> AgradCdfBinomial_ffd_16;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_17> AgradCdfBinomial_ffd_17;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_18> AgradCdfBinomial_ffd_18;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_19> AgradCdfBinomial_ffd_19;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_20> AgradCdfBinomial_ffd_20;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_21> AgradCdfBinomial_ffd_21;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_22> AgradCdfBinomial_ffd_22;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_23> AgradCdfBinomial_ffd_23;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_24> AgradCdfBinomial_ffd_24;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_25> AgradCdfBinomial_ffd_25;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_26> AgradCdfBinomial_ffd_26;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_27> AgradCdfBinomial_ffd_27;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_28> AgradCdfBinomial_ffd_28;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_29> AgradCdfBinomial_ffd_29;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_30> AgradCdfBinomial_ffd_30;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_31> AgradCdfBinomial_ffd_31;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_32> AgradCdfBinomial_ffd_32;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_33> AgradCdfBinomial_ffd_33;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_34> AgradCdfBinomial_ffd_34;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_35> AgradCdfBinomial_ffd_35;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_36> AgradCdfBinomial_ffd_36;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_37> AgradCdfBinomial_ffd_37;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_38> AgradCdfBinomial_ffd_38;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_39> AgradCdfBinomial_ffd_39;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_40> AgradCdfBinomial_ffd_40;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_41> AgradCdfBinomial_ffd_41;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_42> AgradCdfBinomial_ffd_42;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_43> AgradCdfBinomial_ffd_43;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_44> AgradCdfBinomial_ffd_44;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_45> AgradCdfBinomial_ffd_45;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_46> AgradCdfBinomial_ffd_46;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_47> AgradCdfBinomial_ffd_47;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_48> AgradCdfBinomial_ffd_48;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_49> AgradCdfBinomial_ffd_49;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_50> AgradCdfBinomial_ffd_50;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_51> AgradCdfBinomial_ffd_51;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_52> AgradCdfBinomial_ffd_52;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_53> AgradCdfBinomial_ffd_53;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_54> AgradCdfBinomial_ffd_54;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_55> AgradCdfBinomial_ffd_55;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_56> AgradCdfBinomial_ffd_56;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_57> AgradCdfBinomial_ffd_57;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_58> AgradCdfBinomial_ffd_58;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_59> AgradCdfBinomial_ffd_59;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_60> AgradCdfBinomial_ffd_60;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_61> AgradCdfBinomial_ffd_61;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_62> AgradCdfBinomial_ffd_62;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffd_63> AgradCdfBinomial_ffd_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_0, AgradCdfTestFixture, AgradCdfBinomial_ffd_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_1, AgradCdfTestFixture, AgradCdfBinomial_ffd_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_2, AgradCdfTestFixture, AgradCdfBinomial_ffd_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_3, AgradCdfTestFixture, AgradCdfBinomial_ffd_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_4, AgradCdfTestFixture, AgradCdfBinomial_ffd_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_5, AgradCdfTestFixture, AgradCdfBinomial_ffd_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_6, AgradCdfTestFixture, AgradCdfBinomial_ffd_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_7, AgradCdfTestFixture, AgradCdfBinomial_ffd_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_8, AgradCdfTestFixture, AgradCdfBinomial_ffd_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_9, AgradCdfTestFixture, AgradCdfBinomial_ffd_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_10, AgradCdfTestFixture, AgradCdfBinomial_ffd_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_11, AgradCdfTestFixture, AgradCdfBinomial_ffd_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_12, AgradCdfTestFixture, AgradCdfBinomial_ffd_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_13, AgradCdfTestFixture, AgradCdfBinomial_ffd_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_14, AgradCdfTestFixture, AgradCdfBinomial_ffd_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_15, AgradCdfTestFixture, AgradCdfBinomial_ffd_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_16, AgradCdfTestFixture, AgradCdfBinomial_ffd_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_17, AgradCdfTestFixture, AgradCdfBinomial_ffd_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_18, AgradCdfTestFixture, AgradCdfBinomial_ffd_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_19, AgradCdfTestFixture, AgradCdfBinomial_ffd_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_20, AgradCdfTestFixture, AgradCdfBinomial_ffd_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_21, AgradCdfTestFixture, AgradCdfBinomial_ffd_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_22, AgradCdfTestFixture, AgradCdfBinomial_ffd_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_23, AgradCdfTestFixture, AgradCdfBinomial_ffd_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_24, AgradCdfTestFixture, AgradCdfBinomial_ffd_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_25, AgradCdfTestFixture, AgradCdfBinomial_ffd_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_26, AgradCdfTestFixture, AgradCdfBinomial_ffd_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_27, AgradCdfTestFixture, AgradCdfBinomial_ffd_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_28, AgradCdfTestFixture, AgradCdfBinomial_ffd_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_29, AgradCdfTestFixture, AgradCdfBinomial_ffd_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_30, AgradCdfTestFixture, AgradCdfBinomial_ffd_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_31, AgradCdfTestFixture, AgradCdfBinomial_ffd_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_32, AgradCdfTestFixture, AgradCdfBinomial_ffd_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_33, AgradCdfTestFixture, AgradCdfBinomial_ffd_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_34, AgradCdfTestFixture, AgradCdfBinomial_ffd_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_35, AgradCdfTestFixture, AgradCdfBinomial_ffd_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_36, AgradCdfTestFixture, AgradCdfBinomial_ffd_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_37, AgradCdfTestFixture, AgradCdfBinomial_ffd_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_38, AgradCdfTestFixture, AgradCdfBinomial_ffd_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_39, AgradCdfTestFixture, AgradCdfBinomial_ffd_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_40, AgradCdfTestFixture, AgradCdfBinomial_ffd_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_41, AgradCdfTestFixture, AgradCdfBinomial_ffd_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_42, AgradCdfTestFixture, AgradCdfBinomial_ffd_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_43, AgradCdfTestFixture, AgradCdfBinomial_ffd_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_44, AgradCdfTestFixture, AgradCdfBinomial_ffd_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_45, AgradCdfTestFixture, AgradCdfBinomial_ffd_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_46, AgradCdfTestFixture, AgradCdfBinomial_ffd_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_47, AgradCdfTestFixture, AgradCdfBinomial_ffd_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_48, AgradCdfTestFixture, AgradCdfBinomial_ffd_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_49, AgradCdfTestFixture, AgradCdfBinomial_ffd_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_50, AgradCdfTestFixture, AgradCdfBinomial_ffd_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_51, AgradCdfTestFixture, AgradCdfBinomial_ffd_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_52, AgradCdfTestFixture, AgradCdfBinomial_ffd_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_53, AgradCdfTestFixture, AgradCdfBinomial_ffd_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_54, AgradCdfTestFixture, AgradCdfBinomial_ffd_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_55, AgradCdfTestFixture, AgradCdfBinomial_ffd_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_56, AgradCdfTestFixture, AgradCdfBinomial_ffd_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_57, AgradCdfTestFixture, AgradCdfBinomial_ffd_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_58, AgradCdfTestFixture, AgradCdfBinomial_ffd_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_59, AgradCdfTestFixture, AgradCdfBinomial_ffd_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_60, AgradCdfTestFixture, AgradCdfBinomial_ffd_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_61, AgradCdfTestFixture, AgradCdfBinomial_ffd_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_62, AgradCdfTestFixture, AgradCdfBinomial_ffd_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffd_63, AgradCdfTestFixture, AgradCdfBinomial_ffd_63);

