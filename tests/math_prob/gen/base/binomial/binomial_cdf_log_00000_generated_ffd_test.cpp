#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<int, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_63;

typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_0> AgradCdfLogBinomial_ffd_0;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_1> AgradCdfLogBinomial_ffd_1;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_2> AgradCdfLogBinomial_ffd_2;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_3> AgradCdfLogBinomial_ffd_3;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_4> AgradCdfLogBinomial_ffd_4;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_5> AgradCdfLogBinomial_ffd_5;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_6> AgradCdfLogBinomial_ffd_6;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_7> AgradCdfLogBinomial_ffd_7;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_8> AgradCdfLogBinomial_ffd_8;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_9> AgradCdfLogBinomial_ffd_9;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_10> AgradCdfLogBinomial_ffd_10;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_11> AgradCdfLogBinomial_ffd_11;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_12> AgradCdfLogBinomial_ffd_12;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_13> AgradCdfLogBinomial_ffd_13;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_14> AgradCdfLogBinomial_ffd_14;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_15> AgradCdfLogBinomial_ffd_15;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_16> AgradCdfLogBinomial_ffd_16;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_17> AgradCdfLogBinomial_ffd_17;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_18> AgradCdfLogBinomial_ffd_18;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_19> AgradCdfLogBinomial_ffd_19;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_20> AgradCdfLogBinomial_ffd_20;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_21> AgradCdfLogBinomial_ffd_21;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_22> AgradCdfLogBinomial_ffd_22;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_23> AgradCdfLogBinomial_ffd_23;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_24> AgradCdfLogBinomial_ffd_24;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_25> AgradCdfLogBinomial_ffd_25;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_26> AgradCdfLogBinomial_ffd_26;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_27> AgradCdfLogBinomial_ffd_27;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_28> AgradCdfLogBinomial_ffd_28;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_29> AgradCdfLogBinomial_ffd_29;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_30> AgradCdfLogBinomial_ffd_30;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_31> AgradCdfLogBinomial_ffd_31;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_32> AgradCdfLogBinomial_ffd_32;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_33> AgradCdfLogBinomial_ffd_33;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_34> AgradCdfLogBinomial_ffd_34;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_35> AgradCdfLogBinomial_ffd_35;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_36> AgradCdfLogBinomial_ffd_36;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_37> AgradCdfLogBinomial_ffd_37;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_38> AgradCdfLogBinomial_ffd_38;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_39> AgradCdfLogBinomial_ffd_39;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_40> AgradCdfLogBinomial_ffd_40;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_41> AgradCdfLogBinomial_ffd_41;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_42> AgradCdfLogBinomial_ffd_42;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_43> AgradCdfLogBinomial_ffd_43;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_44> AgradCdfLogBinomial_ffd_44;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_45> AgradCdfLogBinomial_ffd_45;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_46> AgradCdfLogBinomial_ffd_46;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_47> AgradCdfLogBinomial_ffd_47;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_48> AgradCdfLogBinomial_ffd_48;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_49> AgradCdfLogBinomial_ffd_49;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_50> AgradCdfLogBinomial_ffd_50;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_51> AgradCdfLogBinomial_ffd_51;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_52> AgradCdfLogBinomial_ffd_52;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_53> AgradCdfLogBinomial_ffd_53;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_54> AgradCdfLogBinomial_ffd_54;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_55> AgradCdfLogBinomial_ffd_55;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_56> AgradCdfLogBinomial_ffd_56;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_57> AgradCdfLogBinomial_ffd_57;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_58> AgradCdfLogBinomial_ffd_58;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_59> AgradCdfLogBinomial_ffd_59;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_60> AgradCdfLogBinomial_ffd_60;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_61> AgradCdfLogBinomial_ffd_61;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_62> AgradCdfLogBinomial_ffd_62;
typedef boost::mpl::vector<AgradCdfLogBinomial, type_ffd_63> AgradCdfLogBinomial_ffd_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_0, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_1, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_2, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_3, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_4, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_5, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_6, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_7, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_8, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_9, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_10, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_11, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_12, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_13, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_14, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_15, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_16, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_17, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_18, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_19, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_20, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_21, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_22, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_23, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_24, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_25, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_26, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_27, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_28, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_29, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_30, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_31, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_32, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_33, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_34, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_35, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_36, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_37, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_38, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_39, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_40, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_41, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_42, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_43, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_44, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_45, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_46, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_47, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_48, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_49, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_50, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_51, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_52, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_53, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_54, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_55, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_56, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_57, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_58, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_59, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_60, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_61, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_62, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBinomial_ffd_63, AgradCdfLogTestFixture, AgradCdfLogBinomial_ffd_63);

