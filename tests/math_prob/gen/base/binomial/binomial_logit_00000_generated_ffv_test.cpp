#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_logit_test.hpp>

typedef boost::mpl::vector<int, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_63;

typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_0> AgradDistributionsBinomialLogit_ffv_0;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_1> AgradDistributionsBinomialLogit_ffv_1;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_2> AgradDistributionsBinomialLogit_ffv_2;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_3> AgradDistributionsBinomialLogit_ffv_3;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_4> AgradDistributionsBinomialLogit_ffv_4;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_5> AgradDistributionsBinomialLogit_ffv_5;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_6> AgradDistributionsBinomialLogit_ffv_6;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_7> AgradDistributionsBinomialLogit_ffv_7;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_8> AgradDistributionsBinomialLogit_ffv_8;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_9> AgradDistributionsBinomialLogit_ffv_9;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_10> AgradDistributionsBinomialLogit_ffv_10;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_11> AgradDistributionsBinomialLogit_ffv_11;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_12> AgradDistributionsBinomialLogit_ffv_12;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_13> AgradDistributionsBinomialLogit_ffv_13;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_14> AgradDistributionsBinomialLogit_ffv_14;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_15> AgradDistributionsBinomialLogit_ffv_15;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_16> AgradDistributionsBinomialLogit_ffv_16;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_17> AgradDistributionsBinomialLogit_ffv_17;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_18> AgradDistributionsBinomialLogit_ffv_18;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_19> AgradDistributionsBinomialLogit_ffv_19;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_20> AgradDistributionsBinomialLogit_ffv_20;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_21> AgradDistributionsBinomialLogit_ffv_21;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_22> AgradDistributionsBinomialLogit_ffv_22;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_23> AgradDistributionsBinomialLogit_ffv_23;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_24> AgradDistributionsBinomialLogit_ffv_24;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_25> AgradDistributionsBinomialLogit_ffv_25;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_26> AgradDistributionsBinomialLogit_ffv_26;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_27> AgradDistributionsBinomialLogit_ffv_27;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_28> AgradDistributionsBinomialLogit_ffv_28;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_29> AgradDistributionsBinomialLogit_ffv_29;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_30> AgradDistributionsBinomialLogit_ffv_30;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_31> AgradDistributionsBinomialLogit_ffv_31;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_32> AgradDistributionsBinomialLogit_ffv_32;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_33> AgradDistributionsBinomialLogit_ffv_33;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_34> AgradDistributionsBinomialLogit_ffv_34;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_35> AgradDistributionsBinomialLogit_ffv_35;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_36> AgradDistributionsBinomialLogit_ffv_36;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_37> AgradDistributionsBinomialLogit_ffv_37;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_38> AgradDistributionsBinomialLogit_ffv_38;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_39> AgradDistributionsBinomialLogit_ffv_39;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_40> AgradDistributionsBinomialLogit_ffv_40;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_41> AgradDistributionsBinomialLogit_ffv_41;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_42> AgradDistributionsBinomialLogit_ffv_42;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_43> AgradDistributionsBinomialLogit_ffv_43;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_44> AgradDistributionsBinomialLogit_ffv_44;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_45> AgradDistributionsBinomialLogit_ffv_45;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_46> AgradDistributionsBinomialLogit_ffv_46;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_47> AgradDistributionsBinomialLogit_ffv_47;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_48> AgradDistributionsBinomialLogit_ffv_48;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_49> AgradDistributionsBinomialLogit_ffv_49;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_50> AgradDistributionsBinomialLogit_ffv_50;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_51> AgradDistributionsBinomialLogit_ffv_51;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_52> AgradDistributionsBinomialLogit_ffv_52;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_53> AgradDistributionsBinomialLogit_ffv_53;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_54> AgradDistributionsBinomialLogit_ffv_54;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_55> AgradDistributionsBinomialLogit_ffv_55;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_56> AgradDistributionsBinomialLogit_ffv_56;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_57> AgradDistributionsBinomialLogit_ffv_57;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_58> AgradDistributionsBinomialLogit_ffv_58;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_59> AgradDistributionsBinomialLogit_ffv_59;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_60> AgradDistributionsBinomialLogit_ffv_60;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_61> AgradDistributionsBinomialLogit_ffv_61;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_62> AgradDistributionsBinomialLogit_ffv_62;
typedef boost::mpl::vector<AgradDistributionsBinomialLogit, type_ffv_63> AgradDistributionsBinomialLogit_ffv_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_0, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_1, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_2, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_3, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_4, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_5, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_6, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_7, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_8, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_9, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_10, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_11, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_12, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_13, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_14, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_15, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_16, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_17, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_18, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_19, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_20, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_21, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_22, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_23, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_24, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_25, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_26, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_27, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_28, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_29, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_30, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_31, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_32, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_33, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_34, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_35, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_36, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_37, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_38, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_39, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_40, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_41, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_42, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_43, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_44, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_45, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_46, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_47, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_48, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_49, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_50, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_51, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_52, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_53, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_54, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_55, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_56, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_57, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_58, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_59, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_60, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_61, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_62, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomialLogit_ffv_63, AgradDistributionTestFixture, AgradDistributionsBinomialLogit_ffv_63);

