#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_test.hpp>

typedef boost::mpl::vector<int, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, empty, empty, empty> type_ffv_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, empty, empty, empty> type_ffv_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_63;

typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_0> AgradCdfBinomial_ffv_0;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_1> AgradCdfBinomial_ffv_1;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_2> AgradCdfBinomial_ffv_2;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_3> AgradCdfBinomial_ffv_3;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_4> AgradCdfBinomial_ffv_4;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_5> AgradCdfBinomial_ffv_5;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_6> AgradCdfBinomial_ffv_6;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_7> AgradCdfBinomial_ffv_7;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_8> AgradCdfBinomial_ffv_8;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_9> AgradCdfBinomial_ffv_9;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_10> AgradCdfBinomial_ffv_10;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_11> AgradCdfBinomial_ffv_11;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_12> AgradCdfBinomial_ffv_12;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_13> AgradCdfBinomial_ffv_13;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_14> AgradCdfBinomial_ffv_14;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_15> AgradCdfBinomial_ffv_15;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_16> AgradCdfBinomial_ffv_16;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_17> AgradCdfBinomial_ffv_17;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_18> AgradCdfBinomial_ffv_18;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_19> AgradCdfBinomial_ffv_19;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_20> AgradCdfBinomial_ffv_20;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_21> AgradCdfBinomial_ffv_21;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_22> AgradCdfBinomial_ffv_22;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_23> AgradCdfBinomial_ffv_23;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_24> AgradCdfBinomial_ffv_24;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_25> AgradCdfBinomial_ffv_25;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_26> AgradCdfBinomial_ffv_26;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_27> AgradCdfBinomial_ffv_27;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_28> AgradCdfBinomial_ffv_28;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_29> AgradCdfBinomial_ffv_29;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_30> AgradCdfBinomial_ffv_30;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_31> AgradCdfBinomial_ffv_31;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_32> AgradCdfBinomial_ffv_32;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_33> AgradCdfBinomial_ffv_33;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_34> AgradCdfBinomial_ffv_34;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_35> AgradCdfBinomial_ffv_35;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_36> AgradCdfBinomial_ffv_36;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_37> AgradCdfBinomial_ffv_37;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_38> AgradCdfBinomial_ffv_38;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_39> AgradCdfBinomial_ffv_39;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_40> AgradCdfBinomial_ffv_40;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_41> AgradCdfBinomial_ffv_41;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_42> AgradCdfBinomial_ffv_42;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_43> AgradCdfBinomial_ffv_43;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_44> AgradCdfBinomial_ffv_44;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_45> AgradCdfBinomial_ffv_45;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_46> AgradCdfBinomial_ffv_46;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_47> AgradCdfBinomial_ffv_47;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_48> AgradCdfBinomial_ffv_48;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_49> AgradCdfBinomial_ffv_49;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_50> AgradCdfBinomial_ffv_50;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_51> AgradCdfBinomial_ffv_51;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_52> AgradCdfBinomial_ffv_52;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_53> AgradCdfBinomial_ffv_53;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_54> AgradCdfBinomial_ffv_54;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_55> AgradCdfBinomial_ffv_55;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_56> AgradCdfBinomial_ffv_56;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_57> AgradCdfBinomial_ffv_57;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_58> AgradCdfBinomial_ffv_58;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_59> AgradCdfBinomial_ffv_59;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_60> AgradCdfBinomial_ffv_60;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_61> AgradCdfBinomial_ffv_61;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_62> AgradCdfBinomial_ffv_62;
typedef boost::mpl::vector<AgradCdfBinomial, type_ffv_63> AgradCdfBinomial_ffv_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_0, AgradCdfTestFixture, AgradCdfBinomial_ffv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_1, AgradCdfTestFixture, AgradCdfBinomial_ffv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_2, AgradCdfTestFixture, AgradCdfBinomial_ffv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_3, AgradCdfTestFixture, AgradCdfBinomial_ffv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_4, AgradCdfTestFixture, AgradCdfBinomial_ffv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_5, AgradCdfTestFixture, AgradCdfBinomial_ffv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_6, AgradCdfTestFixture, AgradCdfBinomial_ffv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_7, AgradCdfTestFixture, AgradCdfBinomial_ffv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_8, AgradCdfTestFixture, AgradCdfBinomial_ffv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_9, AgradCdfTestFixture, AgradCdfBinomial_ffv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_10, AgradCdfTestFixture, AgradCdfBinomial_ffv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_11, AgradCdfTestFixture, AgradCdfBinomial_ffv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_12, AgradCdfTestFixture, AgradCdfBinomial_ffv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_13, AgradCdfTestFixture, AgradCdfBinomial_ffv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_14, AgradCdfTestFixture, AgradCdfBinomial_ffv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_15, AgradCdfTestFixture, AgradCdfBinomial_ffv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_16, AgradCdfTestFixture, AgradCdfBinomial_ffv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_17, AgradCdfTestFixture, AgradCdfBinomial_ffv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_18, AgradCdfTestFixture, AgradCdfBinomial_ffv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_19, AgradCdfTestFixture, AgradCdfBinomial_ffv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_20, AgradCdfTestFixture, AgradCdfBinomial_ffv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_21, AgradCdfTestFixture, AgradCdfBinomial_ffv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_22, AgradCdfTestFixture, AgradCdfBinomial_ffv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_23, AgradCdfTestFixture, AgradCdfBinomial_ffv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_24, AgradCdfTestFixture, AgradCdfBinomial_ffv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_25, AgradCdfTestFixture, AgradCdfBinomial_ffv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_26, AgradCdfTestFixture, AgradCdfBinomial_ffv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_27, AgradCdfTestFixture, AgradCdfBinomial_ffv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_28, AgradCdfTestFixture, AgradCdfBinomial_ffv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_29, AgradCdfTestFixture, AgradCdfBinomial_ffv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_30, AgradCdfTestFixture, AgradCdfBinomial_ffv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_31, AgradCdfTestFixture, AgradCdfBinomial_ffv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_32, AgradCdfTestFixture, AgradCdfBinomial_ffv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_33, AgradCdfTestFixture, AgradCdfBinomial_ffv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_34, AgradCdfTestFixture, AgradCdfBinomial_ffv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_35, AgradCdfTestFixture, AgradCdfBinomial_ffv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_36, AgradCdfTestFixture, AgradCdfBinomial_ffv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_37, AgradCdfTestFixture, AgradCdfBinomial_ffv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_38, AgradCdfTestFixture, AgradCdfBinomial_ffv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_39, AgradCdfTestFixture, AgradCdfBinomial_ffv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_40, AgradCdfTestFixture, AgradCdfBinomial_ffv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_41, AgradCdfTestFixture, AgradCdfBinomial_ffv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_42, AgradCdfTestFixture, AgradCdfBinomial_ffv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_43, AgradCdfTestFixture, AgradCdfBinomial_ffv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_44, AgradCdfTestFixture, AgradCdfBinomial_ffv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_45, AgradCdfTestFixture, AgradCdfBinomial_ffv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_46, AgradCdfTestFixture, AgradCdfBinomial_ffv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_47, AgradCdfTestFixture, AgradCdfBinomial_ffv_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_48, AgradCdfTestFixture, AgradCdfBinomial_ffv_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_49, AgradCdfTestFixture, AgradCdfBinomial_ffv_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_50, AgradCdfTestFixture, AgradCdfBinomial_ffv_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_51, AgradCdfTestFixture, AgradCdfBinomial_ffv_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_52, AgradCdfTestFixture, AgradCdfBinomial_ffv_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_53, AgradCdfTestFixture, AgradCdfBinomial_ffv_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_54, AgradCdfTestFixture, AgradCdfBinomial_ffv_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_55, AgradCdfTestFixture, AgradCdfBinomial_ffv_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_56, AgradCdfTestFixture, AgradCdfBinomial_ffv_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_57, AgradCdfTestFixture, AgradCdfBinomial_ffv_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_58, AgradCdfTestFixture, AgradCdfBinomial_ffv_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_59, AgradCdfTestFixture, AgradCdfBinomial_ffv_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_60, AgradCdfTestFixture, AgradCdfBinomial_ffv_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_61, AgradCdfTestFixture, AgradCdfBinomial_ffv_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_62, AgradCdfTestFixture, AgradCdfBinomial_ffv_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_ffv_63, AgradCdfTestFixture, AgradCdfBinomial_ffv_63);

