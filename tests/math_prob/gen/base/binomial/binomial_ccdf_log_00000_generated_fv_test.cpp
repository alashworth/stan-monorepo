#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<int, int, fvar<var>, empty, empty, empty> type_fv_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<var>, empty, empty, empty> type_fv_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, empty, empty, empty> type_fv_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, empty, empty, empty> type_fv_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, empty, empty, empty> type_fv_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, empty, empty, empty> type_fv_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, empty, empty, empty> type_fv_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_63;

typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_0> AgradCcdfLogBinomial_fv_0;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_1> AgradCcdfLogBinomial_fv_1;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_2> AgradCcdfLogBinomial_fv_2;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_3> AgradCcdfLogBinomial_fv_3;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_4> AgradCcdfLogBinomial_fv_4;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_5> AgradCcdfLogBinomial_fv_5;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_6> AgradCcdfLogBinomial_fv_6;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_7> AgradCcdfLogBinomial_fv_7;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_8> AgradCcdfLogBinomial_fv_8;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_9> AgradCcdfLogBinomial_fv_9;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_10> AgradCcdfLogBinomial_fv_10;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_11> AgradCcdfLogBinomial_fv_11;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_12> AgradCcdfLogBinomial_fv_12;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_13> AgradCcdfLogBinomial_fv_13;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_14> AgradCcdfLogBinomial_fv_14;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_15> AgradCcdfLogBinomial_fv_15;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_16> AgradCcdfLogBinomial_fv_16;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_17> AgradCcdfLogBinomial_fv_17;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_18> AgradCcdfLogBinomial_fv_18;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_19> AgradCcdfLogBinomial_fv_19;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_20> AgradCcdfLogBinomial_fv_20;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_21> AgradCcdfLogBinomial_fv_21;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_22> AgradCcdfLogBinomial_fv_22;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_23> AgradCcdfLogBinomial_fv_23;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_24> AgradCcdfLogBinomial_fv_24;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_25> AgradCcdfLogBinomial_fv_25;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_26> AgradCcdfLogBinomial_fv_26;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_27> AgradCcdfLogBinomial_fv_27;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_28> AgradCcdfLogBinomial_fv_28;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_29> AgradCcdfLogBinomial_fv_29;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_30> AgradCcdfLogBinomial_fv_30;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_31> AgradCcdfLogBinomial_fv_31;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_32> AgradCcdfLogBinomial_fv_32;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_33> AgradCcdfLogBinomial_fv_33;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_34> AgradCcdfLogBinomial_fv_34;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_35> AgradCcdfLogBinomial_fv_35;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_36> AgradCcdfLogBinomial_fv_36;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_37> AgradCcdfLogBinomial_fv_37;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_38> AgradCcdfLogBinomial_fv_38;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_39> AgradCcdfLogBinomial_fv_39;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_40> AgradCcdfLogBinomial_fv_40;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_41> AgradCcdfLogBinomial_fv_41;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_42> AgradCcdfLogBinomial_fv_42;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_43> AgradCcdfLogBinomial_fv_43;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_44> AgradCcdfLogBinomial_fv_44;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_45> AgradCcdfLogBinomial_fv_45;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_46> AgradCcdfLogBinomial_fv_46;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_47> AgradCcdfLogBinomial_fv_47;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_48> AgradCcdfLogBinomial_fv_48;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_49> AgradCcdfLogBinomial_fv_49;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_50> AgradCcdfLogBinomial_fv_50;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_51> AgradCcdfLogBinomial_fv_51;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_52> AgradCcdfLogBinomial_fv_52;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_53> AgradCcdfLogBinomial_fv_53;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_54> AgradCcdfLogBinomial_fv_54;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_55> AgradCcdfLogBinomial_fv_55;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_56> AgradCcdfLogBinomial_fv_56;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_57> AgradCcdfLogBinomial_fv_57;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_58> AgradCcdfLogBinomial_fv_58;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_59> AgradCcdfLogBinomial_fv_59;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_60> AgradCcdfLogBinomial_fv_60;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_61> AgradCcdfLogBinomial_fv_61;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_62> AgradCcdfLogBinomial_fv_62;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fv_63> AgradCcdfLogBinomial_fv_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_0, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_1, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_2, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_3, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_4, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_5, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_6, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_7, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_8, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_9, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_10, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_11, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_12, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_13, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_14, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_15, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_16, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_17, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_18, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_19, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_20, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_21, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_22, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_23, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_24, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_25, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_26, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_27, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_28, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_29, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_30, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_31, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_32, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_33, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_34, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_35, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_36, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_37, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_38, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_39, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_40, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_41, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_42, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_43, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_44, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_45, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_46, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_47, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_48, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_49, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_50, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_51, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_52, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_53, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_54, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_55, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_56, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_57, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_58, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_59, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_60, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_61, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_62, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fv_63, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fv_63);

