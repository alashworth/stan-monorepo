#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<int, int, fvar<double>, empty, empty, empty> type_fd_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<double>, empty, empty, empty> type_fd_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, empty, empty, empty> type_fd_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, empty, empty, empty> type_fd_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_63;

typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_0> AgradCcdfLogBinomial_fd_0;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_1> AgradCcdfLogBinomial_fd_1;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_2> AgradCcdfLogBinomial_fd_2;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_3> AgradCcdfLogBinomial_fd_3;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_4> AgradCcdfLogBinomial_fd_4;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_5> AgradCcdfLogBinomial_fd_5;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_6> AgradCcdfLogBinomial_fd_6;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_7> AgradCcdfLogBinomial_fd_7;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_8> AgradCcdfLogBinomial_fd_8;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_9> AgradCcdfLogBinomial_fd_9;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_10> AgradCcdfLogBinomial_fd_10;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_11> AgradCcdfLogBinomial_fd_11;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_12> AgradCcdfLogBinomial_fd_12;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_13> AgradCcdfLogBinomial_fd_13;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_14> AgradCcdfLogBinomial_fd_14;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_15> AgradCcdfLogBinomial_fd_15;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_16> AgradCcdfLogBinomial_fd_16;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_17> AgradCcdfLogBinomial_fd_17;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_18> AgradCcdfLogBinomial_fd_18;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_19> AgradCcdfLogBinomial_fd_19;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_20> AgradCcdfLogBinomial_fd_20;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_21> AgradCcdfLogBinomial_fd_21;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_22> AgradCcdfLogBinomial_fd_22;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_23> AgradCcdfLogBinomial_fd_23;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_24> AgradCcdfLogBinomial_fd_24;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_25> AgradCcdfLogBinomial_fd_25;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_26> AgradCcdfLogBinomial_fd_26;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_27> AgradCcdfLogBinomial_fd_27;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_28> AgradCcdfLogBinomial_fd_28;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_29> AgradCcdfLogBinomial_fd_29;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_30> AgradCcdfLogBinomial_fd_30;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_31> AgradCcdfLogBinomial_fd_31;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_32> AgradCcdfLogBinomial_fd_32;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_33> AgradCcdfLogBinomial_fd_33;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_34> AgradCcdfLogBinomial_fd_34;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_35> AgradCcdfLogBinomial_fd_35;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_36> AgradCcdfLogBinomial_fd_36;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_37> AgradCcdfLogBinomial_fd_37;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_38> AgradCcdfLogBinomial_fd_38;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_39> AgradCcdfLogBinomial_fd_39;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_40> AgradCcdfLogBinomial_fd_40;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_41> AgradCcdfLogBinomial_fd_41;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_42> AgradCcdfLogBinomial_fd_42;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_43> AgradCcdfLogBinomial_fd_43;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_44> AgradCcdfLogBinomial_fd_44;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_45> AgradCcdfLogBinomial_fd_45;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_46> AgradCcdfLogBinomial_fd_46;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_47> AgradCcdfLogBinomial_fd_47;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_48> AgradCcdfLogBinomial_fd_48;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_49> AgradCcdfLogBinomial_fd_49;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_50> AgradCcdfLogBinomial_fd_50;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_51> AgradCcdfLogBinomial_fd_51;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_52> AgradCcdfLogBinomial_fd_52;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_53> AgradCcdfLogBinomial_fd_53;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_54> AgradCcdfLogBinomial_fd_54;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_55> AgradCcdfLogBinomial_fd_55;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_56> AgradCcdfLogBinomial_fd_56;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_57> AgradCcdfLogBinomial_fd_57;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_58> AgradCcdfLogBinomial_fd_58;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_59> AgradCcdfLogBinomial_fd_59;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_60> AgradCcdfLogBinomial_fd_60;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_61> AgradCcdfLogBinomial_fd_61;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_62> AgradCcdfLogBinomial_fd_62;
typedef boost::mpl::vector<AgradCcdfLogBinomial, type_fd_63> AgradCcdfLogBinomial_fd_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_0, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_1, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_2, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_3, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_4, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_5, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_6, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_7, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_8, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_9, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_10, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_11, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_12, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_13, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_14, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_15, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_16, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_17, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_18, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_19, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_20, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_21, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_22, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_23, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_24, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_25, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_26, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_27, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_28, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_29, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_30, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_31, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_32, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_33, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_34, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_35, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_36, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_37, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_38, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_39, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_40, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_41, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_42, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_43, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_44, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_45, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_46, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_47, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_48, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_49, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_50, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_51, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_52, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_53, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_54, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_55, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_56, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_57, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_58, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_59, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_60, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_61, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_62, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBinomial_fd_63, AgradCcdfLogTestFixture, AgradCcdfLogBinomial_fd_63);

