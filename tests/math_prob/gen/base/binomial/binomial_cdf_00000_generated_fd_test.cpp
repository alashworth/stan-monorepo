#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_cdf_test.hpp>

typedef boost::mpl::vector<int, int, fvar<double>, empty, empty, empty> type_fd_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<double>, empty, empty, empty> type_fd_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, empty, empty, empty> type_fd_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, empty, empty, empty> type_fd_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, empty, empty, empty> type_fd_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, empty, empty, empty> type_fd_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, empty, empty, empty> type_fd_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_63;

typedef boost::mpl::vector<AgradCdfBinomial, type_fd_0> AgradCdfBinomial_fd_0;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_1> AgradCdfBinomial_fd_1;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_2> AgradCdfBinomial_fd_2;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_3> AgradCdfBinomial_fd_3;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_4> AgradCdfBinomial_fd_4;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_5> AgradCdfBinomial_fd_5;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_6> AgradCdfBinomial_fd_6;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_7> AgradCdfBinomial_fd_7;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_8> AgradCdfBinomial_fd_8;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_9> AgradCdfBinomial_fd_9;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_10> AgradCdfBinomial_fd_10;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_11> AgradCdfBinomial_fd_11;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_12> AgradCdfBinomial_fd_12;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_13> AgradCdfBinomial_fd_13;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_14> AgradCdfBinomial_fd_14;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_15> AgradCdfBinomial_fd_15;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_16> AgradCdfBinomial_fd_16;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_17> AgradCdfBinomial_fd_17;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_18> AgradCdfBinomial_fd_18;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_19> AgradCdfBinomial_fd_19;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_20> AgradCdfBinomial_fd_20;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_21> AgradCdfBinomial_fd_21;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_22> AgradCdfBinomial_fd_22;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_23> AgradCdfBinomial_fd_23;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_24> AgradCdfBinomial_fd_24;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_25> AgradCdfBinomial_fd_25;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_26> AgradCdfBinomial_fd_26;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_27> AgradCdfBinomial_fd_27;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_28> AgradCdfBinomial_fd_28;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_29> AgradCdfBinomial_fd_29;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_30> AgradCdfBinomial_fd_30;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_31> AgradCdfBinomial_fd_31;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_32> AgradCdfBinomial_fd_32;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_33> AgradCdfBinomial_fd_33;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_34> AgradCdfBinomial_fd_34;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_35> AgradCdfBinomial_fd_35;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_36> AgradCdfBinomial_fd_36;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_37> AgradCdfBinomial_fd_37;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_38> AgradCdfBinomial_fd_38;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_39> AgradCdfBinomial_fd_39;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_40> AgradCdfBinomial_fd_40;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_41> AgradCdfBinomial_fd_41;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_42> AgradCdfBinomial_fd_42;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_43> AgradCdfBinomial_fd_43;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_44> AgradCdfBinomial_fd_44;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_45> AgradCdfBinomial_fd_45;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_46> AgradCdfBinomial_fd_46;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_47> AgradCdfBinomial_fd_47;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_48> AgradCdfBinomial_fd_48;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_49> AgradCdfBinomial_fd_49;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_50> AgradCdfBinomial_fd_50;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_51> AgradCdfBinomial_fd_51;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_52> AgradCdfBinomial_fd_52;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_53> AgradCdfBinomial_fd_53;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_54> AgradCdfBinomial_fd_54;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_55> AgradCdfBinomial_fd_55;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_56> AgradCdfBinomial_fd_56;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_57> AgradCdfBinomial_fd_57;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_58> AgradCdfBinomial_fd_58;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_59> AgradCdfBinomial_fd_59;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_60> AgradCdfBinomial_fd_60;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_61> AgradCdfBinomial_fd_61;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_62> AgradCdfBinomial_fd_62;
typedef boost::mpl::vector<AgradCdfBinomial, type_fd_63> AgradCdfBinomial_fd_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_0, AgradCdfTestFixture, AgradCdfBinomial_fd_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_1, AgradCdfTestFixture, AgradCdfBinomial_fd_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_2, AgradCdfTestFixture, AgradCdfBinomial_fd_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_3, AgradCdfTestFixture, AgradCdfBinomial_fd_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_4, AgradCdfTestFixture, AgradCdfBinomial_fd_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_5, AgradCdfTestFixture, AgradCdfBinomial_fd_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_6, AgradCdfTestFixture, AgradCdfBinomial_fd_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_7, AgradCdfTestFixture, AgradCdfBinomial_fd_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_8, AgradCdfTestFixture, AgradCdfBinomial_fd_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_9, AgradCdfTestFixture, AgradCdfBinomial_fd_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_10, AgradCdfTestFixture, AgradCdfBinomial_fd_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_11, AgradCdfTestFixture, AgradCdfBinomial_fd_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_12, AgradCdfTestFixture, AgradCdfBinomial_fd_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_13, AgradCdfTestFixture, AgradCdfBinomial_fd_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_14, AgradCdfTestFixture, AgradCdfBinomial_fd_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_15, AgradCdfTestFixture, AgradCdfBinomial_fd_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_16, AgradCdfTestFixture, AgradCdfBinomial_fd_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_17, AgradCdfTestFixture, AgradCdfBinomial_fd_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_18, AgradCdfTestFixture, AgradCdfBinomial_fd_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_19, AgradCdfTestFixture, AgradCdfBinomial_fd_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_20, AgradCdfTestFixture, AgradCdfBinomial_fd_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_21, AgradCdfTestFixture, AgradCdfBinomial_fd_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_22, AgradCdfTestFixture, AgradCdfBinomial_fd_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_23, AgradCdfTestFixture, AgradCdfBinomial_fd_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_24, AgradCdfTestFixture, AgradCdfBinomial_fd_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_25, AgradCdfTestFixture, AgradCdfBinomial_fd_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_26, AgradCdfTestFixture, AgradCdfBinomial_fd_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_27, AgradCdfTestFixture, AgradCdfBinomial_fd_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_28, AgradCdfTestFixture, AgradCdfBinomial_fd_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_29, AgradCdfTestFixture, AgradCdfBinomial_fd_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_30, AgradCdfTestFixture, AgradCdfBinomial_fd_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_31, AgradCdfTestFixture, AgradCdfBinomial_fd_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_32, AgradCdfTestFixture, AgradCdfBinomial_fd_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_33, AgradCdfTestFixture, AgradCdfBinomial_fd_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_34, AgradCdfTestFixture, AgradCdfBinomial_fd_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_35, AgradCdfTestFixture, AgradCdfBinomial_fd_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_36, AgradCdfTestFixture, AgradCdfBinomial_fd_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_37, AgradCdfTestFixture, AgradCdfBinomial_fd_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_38, AgradCdfTestFixture, AgradCdfBinomial_fd_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_39, AgradCdfTestFixture, AgradCdfBinomial_fd_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_40, AgradCdfTestFixture, AgradCdfBinomial_fd_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_41, AgradCdfTestFixture, AgradCdfBinomial_fd_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_42, AgradCdfTestFixture, AgradCdfBinomial_fd_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_43, AgradCdfTestFixture, AgradCdfBinomial_fd_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_44, AgradCdfTestFixture, AgradCdfBinomial_fd_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_45, AgradCdfTestFixture, AgradCdfBinomial_fd_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_46, AgradCdfTestFixture, AgradCdfBinomial_fd_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_47, AgradCdfTestFixture, AgradCdfBinomial_fd_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_48, AgradCdfTestFixture, AgradCdfBinomial_fd_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_49, AgradCdfTestFixture, AgradCdfBinomial_fd_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_50, AgradCdfTestFixture, AgradCdfBinomial_fd_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_51, AgradCdfTestFixture, AgradCdfBinomial_fd_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_52, AgradCdfTestFixture, AgradCdfBinomial_fd_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_53, AgradCdfTestFixture, AgradCdfBinomial_fd_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_54, AgradCdfTestFixture, AgradCdfBinomial_fd_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_55, AgradCdfTestFixture, AgradCdfBinomial_fd_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_56, AgradCdfTestFixture, AgradCdfBinomial_fd_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_57, AgradCdfTestFixture, AgradCdfBinomial_fd_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_58, AgradCdfTestFixture, AgradCdfBinomial_fd_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_59, AgradCdfTestFixture, AgradCdfBinomial_fd_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_60, AgradCdfTestFixture, AgradCdfBinomial_fd_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_61, AgradCdfTestFixture, AgradCdfBinomial_fd_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_62, AgradCdfTestFixture, AgradCdfBinomial_fd_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBinomial_fd_63, AgradCdfTestFixture, AgradCdfBinomial_fd_63);

