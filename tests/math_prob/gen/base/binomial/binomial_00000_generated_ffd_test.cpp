#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <binomial/binomial_test.hpp>

typedef boost::mpl::vector<int, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_0;
typedef boost::mpl::vector<int, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_1;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_2;
typedef boost::mpl::vector<int, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_3;
typedef boost::mpl::vector<int, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_4;
typedef boost::mpl::vector<int, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_5;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_6;
typedef boost::mpl::vector<int, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_7;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_8;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_9;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_10;
typedef boost::mpl::vector<int, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_11;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_12;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_13;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_14;
typedef boost::mpl::vector<int, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_15;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_16;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_17;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_18;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_19;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_20;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_21;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_22;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_23;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_24;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_25;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_26;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_27;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_28;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_29;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_30;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_31;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_32;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_33;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_34;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_35;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_36;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_37;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_38;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_39;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_40;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_41;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_42;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_43;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_44;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_45;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_46;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_47;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, empty, empty, empty> type_ffd_48;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_49;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_50;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_51;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, empty, empty, empty> type_ffd_52;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_53;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_54;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_55;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_56;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_57;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_58;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_59;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_60;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_61;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_62;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_63;

typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_0> AgradDistributionsBinomial_ffd_0;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_1> AgradDistributionsBinomial_ffd_1;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_2> AgradDistributionsBinomial_ffd_2;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_3> AgradDistributionsBinomial_ffd_3;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_4> AgradDistributionsBinomial_ffd_4;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_5> AgradDistributionsBinomial_ffd_5;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_6> AgradDistributionsBinomial_ffd_6;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_7> AgradDistributionsBinomial_ffd_7;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_8> AgradDistributionsBinomial_ffd_8;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_9> AgradDistributionsBinomial_ffd_9;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_10> AgradDistributionsBinomial_ffd_10;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_11> AgradDistributionsBinomial_ffd_11;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_12> AgradDistributionsBinomial_ffd_12;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_13> AgradDistributionsBinomial_ffd_13;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_14> AgradDistributionsBinomial_ffd_14;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_15> AgradDistributionsBinomial_ffd_15;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_16> AgradDistributionsBinomial_ffd_16;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_17> AgradDistributionsBinomial_ffd_17;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_18> AgradDistributionsBinomial_ffd_18;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_19> AgradDistributionsBinomial_ffd_19;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_20> AgradDistributionsBinomial_ffd_20;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_21> AgradDistributionsBinomial_ffd_21;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_22> AgradDistributionsBinomial_ffd_22;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_23> AgradDistributionsBinomial_ffd_23;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_24> AgradDistributionsBinomial_ffd_24;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_25> AgradDistributionsBinomial_ffd_25;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_26> AgradDistributionsBinomial_ffd_26;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_27> AgradDistributionsBinomial_ffd_27;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_28> AgradDistributionsBinomial_ffd_28;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_29> AgradDistributionsBinomial_ffd_29;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_30> AgradDistributionsBinomial_ffd_30;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_31> AgradDistributionsBinomial_ffd_31;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_32> AgradDistributionsBinomial_ffd_32;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_33> AgradDistributionsBinomial_ffd_33;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_34> AgradDistributionsBinomial_ffd_34;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_35> AgradDistributionsBinomial_ffd_35;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_36> AgradDistributionsBinomial_ffd_36;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_37> AgradDistributionsBinomial_ffd_37;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_38> AgradDistributionsBinomial_ffd_38;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_39> AgradDistributionsBinomial_ffd_39;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_40> AgradDistributionsBinomial_ffd_40;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_41> AgradDistributionsBinomial_ffd_41;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_42> AgradDistributionsBinomial_ffd_42;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_43> AgradDistributionsBinomial_ffd_43;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_44> AgradDistributionsBinomial_ffd_44;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_45> AgradDistributionsBinomial_ffd_45;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_46> AgradDistributionsBinomial_ffd_46;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_47> AgradDistributionsBinomial_ffd_47;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_48> AgradDistributionsBinomial_ffd_48;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_49> AgradDistributionsBinomial_ffd_49;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_50> AgradDistributionsBinomial_ffd_50;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_51> AgradDistributionsBinomial_ffd_51;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_52> AgradDistributionsBinomial_ffd_52;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_53> AgradDistributionsBinomial_ffd_53;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_54> AgradDistributionsBinomial_ffd_54;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_55> AgradDistributionsBinomial_ffd_55;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_56> AgradDistributionsBinomial_ffd_56;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_57> AgradDistributionsBinomial_ffd_57;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_58> AgradDistributionsBinomial_ffd_58;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_59> AgradDistributionsBinomial_ffd_59;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_60> AgradDistributionsBinomial_ffd_60;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_61> AgradDistributionsBinomial_ffd_61;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_62> AgradDistributionsBinomial_ffd_62;
typedef boost::mpl::vector<AgradDistributionsBinomial, type_ffd_63> AgradDistributionsBinomial_ffd_63;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_0, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_1, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_2, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_3, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_4, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_5, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_6, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_7, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_8, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_9, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_10, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_11, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_12, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_13, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_14, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_15, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_16, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_17, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_18, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_19, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_20, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_21, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_22, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_23, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_24, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_25, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_26, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_27, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_28, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_29, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_30, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_31, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_32, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_33, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_34, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_35, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_36, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_37, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_38, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_39, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_40, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_41, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_42, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_43, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_44, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_45, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_46, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_47, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_48, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_49, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_50, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_51, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_52, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_53, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_54, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_55, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_56, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_57, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_58, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_59, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_60, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_61, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_62, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBinomial_ffd_63, AgradDistributionTestFixture, AgradDistributionsBinomial_ffd_63);

