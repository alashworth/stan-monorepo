#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, double, empty, empty> type_ffv_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<fvar<var> >, empty, empty> type_ffv_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, double, empty, empty> type_ffv_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<var> >, empty, empty> type_ffv_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, double, empty, empty> type_ffv_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_499;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty> type_ffv_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty> type_ffv_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<fvar<var> >, empty, empty> type_ffv_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, double, empty, empty> type_ffv_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_599;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_400> AgradCdfLogBetaBinomial_ffv_400;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_401> AgradCdfLogBetaBinomial_ffv_401;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_402> AgradCdfLogBetaBinomial_ffv_402;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_403> AgradCdfLogBetaBinomial_ffv_403;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_404> AgradCdfLogBetaBinomial_ffv_404;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_405> AgradCdfLogBetaBinomial_ffv_405;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_406> AgradCdfLogBetaBinomial_ffv_406;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_407> AgradCdfLogBetaBinomial_ffv_407;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_408> AgradCdfLogBetaBinomial_ffv_408;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_409> AgradCdfLogBetaBinomial_ffv_409;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_410> AgradCdfLogBetaBinomial_ffv_410;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_411> AgradCdfLogBetaBinomial_ffv_411;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_412> AgradCdfLogBetaBinomial_ffv_412;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_413> AgradCdfLogBetaBinomial_ffv_413;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_414> AgradCdfLogBetaBinomial_ffv_414;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_415> AgradCdfLogBetaBinomial_ffv_415;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_416> AgradCdfLogBetaBinomial_ffv_416;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_417> AgradCdfLogBetaBinomial_ffv_417;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_418> AgradCdfLogBetaBinomial_ffv_418;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_419> AgradCdfLogBetaBinomial_ffv_419;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_420> AgradCdfLogBetaBinomial_ffv_420;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_421> AgradCdfLogBetaBinomial_ffv_421;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_422> AgradCdfLogBetaBinomial_ffv_422;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_423> AgradCdfLogBetaBinomial_ffv_423;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_424> AgradCdfLogBetaBinomial_ffv_424;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_425> AgradCdfLogBetaBinomial_ffv_425;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_426> AgradCdfLogBetaBinomial_ffv_426;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_427> AgradCdfLogBetaBinomial_ffv_427;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_428> AgradCdfLogBetaBinomial_ffv_428;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_429> AgradCdfLogBetaBinomial_ffv_429;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_430> AgradCdfLogBetaBinomial_ffv_430;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_431> AgradCdfLogBetaBinomial_ffv_431;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_432> AgradCdfLogBetaBinomial_ffv_432;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_433> AgradCdfLogBetaBinomial_ffv_433;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_434> AgradCdfLogBetaBinomial_ffv_434;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_435> AgradCdfLogBetaBinomial_ffv_435;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_436> AgradCdfLogBetaBinomial_ffv_436;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_437> AgradCdfLogBetaBinomial_ffv_437;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_438> AgradCdfLogBetaBinomial_ffv_438;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_439> AgradCdfLogBetaBinomial_ffv_439;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_440> AgradCdfLogBetaBinomial_ffv_440;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_441> AgradCdfLogBetaBinomial_ffv_441;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_442> AgradCdfLogBetaBinomial_ffv_442;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_443> AgradCdfLogBetaBinomial_ffv_443;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_444> AgradCdfLogBetaBinomial_ffv_444;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_445> AgradCdfLogBetaBinomial_ffv_445;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_446> AgradCdfLogBetaBinomial_ffv_446;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_447> AgradCdfLogBetaBinomial_ffv_447;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_448> AgradCdfLogBetaBinomial_ffv_448;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_449> AgradCdfLogBetaBinomial_ffv_449;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_450> AgradCdfLogBetaBinomial_ffv_450;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_451> AgradCdfLogBetaBinomial_ffv_451;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_452> AgradCdfLogBetaBinomial_ffv_452;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_453> AgradCdfLogBetaBinomial_ffv_453;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_454> AgradCdfLogBetaBinomial_ffv_454;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_455> AgradCdfLogBetaBinomial_ffv_455;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_456> AgradCdfLogBetaBinomial_ffv_456;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_457> AgradCdfLogBetaBinomial_ffv_457;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_458> AgradCdfLogBetaBinomial_ffv_458;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_459> AgradCdfLogBetaBinomial_ffv_459;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_460> AgradCdfLogBetaBinomial_ffv_460;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_461> AgradCdfLogBetaBinomial_ffv_461;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_462> AgradCdfLogBetaBinomial_ffv_462;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_463> AgradCdfLogBetaBinomial_ffv_463;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_464> AgradCdfLogBetaBinomial_ffv_464;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_465> AgradCdfLogBetaBinomial_ffv_465;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_466> AgradCdfLogBetaBinomial_ffv_466;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_467> AgradCdfLogBetaBinomial_ffv_467;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_468> AgradCdfLogBetaBinomial_ffv_468;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_469> AgradCdfLogBetaBinomial_ffv_469;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_470> AgradCdfLogBetaBinomial_ffv_470;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_471> AgradCdfLogBetaBinomial_ffv_471;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_472> AgradCdfLogBetaBinomial_ffv_472;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_473> AgradCdfLogBetaBinomial_ffv_473;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_474> AgradCdfLogBetaBinomial_ffv_474;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_475> AgradCdfLogBetaBinomial_ffv_475;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_476> AgradCdfLogBetaBinomial_ffv_476;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_477> AgradCdfLogBetaBinomial_ffv_477;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_478> AgradCdfLogBetaBinomial_ffv_478;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_479> AgradCdfLogBetaBinomial_ffv_479;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_480> AgradCdfLogBetaBinomial_ffv_480;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_481> AgradCdfLogBetaBinomial_ffv_481;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_482> AgradCdfLogBetaBinomial_ffv_482;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_483> AgradCdfLogBetaBinomial_ffv_483;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_484> AgradCdfLogBetaBinomial_ffv_484;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_485> AgradCdfLogBetaBinomial_ffv_485;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_486> AgradCdfLogBetaBinomial_ffv_486;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_487> AgradCdfLogBetaBinomial_ffv_487;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_488> AgradCdfLogBetaBinomial_ffv_488;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_489> AgradCdfLogBetaBinomial_ffv_489;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_490> AgradCdfLogBetaBinomial_ffv_490;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_491> AgradCdfLogBetaBinomial_ffv_491;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_492> AgradCdfLogBetaBinomial_ffv_492;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_493> AgradCdfLogBetaBinomial_ffv_493;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_494> AgradCdfLogBetaBinomial_ffv_494;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_495> AgradCdfLogBetaBinomial_ffv_495;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_496> AgradCdfLogBetaBinomial_ffv_496;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_497> AgradCdfLogBetaBinomial_ffv_497;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_498> AgradCdfLogBetaBinomial_ffv_498;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_499> AgradCdfLogBetaBinomial_ffv_499;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_500> AgradCdfLogBetaBinomial_ffv_500;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_501> AgradCdfLogBetaBinomial_ffv_501;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_502> AgradCdfLogBetaBinomial_ffv_502;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_503> AgradCdfLogBetaBinomial_ffv_503;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_504> AgradCdfLogBetaBinomial_ffv_504;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_505> AgradCdfLogBetaBinomial_ffv_505;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_506> AgradCdfLogBetaBinomial_ffv_506;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_507> AgradCdfLogBetaBinomial_ffv_507;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_508> AgradCdfLogBetaBinomial_ffv_508;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_509> AgradCdfLogBetaBinomial_ffv_509;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_510> AgradCdfLogBetaBinomial_ffv_510;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_511> AgradCdfLogBetaBinomial_ffv_511;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_512> AgradCdfLogBetaBinomial_ffv_512;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_513> AgradCdfLogBetaBinomial_ffv_513;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_514> AgradCdfLogBetaBinomial_ffv_514;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_515> AgradCdfLogBetaBinomial_ffv_515;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_516> AgradCdfLogBetaBinomial_ffv_516;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_517> AgradCdfLogBetaBinomial_ffv_517;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_518> AgradCdfLogBetaBinomial_ffv_518;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_519> AgradCdfLogBetaBinomial_ffv_519;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_520> AgradCdfLogBetaBinomial_ffv_520;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_521> AgradCdfLogBetaBinomial_ffv_521;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_522> AgradCdfLogBetaBinomial_ffv_522;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_523> AgradCdfLogBetaBinomial_ffv_523;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_524> AgradCdfLogBetaBinomial_ffv_524;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_525> AgradCdfLogBetaBinomial_ffv_525;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_526> AgradCdfLogBetaBinomial_ffv_526;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_527> AgradCdfLogBetaBinomial_ffv_527;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_528> AgradCdfLogBetaBinomial_ffv_528;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_529> AgradCdfLogBetaBinomial_ffv_529;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_530> AgradCdfLogBetaBinomial_ffv_530;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_531> AgradCdfLogBetaBinomial_ffv_531;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_532> AgradCdfLogBetaBinomial_ffv_532;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_533> AgradCdfLogBetaBinomial_ffv_533;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_534> AgradCdfLogBetaBinomial_ffv_534;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_535> AgradCdfLogBetaBinomial_ffv_535;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_536> AgradCdfLogBetaBinomial_ffv_536;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_537> AgradCdfLogBetaBinomial_ffv_537;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_538> AgradCdfLogBetaBinomial_ffv_538;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_539> AgradCdfLogBetaBinomial_ffv_539;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_540> AgradCdfLogBetaBinomial_ffv_540;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_541> AgradCdfLogBetaBinomial_ffv_541;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_542> AgradCdfLogBetaBinomial_ffv_542;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_543> AgradCdfLogBetaBinomial_ffv_543;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_544> AgradCdfLogBetaBinomial_ffv_544;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_545> AgradCdfLogBetaBinomial_ffv_545;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_546> AgradCdfLogBetaBinomial_ffv_546;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_547> AgradCdfLogBetaBinomial_ffv_547;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_548> AgradCdfLogBetaBinomial_ffv_548;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_549> AgradCdfLogBetaBinomial_ffv_549;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_550> AgradCdfLogBetaBinomial_ffv_550;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_551> AgradCdfLogBetaBinomial_ffv_551;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_552> AgradCdfLogBetaBinomial_ffv_552;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_553> AgradCdfLogBetaBinomial_ffv_553;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_554> AgradCdfLogBetaBinomial_ffv_554;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_555> AgradCdfLogBetaBinomial_ffv_555;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_556> AgradCdfLogBetaBinomial_ffv_556;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_557> AgradCdfLogBetaBinomial_ffv_557;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_558> AgradCdfLogBetaBinomial_ffv_558;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_559> AgradCdfLogBetaBinomial_ffv_559;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_560> AgradCdfLogBetaBinomial_ffv_560;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_561> AgradCdfLogBetaBinomial_ffv_561;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_562> AgradCdfLogBetaBinomial_ffv_562;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_563> AgradCdfLogBetaBinomial_ffv_563;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_564> AgradCdfLogBetaBinomial_ffv_564;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_565> AgradCdfLogBetaBinomial_ffv_565;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_566> AgradCdfLogBetaBinomial_ffv_566;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_567> AgradCdfLogBetaBinomial_ffv_567;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_568> AgradCdfLogBetaBinomial_ffv_568;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_569> AgradCdfLogBetaBinomial_ffv_569;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_570> AgradCdfLogBetaBinomial_ffv_570;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_571> AgradCdfLogBetaBinomial_ffv_571;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_572> AgradCdfLogBetaBinomial_ffv_572;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_573> AgradCdfLogBetaBinomial_ffv_573;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_574> AgradCdfLogBetaBinomial_ffv_574;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_575> AgradCdfLogBetaBinomial_ffv_575;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_576> AgradCdfLogBetaBinomial_ffv_576;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_577> AgradCdfLogBetaBinomial_ffv_577;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_578> AgradCdfLogBetaBinomial_ffv_578;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_579> AgradCdfLogBetaBinomial_ffv_579;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_580> AgradCdfLogBetaBinomial_ffv_580;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_581> AgradCdfLogBetaBinomial_ffv_581;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_582> AgradCdfLogBetaBinomial_ffv_582;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_583> AgradCdfLogBetaBinomial_ffv_583;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_584> AgradCdfLogBetaBinomial_ffv_584;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_585> AgradCdfLogBetaBinomial_ffv_585;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_586> AgradCdfLogBetaBinomial_ffv_586;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_587> AgradCdfLogBetaBinomial_ffv_587;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_588> AgradCdfLogBetaBinomial_ffv_588;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_589> AgradCdfLogBetaBinomial_ffv_589;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_590> AgradCdfLogBetaBinomial_ffv_590;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_591> AgradCdfLogBetaBinomial_ffv_591;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_592> AgradCdfLogBetaBinomial_ffv_592;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_593> AgradCdfLogBetaBinomial_ffv_593;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_594> AgradCdfLogBetaBinomial_ffv_594;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_595> AgradCdfLogBetaBinomial_ffv_595;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_596> AgradCdfLogBetaBinomial_ffv_596;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_597> AgradCdfLogBetaBinomial_ffv_597;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_598> AgradCdfLogBetaBinomial_ffv_598;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_599> AgradCdfLogBetaBinomial_ffv_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_400, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_401, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_402, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_403, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_404, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_405, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_406, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_407, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_408, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_409, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_410, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_411, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_412, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_413, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_414, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_415, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_416, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_417, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_418, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_419, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_420, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_421, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_422, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_423, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_424, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_425, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_426, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_427, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_428, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_429, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_430, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_431, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_432, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_433, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_434, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_435, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_436, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_437, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_438, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_439, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_440, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_441, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_442, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_443, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_444, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_445, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_446, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_447, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_448, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_449, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_450, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_451, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_452, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_453, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_454, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_455, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_456, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_457, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_458, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_459, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_460, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_461, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_462, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_463, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_464, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_465, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_466, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_467, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_468, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_469, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_470, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_471, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_472, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_473, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_474, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_475, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_476, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_477, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_478, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_479, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_480, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_481, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_482, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_483, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_484, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_485, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_486, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_487, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_488, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_489, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_490, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_491, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_492, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_493, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_494, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_495, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_496, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_497, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_498, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_499, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_499);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_500, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_501, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_502, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_503, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_504, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_505, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_506, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_507, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_508, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_509, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_510, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_511, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_512, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_513, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_514, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_515, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_516, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_517, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_518, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_519, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_520, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_521, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_522, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_523, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_524, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_525, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_526, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_527, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_528, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_529, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_530, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_531, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_532, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_533, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_534, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_535, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_536, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_537, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_538, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_539, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_540, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_541, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_542, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_543, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_544, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_545, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_546, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_547, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_548, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_549, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_550, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_551, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_552, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_553, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_554, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_555, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_556, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_557, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_558, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_559, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_560, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_561, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_562, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_563, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_564, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_565, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_566, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_567, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_568, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_569, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_570, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_571, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_572, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_573, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_574, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_575, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_576, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_577, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_578, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_579, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_580, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_581, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_582, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_583, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_584, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_585, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_586, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_587, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_588, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_589, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_590, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_591, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_592, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_593, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_594, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_595, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_596, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_597, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_598, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_599, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_599);

