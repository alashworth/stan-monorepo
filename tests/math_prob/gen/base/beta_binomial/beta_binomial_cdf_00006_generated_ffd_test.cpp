#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_699;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_600> AgradCdfBetaBinomial_ffd_600;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_601> AgradCdfBetaBinomial_ffd_601;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_602> AgradCdfBetaBinomial_ffd_602;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_603> AgradCdfBetaBinomial_ffd_603;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_604> AgradCdfBetaBinomial_ffd_604;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_605> AgradCdfBetaBinomial_ffd_605;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_606> AgradCdfBetaBinomial_ffd_606;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_607> AgradCdfBetaBinomial_ffd_607;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_608> AgradCdfBetaBinomial_ffd_608;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_609> AgradCdfBetaBinomial_ffd_609;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_610> AgradCdfBetaBinomial_ffd_610;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_611> AgradCdfBetaBinomial_ffd_611;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_612> AgradCdfBetaBinomial_ffd_612;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_613> AgradCdfBetaBinomial_ffd_613;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_614> AgradCdfBetaBinomial_ffd_614;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_615> AgradCdfBetaBinomial_ffd_615;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_616> AgradCdfBetaBinomial_ffd_616;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_617> AgradCdfBetaBinomial_ffd_617;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_618> AgradCdfBetaBinomial_ffd_618;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_619> AgradCdfBetaBinomial_ffd_619;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_620> AgradCdfBetaBinomial_ffd_620;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_621> AgradCdfBetaBinomial_ffd_621;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_622> AgradCdfBetaBinomial_ffd_622;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_623> AgradCdfBetaBinomial_ffd_623;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_624> AgradCdfBetaBinomial_ffd_624;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_625> AgradCdfBetaBinomial_ffd_625;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_626> AgradCdfBetaBinomial_ffd_626;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_627> AgradCdfBetaBinomial_ffd_627;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_628> AgradCdfBetaBinomial_ffd_628;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_629> AgradCdfBetaBinomial_ffd_629;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_630> AgradCdfBetaBinomial_ffd_630;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_631> AgradCdfBetaBinomial_ffd_631;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_632> AgradCdfBetaBinomial_ffd_632;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_633> AgradCdfBetaBinomial_ffd_633;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_634> AgradCdfBetaBinomial_ffd_634;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_635> AgradCdfBetaBinomial_ffd_635;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_636> AgradCdfBetaBinomial_ffd_636;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_637> AgradCdfBetaBinomial_ffd_637;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_638> AgradCdfBetaBinomial_ffd_638;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_639> AgradCdfBetaBinomial_ffd_639;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_640> AgradCdfBetaBinomial_ffd_640;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_641> AgradCdfBetaBinomial_ffd_641;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_642> AgradCdfBetaBinomial_ffd_642;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_643> AgradCdfBetaBinomial_ffd_643;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_644> AgradCdfBetaBinomial_ffd_644;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_645> AgradCdfBetaBinomial_ffd_645;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_646> AgradCdfBetaBinomial_ffd_646;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_647> AgradCdfBetaBinomial_ffd_647;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_648> AgradCdfBetaBinomial_ffd_648;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_649> AgradCdfBetaBinomial_ffd_649;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_650> AgradCdfBetaBinomial_ffd_650;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_651> AgradCdfBetaBinomial_ffd_651;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_652> AgradCdfBetaBinomial_ffd_652;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_653> AgradCdfBetaBinomial_ffd_653;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_654> AgradCdfBetaBinomial_ffd_654;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_655> AgradCdfBetaBinomial_ffd_655;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_656> AgradCdfBetaBinomial_ffd_656;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_657> AgradCdfBetaBinomial_ffd_657;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_658> AgradCdfBetaBinomial_ffd_658;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_659> AgradCdfBetaBinomial_ffd_659;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_660> AgradCdfBetaBinomial_ffd_660;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_661> AgradCdfBetaBinomial_ffd_661;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_662> AgradCdfBetaBinomial_ffd_662;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_663> AgradCdfBetaBinomial_ffd_663;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_664> AgradCdfBetaBinomial_ffd_664;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_665> AgradCdfBetaBinomial_ffd_665;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_666> AgradCdfBetaBinomial_ffd_666;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_667> AgradCdfBetaBinomial_ffd_667;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_668> AgradCdfBetaBinomial_ffd_668;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_669> AgradCdfBetaBinomial_ffd_669;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_670> AgradCdfBetaBinomial_ffd_670;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_671> AgradCdfBetaBinomial_ffd_671;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_672> AgradCdfBetaBinomial_ffd_672;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_673> AgradCdfBetaBinomial_ffd_673;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_674> AgradCdfBetaBinomial_ffd_674;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_675> AgradCdfBetaBinomial_ffd_675;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_676> AgradCdfBetaBinomial_ffd_676;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_677> AgradCdfBetaBinomial_ffd_677;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_678> AgradCdfBetaBinomial_ffd_678;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_679> AgradCdfBetaBinomial_ffd_679;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_680> AgradCdfBetaBinomial_ffd_680;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_681> AgradCdfBetaBinomial_ffd_681;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_682> AgradCdfBetaBinomial_ffd_682;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_683> AgradCdfBetaBinomial_ffd_683;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_684> AgradCdfBetaBinomial_ffd_684;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_685> AgradCdfBetaBinomial_ffd_685;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_686> AgradCdfBetaBinomial_ffd_686;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_687> AgradCdfBetaBinomial_ffd_687;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_688> AgradCdfBetaBinomial_ffd_688;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_689> AgradCdfBetaBinomial_ffd_689;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_690> AgradCdfBetaBinomial_ffd_690;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_691> AgradCdfBetaBinomial_ffd_691;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_692> AgradCdfBetaBinomial_ffd_692;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_693> AgradCdfBetaBinomial_ffd_693;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_694> AgradCdfBetaBinomial_ffd_694;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_695> AgradCdfBetaBinomial_ffd_695;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_696> AgradCdfBetaBinomial_ffd_696;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_697> AgradCdfBetaBinomial_ffd_697;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_698> AgradCdfBetaBinomial_ffd_698;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_699> AgradCdfBetaBinomial_ffd_699;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_600, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_601, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_602, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_603, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_604, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_605, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_606, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_607, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_608, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_609, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_610, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_611, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_612, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_613, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_614, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_615, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_616, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_617, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_618, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_619, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_620, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_621, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_622, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_623, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_624, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_625, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_626, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_627, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_628, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_629, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_630, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_631, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_632, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_633, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_634, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_635, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_636, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_637, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_638, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_639, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_640, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_641, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_642, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_643, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_644, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_645, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_646, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_647, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_648, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_649, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_650, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_651, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_652, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_653, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_654, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_655, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_656, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_657, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_658, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_659, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_660, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_661, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_662, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_663, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_664, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_665, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_666, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_667, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_668, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_669, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_670, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_671, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_672, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_673, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_674, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_675, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_676, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_677, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_678, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_679, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_680, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_681, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_682, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_683, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_684, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_685, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_686, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_687, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_688, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_689, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_690, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_691, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_692, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_693, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_694, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_695, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_696, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_697, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_698, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_699, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_699);

