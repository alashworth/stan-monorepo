#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_699;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_767;

typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_600> AgradDistributionsBetaBinomial_ffd_600;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_601> AgradDistributionsBetaBinomial_ffd_601;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_602> AgradDistributionsBetaBinomial_ffd_602;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_603> AgradDistributionsBetaBinomial_ffd_603;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_604> AgradDistributionsBetaBinomial_ffd_604;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_605> AgradDistributionsBetaBinomial_ffd_605;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_606> AgradDistributionsBetaBinomial_ffd_606;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_607> AgradDistributionsBetaBinomial_ffd_607;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_608> AgradDistributionsBetaBinomial_ffd_608;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_609> AgradDistributionsBetaBinomial_ffd_609;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_610> AgradDistributionsBetaBinomial_ffd_610;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_611> AgradDistributionsBetaBinomial_ffd_611;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_612> AgradDistributionsBetaBinomial_ffd_612;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_613> AgradDistributionsBetaBinomial_ffd_613;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_614> AgradDistributionsBetaBinomial_ffd_614;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_615> AgradDistributionsBetaBinomial_ffd_615;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_616> AgradDistributionsBetaBinomial_ffd_616;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_617> AgradDistributionsBetaBinomial_ffd_617;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_618> AgradDistributionsBetaBinomial_ffd_618;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_619> AgradDistributionsBetaBinomial_ffd_619;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_620> AgradDistributionsBetaBinomial_ffd_620;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_621> AgradDistributionsBetaBinomial_ffd_621;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_622> AgradDistributionsBetaBinomial_ffd_622;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_623> AgradDistributionsBetaBinomial_ffd_623;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_624> AgradDistributionsBetaBinomial_ffd_624;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_625> AgradDistributionsBetaBinomial_ffd_625;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_626> AgradDistributionsBetaBinomial_ffd_626;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_627> AgradDistributionsBetaBinomial_ffd_627;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_628> AgradDistributionsBetaBinomial_ffd_628;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_629> AgradDistributionsBetaBinomial_ffd_629;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_630> AgradDistributionsBetaBinomial_ffd_630;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_631> AgradDistributionsBetaBinomial_ffd_631;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_632> AgradDistributionsBetaBinomial_ffd_632;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_633> AgradDistributionsBetaBinomial_ffd_633;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_634> AgradDistributionsBetaBinomial_ffd_634;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_635> AgradDistributionsBetaBinomial_ffd_635;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_636> AgradDistributionsBetaBinomial_ffd_636;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_637> AgradDistributionsBetaBinomial_ffd_637;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_638> AgradDistributionsBetaBinomial_ffd_638;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_639> AgradDistributionsBetaBinomial_ffd_639;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_640> AgradDistributionsBetaBinomial_ffd_640;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_641> AgradDistributionsBetaBinomial_ffd_641;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_642> AgradDistributionsBetaBinomial_ffd_642;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_643> AgradDistributionsBetaBinomial_ffd_643;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_644> AgradDistributionsBetaBinomial_ffd_644;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_645> AgradDistributionsBetaBinomial_ffd_645;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_646> AgradDistributionsBetaBinomial_ffd_646;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_647> AgradDistributionsBetaBinomial_ffd_647;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_648> AgradDistributionsBetaBinomial_ffd_648;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_649> AgradDistributionsBetaBinomial_ffd_649;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_650> AgradDistributionsBetaBinomial_ffd_650;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_651> AgradDistributionsBetaBinomial_ffd_651;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_652> AgradDistributionsBetaBinomial_ffd_652;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_653> AgradDistributionsBetaBinomial_ffd_653;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_654> AgradDistributionsBetaBinomial_ffd_654;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_655> AgradDistributionsBetaBinomial_ffd_655;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_656> AgradDistributionsBetaBinomial_ffd_656;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_657> AgradDistributionsBetaBinomial_ffd_657;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_658> AgradDistributionsBetaBinomial_ffd_658;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_659> AgradDistributionsBetaBinomial_ffd_659;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_660> AgradDistributionsBetaBinomial_ffd_660;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_661> AgradDistributionsBetaBinomial_ffd_661;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_662> AgradDistributionsBetaBinomial_ffd_662;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_663> AgradDistributionsBetaBinomial_ffd_663;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_664> AgradDistributionsBetaBinomial_ffd_664;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_665> AgradDistributionsBetaBinomial_ffd_665;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_666> AgradDistributionsBetaBinomial_ffd_666;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_667> AgradDistributionsBetaBinomial_ffd_667;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_668> AgradDistributionsBetaBinomial_ffd_668;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_669> AgradDistributionsBetaBinomial_ffd_669;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_670> AgradDistributionsBetaBinomial_ffd_670;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_671> AgradDistributionsBetaBinomial_ffd_671;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_672> AgradDistributionsBetaBinomial_ffd_672;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_673> AgradDistributionsBetaBinomial_ffd_673;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_674> AgradDistributionsBetaBinomial_ffd_674;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_675> AgradDistributionsBetaBinomial_ffd_675;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_676> AgradDistributionsBetaBinomial_ffd_676;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_677> AgradDistributionsBetaBinomial_ffd_677;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_678> AgradDistributionsBetaBinomial_ffd_678;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_679> AgradDistributionsBetaBinomial_ffd_679;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_680> AgradDistributionsBetaBinomial_ffd_680;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_681> AgradDistributionsBetaBinomial_ffd_681;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_682> AgradDistributionsBetaBinomial_ffd_682;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_683> AgradDistributionsBetaBinomial_ffd_683;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_684> AgradDistributionsBetaBinomial_ffd_684;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_685> AgradDistributionsBetaBinomial_ffd_685;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_686> AgradDistributionsBetaBinomial_ffd_686;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_687> AgradDistributionsBetaBinomial_ffd_687;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_688> AgradDistributionsBetaBinomial_ffd_688;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_689> AgradDistributionsBetaBinomial_ffd_689;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_690> AgradDistributionsBetaBinomial_ffd_690;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_691> AgradDistributionsBetaBinomial_ffd_691;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_692> AgradDistributionsBetaBinomial_ffd_692;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_693> AgradDistributionsBetaBinomial_ffd_693;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_694> AgradDistributionsBetaBinomial_ffd_694;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_695> AgradDistributionsBetaBinomial_ffd_695;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_696> AgradDistributionsBetaBinomial_ffd_696;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_697> AgradDistributionsBetaBinomial_ffd_697;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_698> AgradDistributionsBetaBinomial_ffd_698;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_699> AgradDistributionsBetaBinomial_ffd_699;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_700> AgradDistributionsBetaBinomial_ffd_700;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_701> AgradDistributionsBetaBinomial_ffd_701;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_702> AgradDistributionsBetaBinomial_ffd_702;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_703> AgradDistributionsBetaBinomial_ffd_703;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_704> AgradDistributionsBetaBinomial_ffd_704;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_705> AgradDistributionsBetaBinomial_ffd_705;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_706> AgradDistributionsBetaBinomial_ffd_706;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_707> AgradDistributionsBetaBinomial_ffd_707;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_708> AgradDistributionsBetaBinomial_ffd_708;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_709> AgradDistributionsBetaBinomial_ffd_709;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_710> AgradDistributionsBetaBinomial_ffd_710;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_711> AgradDistributionsBetaBinomial_ffd_711;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_712> AgradDistributionsBetaBinomial_ffd_712;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_713> AgradDistributionsBetaBinomial_ffd_713;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_714> AgradDistributionsBetaBinomial_ffd_714;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_715> AgradDistributionsBetaBinomial_ffd_715;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_716> AgradDistributionsBetaBinomial_ffd_716;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_717> AgradDistributionsBetaBinomial_ffd_717;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_718> AgradDistributionsBetaBinomial_ffd_718;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_719> AgradDistributionsBetaBinomial_ffd_719;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_720> AgradDistributionsBetaBinomial_ffd_720;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_721> AgradDistributionsBetaBinomial_ffd_721;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_722> AgradDistributionsBetaBinomial_ffd_722;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_723> AgradDistributionsBetaBinomial_ffd_723;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_724> AgradDistributionsBetaBinomial_ffd_724;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_725> AgradDistributionsBetaBinomial_ffd_725;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_726> AgradDistributionsBetaBinomial_ffd_726;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_727> AgradDistributionsBetaBinomial_ffd_727;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_728> AgradDistributionsBetaBinomial_ffd_728;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_729> AgradDistributionsBetaBinomial_ffd_729;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_730> AgradDistributionsBetaBinomial_ffd_730;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_731> AgradDistributionsBetaBinomial_ffd_731;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_732> AgradDistributionsBetaBinomial_ffd_732;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_733> AgradDistributionsBetaBinomial_ffd_733;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_734> AgradDistributionsBetaBinomial_ffd_734;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_735> AgradDistributionsBetaBinomial_ffd_735;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_736> AgradDistributionsBetaBinomial_ffd_736;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_737> AgradDistributionsBetaBinomial_ffd_737;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_738> AgradDistributionsBetaBinomial_ffd_738;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_739> AgradDistributionsBetaBinomial_ffd_739;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_740> AgradDistributionsBetaBinomial_ffd_740;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_741> AgradDistributionsBetaBinomial_ffd_741;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_742> AgradDistributionsBetaBinomial_ffd_742;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_743> AgradDistributionsBetaBinomial_ffd_743;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_744> AgradDistributionsBetaBinomial_ffd_744;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_745> AgradDistributionsBetaBinomial_ffd_745;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_746> AgradDistributionsBetaBinomial_ffd_746;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_747> AgradDistributionsBetaBinomial_ffd_747;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_748> AgradDistributionsBetaBinomial_ffd_748;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_749> AgradDistributionsBetaBinomial_ffd_749;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_750> AgradDistributionsBetaBinomial_ffd_750;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_751> AgradDistributionsBetaBinomial_ffd_751;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_752> AgradDistributionsBetaBinomial_ffd_752;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_753> AgradDistributionsBetaBinomial_ffd_753;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_754> AgradDistributionsBetaBinomial_ffd_754;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_755> AgradDistributionsBetaBinomial_ffd_755;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_756> AgradDistributionsBetaBinomial_ffd_756;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_757> AgradDistributionsBetaBinomial_ffd_757;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_758> AgradDistributionsBetaBinomial_ffd_758;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_759> AgradDistributionsBetaBinomial_ffd_759;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_760> AgradDistributionsBetaBinomial_ffd_760;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_761> AgradDistributionsBetaBinomial_ffd_761;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_762> AgradDistributionsBetaBinomial_ffd_762;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_763> AgradDistributionsBetaBinomial_ffd_763;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_764> AgradDistributionsBetaBinomial_ffd_764;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_765> AgradDistributionsBetaBinomial_ffd_765;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_766> AgradDistributionsBetaBinomial_ffd_766;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_767> AgradDistributionsBetaBinomial_ffd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_600, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_601, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_602, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_603, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_604, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_605, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_606, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_607, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_608, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_609, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_610, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_611, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_612, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_613, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_614, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_615, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_616, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_617, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_618, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_619, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_620, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_621, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_622, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_623, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_624, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_625, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_626, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_627, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_628, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_629, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_630, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_631, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_632, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_633, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_634, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_635, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_636, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_637, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_638, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_639, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_640, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_641, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_642, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_643, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_644, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_645, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_646, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_647, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_648, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_649, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_650, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_651, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_652, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_653, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_654, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_655, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_656, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_657, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_658, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_659, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_660, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_661, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_662, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_663, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_664, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_665, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_666, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_667, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_668, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_669, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_670, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_671, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_672, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_673, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_674, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_675, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_676, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_677, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_678, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_679, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_680, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_681, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_682, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_683, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_684, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_685, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_686, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_687, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_688, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_689, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_690, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_691, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_692, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_693, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_694, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_695, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_696, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_697, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_698, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_699, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_699);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_700, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_701, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_702, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_703, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_704, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_705, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_706, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_707, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_708, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_709, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_710, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_711, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_712, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_713, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_714, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_715, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_716, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_717, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_718, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_719, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_720, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_721, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_722, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_723, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_724, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_725, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_726, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_727, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_728, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_729, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_730, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_731, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_732, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_733, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_734, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_735, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_736, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_737, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_738, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_739, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_740, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_741, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_742, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_743, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_744, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_745, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_746, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_747, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_748, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_749, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_750, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_751, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_752, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_753, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_754, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_755, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_756, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_757, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_758, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_759, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_760, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_761, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_762, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_763, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_764, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_765, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_766, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_767, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_767);

