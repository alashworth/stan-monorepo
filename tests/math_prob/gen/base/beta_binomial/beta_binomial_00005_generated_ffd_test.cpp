#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<fvar<double> >, empty, empty> type_ffd_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_599;

typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_500> AgradDistributionsBetaBinomial_ffd_500;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_501> AgradDistributionsBetaBinomial_ffd_501;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_502> AgradDistributionsBetaBinomial_ffd_502;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_503> AgradDistributionsBetaBinomial_ffd_503;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_504> AgradDistributionsBetaBinomial_ffd_504;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_505> AgradDistributionsBetaBinomial_ffd_505;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_506> AgradDistributionsBetaBinomial_ffd_506;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_507> AgradDistributionsBetaBinomial_ffd_507;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_508> AgradDistributionsBetaBinomial_ffd_508;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_509> AgradDistributionsBetaBinomial_ffd_509;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_510> AgradDistributionsBetaBinomial_ffd_510;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_511> AgradDistributionsBetaBinomial_ffd_511;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_512> AgradDistributionsBetaBinomial_ffd_512;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_513> AgradDistributionsBetaBinomial_ffd_513;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_514> AgradDistributionsBetaBinomial_ffd_514;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_515> AgradDistributionsBetaBinomial_ffd_515;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_516> AgradDistributionsBetaBinomial_ffd_516;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_517> AgradDistributionsBetaBinomial_ffd_517;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_518> AgradDistributionsBetaBinomial_ffd_518;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_519> AgradDistributionsBetaBinomial_ffd_519;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_520> AgradDistributionsBetaBinomial_ffd_520;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_521> AgradDistributionsBetaBinomial_ffd_521;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_522> AgradDistributionsBetaBinomial_ffd_522;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_523> AgradDistributionsBetaBinomial_ffd_523;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_524> AgradDistributionsBetaBinomial_ffd_524;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_525> AgradDistributionsBetaBinomial_ffd_525;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_526> AgradDistributionsBetaBinomial_ffd_526;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_527> AgradDistributionsBetaBinomial_ffd_527;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_528> AgradDistributionsBetaBinomial_ffd_528;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_529> AgradDistributionsBetaBinomial_ffd_529;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_530> AgradDistributionsBetaBinomial_ffd_530;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_531> AgradDistributionsBetaBinomial_ffd_531;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_532> AgradDistributionsBetaBinomial_ffd_532;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_533> AgradDistributionsBetaBinomial_ffd_533;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_534> AgradDistributionsBetaBinomial_ffd_534;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_535> AgradDistributionsBetaBinomial_ffd_535;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_536> AgradDistributionsBetaBinomial_ffd_536;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_537> AgradDistributionsBetaBinomial_ffd_537;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_538> AgradDistributionsBetaBinomial_ffd_538;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_539> AgradDistributionsBetaBinomial_ffd_539;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_540> AgradDistributionsBetaBinomial_ffd_540;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_541> AgradDistributionsBetaBinomial_ffd_541;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_542> AgradDistributionsBetaBinomial_ffd_542;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_543> AgradDistributionsBetaBinomial_ffd_543;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_544> AgradDistributionsBetaBinomial_ffd_544;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_545> AgradDistributionsBetaBinomial_ffd_545;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_546> AgradDistributionsBetaBinomial_ffd_546;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_547> AgradDistributionsBetaBinomial_ffd_547;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_548> AgradDistributionsBetaBinomial_ffd_548;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_549> AgradDistributionsBetaBinomial_ffd_549;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_550> AgradDistributionsBetaBinomial_ffd_550;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_551> AgradDistributionsBetaBinomial_ffd_551;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_552> AgradDistributionsBetaBinomial_ffd_552;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_553> AgradDistributionsBetaBinomial_ffd_553;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_554> AgradDistributionsBetaBinomial_ffd_554;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_555> AgradDistributionsBetaBinomial_ffd_555;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_556> AgradDistributionsBetaBinomial_ffd_556;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_557> AgradDistributionsBetaBinomial_ffd_557;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_558> AgradDistributionsBetaBinomial_ffd_558;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_559> AgradDistributionsBetaBinomial_ffd_559;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_560> AgradDistributionsBetaBinomial_ffd_560;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_561> AgradDistributionsBetaBinomial_ffd_561;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_562> AgradDistributionsBetaBinomial_ffd_562;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_563> AgradDistributionsBetaBinomial_ffd_563;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_564> AgradDistributionsBetaBinomial_ffd_564;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_565> AgradDistributionsBetaBinomial_ffd_565;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_566> AgradDistributionsBetaBinomial_ffd_566;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_567> AgradDistributionsBetaBinomial_ffd_567;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_568> AgradDistributionsBetaBinomial_ffd_568;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_569> AgradDistributionsBetaBinomial_ffd_569;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_570> AgradDistributionsBetaBinomial_ffd_570;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_571> AgradDistributionsBetaBinomial_ffd_571;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_572> AgradDistributionsBetaBinomial_ffd_572;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_573> AgradDistributionsBetaBinomial_ffd_573;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_574> AgradDistributionsBetaBinomial_ffd_574;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_575> AgradDistributionsBetaBinomial_ffd_575;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_576> AgradDistributionsBetaBinomial_ffd_576;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_577> AgradDistributionsBetaBinomial_ffd_577;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_578> AgradDistributionsBetaBinomial_ffd_578;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_579> AgradDistributionsBetaBinomial_ffd_579;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_580> AgradDistributionsBetaBinomial_ffd_580;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_581> AgradDistributionsBetaBinomial_ffd_581;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_582> AgradDistributionsBetaBinomial_ffd_582;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_583> AgradDistributionsBetaBinomial_ffd_583;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_584> AgradDistributionsBetaBinomial_ffd_584;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_585> AgradDistributionsBetaBinomial_ffd_585;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_586> AgradDistributionsBetaBinomial_ffd_586;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_587> AgradDistributionsBetaBinomial_ffd_587;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_588> AgradDistributionsBetaBinomial_ffd_588;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_589> AgradDistributionsBetaBinomial_ffd_589;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_590> AgradDistributionsBetaBinomial_ffd_590;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_591> AgradDistributionsBetaBinomial_ffd_591;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_592> AgradDistributionsBetaBinomial_ffd_592;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_593> AgradDistributionsBetaBinomial_ffd_593;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_594> AgradDistributionsBetaBinomial_ffd_594;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_595> AgradDistributionsBetaBinomial_ffd_595;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_596> AgradDistributionsBetaBinomial_ffd_596;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_597> AgradDistributionsBetaBinomial_ffd_597;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_598> AgradDistributionsBetaBinomial_ffd_598;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_599> AgradDistributionsBetaBinomial_ffd_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_500, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_501, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_502, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_503, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_504, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_505, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_506, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_507, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_508, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_509, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_510, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_511, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_512, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_513, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_514, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_515, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_516, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_517, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_518, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_519, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_520, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_521, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_522, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_523, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_524, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_525, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_526, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_527, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_528, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_529, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_530, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_531, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_532, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_533, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_534, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_535, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_536, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_537, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_538, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_539, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_540, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_541, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_542, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_543, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_544, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_545, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_546, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_547, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_548, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_549, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_550, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_551, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_552, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_553, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_554, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_555, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_556, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_557, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_558, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_559, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_560, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_561, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_562, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_563, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_564, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_565, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_566, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_567, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_568, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_569, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_570, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_571, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_572, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_573, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_574, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_575, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_576, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_577, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_578, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_579, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_580, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_581, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_582, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_583, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_584, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_585, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_586, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_587, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_588, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_589, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_590, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_591, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_592, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_593, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_594, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_595, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_596, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_597, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_598, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_599, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_599);

