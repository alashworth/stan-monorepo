#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, double, empty, empty> type_fd_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, std::vector<double>, empty, empty> type_fd_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, fvar<double>, empty, empty> type_fd_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, double, empty, empty> type_fd_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<double>, empty, empty> type_fd_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<double>>, empty, empty> type_fd_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<double>, empty, empty> type_fd_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, double, empty, empty> type_fd_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, std::vector<double>, empty, empty> type_fd_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, fvar<double>, empty, empty> type_fd_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, double, empty, empty> type_fd_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<double>, empty, empty> type_fd_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<double>>, empty, empty> type_fd_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<double>, empty, empty> type_fd_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, double, empty, empty> type_fd_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<double>, empty, empty> type_fd_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_499;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_400> AgradCcdfLogBetaBinomial_fd_400;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_401> AgradCcdfLogBetaBinomial_fd_401;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_402> AgradCcdfLogBetaBinomial_fd_402;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_403> AgradCcdfLogBetaBinomial_fd_403;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_404> AgradCcdfLogBetaBinomial_fd_404;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_405> AgradCcdfLogBetaBinomial_fd_405;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_406> AgradCcdfLogBetaBinomial_fd_406;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_407> AgradCcdfLogBetaBinomial_fd_407;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_408> AgradCcdfLogBetaBinomial_fd_408;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_409> AgradCcdfLogBetaBinomial_fd_409;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_410> AgradCcdfLogBetaBinomial_fd_410;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_411> AgradCcdfLogBetaBinomial_fd_411;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_412> AgradCcdfLogBetaBinomial_fd_412;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_413> AgradCcdfLogBetaBinomial_fd_413;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_414> AgradCcdfLogBetaBinomial_fd_414;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_415> AgradCcdfLogBetaBinomial_fd_415;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_416> AgradCcdfLogBetaBinomial_fd_416;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_417> AgradCcdfLogBetaBinomial_fd_417;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_418> AgradCcdfLogBetaBinomial_fd_418;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_419> AgradCcdfLogBetaBinomial_fd_419;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_420> AgradCcdfLogBetaBinomial_fd_420;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_421> AgradCcdfLogBetaBinomial_fd_421;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_422> AgradCcdfLogBetaBinomial_fd_422;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_423> AgradCcdfLogBetaBinomial_fd_423;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_424> AgradCcdfLogBetaBinomial_fd_424;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_425> AgradCcdfLogBetaBinomial_fd_425;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_426> AgradCcdfLogBetaBinomial_fd_426;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_427> AgradCcdfLogBetaBinomial_fd_427;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_428> AgradCcdfLogBetaBinomial_fd_428;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_429> AgradCcdfLogBetaBinomial_fd_429;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_430> AgradCcdfLogBetaBinomial_fd_430;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_431> AgradCcdfLogBetaBinomial_fd_431;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_432> AgradCcdfLogBetaBinomial_fd_432;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_433> AgradCcdfLogBetaBinomial_fd_433;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_434> AgradCcdfLogBetaBinomial_fd_434;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_435> AgradCcdfLogBetaBinomial_fd_435;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_436> AgradCcdfLogBetaBinomial_fd_436;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_437> AgradCcdfLogBetaBinomial_fd_437;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_438> AgradCcdfLogBetaBinomial_fd_438;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_439> AgradCcdfLogBetaBinomial_fd_439;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_440> AgradCcdfLogBetaBinomial_fd_440;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_441> AgradCcdfLogBetaBinomial_fd_441;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_442> AgradCcdfLogBetaBinomial_fd_442;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_443> AgradCcdfLogBetaBinomial_fd_443;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_444> AgradCcdfLogBetaBinomial_fd_444;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_445> AgradCcdfLogBetaBinomial_fd_445;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_446> AgradCcdfLogBetaBinomial_fd_446;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_447> AgradCcdfLogBetaBinomial_fd_447;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_448> AgradCcdfLogBetaBinomial_fd_448;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_449> AgradCcdfLogBetaBinomial_fd_449;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_450> AgradCcdfLogBetaBinomial_fd_450;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_451> AgradCcdfLogBetaBinomial_fd_451;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_452> AgradCcdfLogBetaBinomial_fd_452;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_453> AgradCcdfLogBetaBinomial_fd_453;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_454> AgradCcdfLogBetaBinomial_fd_454;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_455> AgradCcdfLogBetaBinomial_fd_455;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_456> AgradCcdfLogBetaBinomial_fd_456;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_457> AgradCcdfLogBetaBinomial_fd_457;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_458> AgradCcdfLogBetaBinomial_fd_458;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_459> AgradCcdfLogBetaBinomial_fd_459;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_460> AgradCcdfLogBetaBinomial_fd_460;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_461> AgradCcdfLogBetaBinomial_fd_461;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_462> AgradCcdfLogBetaBinomial_fd_462;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_463> AgradCcdfLogBetaBinomial_fd_463;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_464> AgradCcdfLogBetaBinomial_fd_464;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_465> AgradCcdfLogBetaBinomial_fd_465;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_466> AgradCcdfLogBetaBinomial_fd_466;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_467> AgradCcdfLogBetaBinomial_fd_467;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_468> AgradCcdfLogBetaBinomial_fd_468;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_469> AgradCcdfLogBetaBinomial_fd_469;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_470> AgradCcdfLogBetaBinomial_fd_470;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_471> AgradCcdfLogBetaBinomial_fd_471;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_472> AgradCcdfLogBetaBinomial_fd_472;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_473> AgradCcdfLogBetaBinomial_fd_473;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_474> AgradCcdfLogBetaBinomial_fd_474;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_475> AgradCcdfLogBetaBinomial_fd_475;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_476> AgradCcdfLogBetaBinomial_fd_476;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_477> AgradCcdfLogBetaBinomial_fd_477;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_478> AgradCcdfLogBetaBinomial_fd_478;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_479> AgradCcdfLogBetaBinomial_fd_479;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_480> AgradCcdfLogBetaBinomial_fd_480;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_481> AgradCcdfLogBetaBinomial_fd_481;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_482> AgradCcdfLogBetaBinomial_fd_482;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_483> AgradCcdfLogBetaBinomial_fd_483;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_484> AgradCcdfLogBetaBinomial_fd_484;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_485> AgradCcdfLogBetaBinomial_fd_485;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_486> AgradCcdfLogBetaBinomial_fd_486;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_487> AgradCcdfLogBetaBinomial_fd_487;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_488> AgradCcdfLogBetaBinomial_fd_488;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_489> AgradCcdfLogBetaBinomial_fd_489;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_490> AgradCcdfLogBetaBinomial_fd_490;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_491> AgradCcdfLogBetaBinomial_fd_491;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_492> AgradCcdfLogBetaBinomial_fd_492;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_493> AgradCcdfLogBetaBinomial_fd_493;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_494> AgradCcdfLogBetaBinomial_fd_494;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_495> AgradCcdfLogBetaBinomial_fd_495;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_496> AgradCcdfLogBetaBinomial_fd_496;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_497> AgradCcdfLogBetaBinomial_fd_497;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_498> AgradCcdfLogBetaBinomial_fd_498;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_499> AgradCcdfLogBetaBinomial_fd_499;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_400, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_401, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_402, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_403, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_404, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_405, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_406, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_407, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_408, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_409, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_410, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_411, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_412, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_413, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_414, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_415, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_416, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_417, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_418, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_419, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_420, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_421, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_422, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_423, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_424, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_425, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_426, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_427, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_428, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_429, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_430, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_431, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_432, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_433, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_434, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_435, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_436, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_437, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_438, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_439, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_440, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_441, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_442, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_443, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_444, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_445, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_446, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_447, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_448, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_449, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_450, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_451, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_452, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_453, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_454, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_455, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_456, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_457, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_458, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_459, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_460, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_461, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_462, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_463, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_464, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_465, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_466, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_467, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_468, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_469, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_470, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_471, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_472, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_473, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_474, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_475, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_476, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_477, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_478, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_479, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_480, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_481, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_482, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_483, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_484, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_485, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_486, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_487, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_488, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_489, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_490, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_491, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_492, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_493, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_494, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_495, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_496, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_497, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_498, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_499, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_499);

