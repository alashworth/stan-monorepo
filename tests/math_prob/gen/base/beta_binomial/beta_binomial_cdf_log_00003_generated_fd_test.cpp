#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, double, empty, empty> type_fd_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<double>, empty, empty> type_fd_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<double>>, empty, empty> type_fd_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<double>, empty, empty> type_fd_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, double, empty, empty> type_fd_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, std::vector<double>, empty, empty> type_fd_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, fvar<double>, empty, empty> type_fd_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, double, empty, empty> type_fd_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<double>, empty, empty> type_fd_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<double>>, empty, empty> type_fd_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<double>, empty, empty> type_fd_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, double, empty, empty> type_fd_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<double>, empty, empty> type_fd_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, fvar<double>, empty, empty> type_fd_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, double, empty, empty> type_fd_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_699;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty> type_fd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty> type_fd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty> type_fd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty> type_fd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty> type_fd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty> type_fd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty> type_fd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_767;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_600> AgradCdfLogBetaBinomial_fd_600;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_601> AgradCdfLogBetaBinomial_fd_601;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_602> AgradCdfLogBetaBinomial_fd_602;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_603> AgradCdfLogBetaBinomial_fd_603;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_604> AgradCdfLogBetaBinomial_fd_604;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_605> AgradCdfLogBetaBinomial_fd_605;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_606> AgradCdfLogBetaBinomial_fd_606;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_607> AgradCdfLogBetaBinomial_fd_607;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_608> AgradCdfLogBetaBinomial_fd_608;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_609> AgradCdfLogBetaBinomial_fd_609;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_610> AgradCdfLogBetaBinomial_fd_610;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_611> AgradCdfLogBetaBinomial_fd_611;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_612> AgradCdfLogBetaBinomial_fd_612;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_613> AgradCdfLogBetaBinomial_fd_613;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_614> AgradCdfLogBetaBinomial_fd_614;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_615> AgradCdfLogBetaBinomial_fd_615;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_616> AgradCdfLogBetaBinomial_fd_616;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_617> AgradCdfLogBetaBinomial_fd_617;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_618> AgradCdfLogBetaBinomial_fd_618;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_619> AgradCdfLogBetaBinomial_fd_619;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_620> AgradCdfLogBetaBinomial_fd_620;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_621> AgradCdfLogBetaBinomial_fd_621;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_622> AgradCdfLogBetaBinomial_fd_622;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_623> AgradCdfLogBetaBinomial_fd_623;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_624> AgradCdfLogBetaBinomial_fd_624;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_625> AgradCdfLogBetaBinomial_fd_625;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_626> AgradCdfLogBetaBinomial_fd_626;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_627> AgradCdfLogBetaBinomial_fd_627;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_628> AgradCdfLogBetaBinomial_fd_628;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_629> AgradCdfLogBetaBinomial_fd_629;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_630> AgradCdfLogBetaBinomial_fd_630;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_631> AgradCdfLogBetaBinomial_fd_631;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_632> AgradCdfLogBetaBinomial_fd_632;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_633> AgradCdfLogBetaBinomial_fd_633;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_634> AgradCdfLogBetaBinomial_fd_634;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_635> AgradCdfLogBetaBinomial_fd_635;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_636> AgradCdfLogBetaBinomial_fd_636;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_637> AgradCdfLogBetaBinomial_fd_637;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_638> AgradCdfLogBetaBinomial_fd_638;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_639> AgradCdfLogBetaBinomial_fd_639;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_640> AgradCdfLogBetaBinomial_fd_640;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_641> AgradCdfLogBetaBinomial_fd_641;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_642> AgradCdfLogBetaBinomial_fd_642;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_643> AgradCdfLogBetaBinomial_fd_643;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_644> AgradCdfLogBetaBinomial_fd_644;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_645> AgradCdfLogBetaBinomial_fd_645;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_646> AgradCdfLogBetaBinomial_fd_646;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_647> AgradCdfLogBetaBinomial_fd_647;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_648> AgradCdfLogBetaBinomial_fd_648;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_649> AgradCdfLogBetaBinomial_fd_649;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_650> AgradCdfLogBetaBinomial_fd_650;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_651> AgradCdfLogBetaBinomial_fd_651;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_652> AgradCdfLogBetaBinomial_fd_652;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_653> AgradCdfLogBetaBinomial_fd_653;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_654> AgradCdfLogBetaBinomial_fd_654;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_655> AgradCdfLogBetaBinomial_fd_655;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_656> AgradCdfLogBetaBinomial_fd_656;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_657> AgradCdfLogBetaBinomial_fd_657;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_658> AgradCdfLogBetaBinomial_fd_658;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_659> AgradCdfLogBetaBinomial_fd_659;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_660> AgradCdfLogBetaBinomial_fd_660;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_661> AgradCdfLogBetaBinomial_fd_661;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_662> AgradCdfLogBetaBinomial_fd_662;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_663> AgradCdfLogBetaBinomial_fd_663;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_664> AgradCdfLogBetaBinomial_fd_664;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_665> AgradCdfLogBetaBinomial_fd_665;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_666> AgradCdfLogBetaBinomial_fd_666;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_667> AgradCdfLogBetaBinomial_fd_667;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_668> AgradCdfLogBetaBinomial_fd_668;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_669> AgradCdfLogBetaBinomial_fd_669;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_670> AgradCdfLogBetaBinomial_fd_670;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_671> AgradCdfLogBetaBinomial_fd_671;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_672> AgradCdfLogBetaBinomial_fd_672;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_673> AgradCdfLogBetaBinomial_fd_673;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_674> AgradCdfLogBetaBinomial_fd_674;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_675> AgradCdfLogBetaBinomial_fd_675;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_676> AgradCdfLogBetaBinomial_fd_676;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_677> AgradCdfLogBetaBinomial_fd_677;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_678> AgradCdfLogBetaBinomial_fd_678;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_679> AgradCdfLogBetaBinomial_fd_679;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_680> AgradCdfLogBetaBinomial_fd_680;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_681> AgradCdfLogBetaBinomial_fd_681;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_682> AgradCdfLogBetaBinomial_fd_682;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_683> AgradCdfLogBetaBinomial_fd_683;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_684> AgradCdfLogBetaBinomial_fd_684;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_685> AgradCdfLogBetaBinomial_fd_685;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_686> AgradCdfLogBetaBinomial_fd_686;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_687> AgradCdfLogBetaBinomial_fd_687;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_688> AgradCdfLogBetaBinomial_fd_688;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_689> AgradCdfLogBetaBinomial_fd_689;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_690> AgradCdfLogBetaBinomial_fd_690;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_691> AgradCdfLogBetaBinomial_fd_691;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_692> AgradCdfLogBetaBinomial_fd_692;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_693> AgradCdfLogBetaBinomial_fd_693;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_694> AgradCdfLogBetaBinomial_fd_694;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_695> AgradCdfLogBetaBinomial_fd_695;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_696> AgradCdfLogBetaBinomial_fd_696;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_697> AgradCdfLogBetaBinomial_fd_697;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_698> AgradCdfLogBetaBinomial_fd_698;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_699> AgradCdfLogBetaBinomial_fd_699;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_700> AgradCdfLogBetaBinomial_fd_700;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_701> AgradCdfLogBetaBinomial_fd_701;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_702> AgradCdfLogBetaBinomial_fd_702;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_703> AgradCdfLogBetaBinomial_fd_703;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_704> AgradCdfLogBetaBinomial_fd_704;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_705> AgradCdfLogBetaBinomial_fd_705;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_706> AgradCdfLogBetaBinomial_fd_706;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_707> AgradCdfLogBetaBinomial_fd_707;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_708> AgradCdfLogBetaBinomial_fd_708;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_709> AgradCdfLogBetaBinomial_fd_709;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_710> AgradCdfLogBetaBinomial_fd_710;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_711> AgradCdfLogBetaBinomial_fd_711;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_712> AgradCdfLogBetaBinomial_fd_712;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_713> AgradCdfLogBetaBinomial_fd_713;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_714> AgradCdfLogBetaBinomial_fd_714;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_715> AgradCdfLogBetaBinomial_fd_715;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_716> AgradCdfLogBetaBinomial_fd_716;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_717> AgradCdfLogBetaBinomial_fd_717;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_718> AgradCdfLogBetaBinomial_fd_718;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_719> AgradCdfLogBetaBinomial_fd_719;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_720> AgradCdfLogBetaBinomial_fd_720;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_721> AgradCdfLogBetaBinomial_fd_721;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_722> AgradCdfLogBetaBinomial_fd_722;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_723> AgradCdfLogBetaBinomial_fd_723;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_724> AgradCdfLogBetaBinomial_fd_724;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_725> AgradCdfLogBetaBinomial_fd_725;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_726> AgradCdfLogBetaBinomial_fd_726;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_727> AgradCdfLogBetaBinomial_fd_727;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_728> AgradCdfLogBetaBinomial_fd_728;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_729> AgradCdfLogBetaBinomial_fd_729;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_730> AgradCdfLogBetaBinomial_fd_730;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_731> AgradCdfLogBetaBinomial_fd_731;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_732> AgradCdfLogBetaBinomial_fd_732;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_733> AgradCdfLogBetaBinomial_fd_733;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_734> AgradCdfLogBetaBinomial_fd_734;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_735> AgradCdfLogBetaBinomial_fd_735;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_736> AgradCdfLogBetaBinomial_fd_736;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_737> AgradCdfLogBetaBinomial_fd_737;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_738> AgradCdfLogBetaBinomial_fd_738;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_739> AgradCdfLogBetaBinomial_fd_739;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_740> AgradCdfLogBetaBinomial_fd_740;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_741> AgradCdfLogBetaBinomial_fd_741;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_742> AgradCdfLogBetaBinomial_fd_742;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_743> AgradCdfLogBetaBinomial_fd_743;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_744> AgradCdfLogBetaBinomial_fd_744;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_745> AgradCdfLogBetaBinomial_fd_745;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_746> AgradCdfLogBetaBinomial_fd_746;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_747> AgradCdfLogBetaBinomial_fd_747;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_748> AgradCdfLogBetaBinomial_fd_748;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_749> AgradCdfLogBetaBinomial_fd_749;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_750> AgradCdfLogBetaBinomial_fd_750;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_751> AgradCdfLogBetaBinomial_fd_751;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_752> AgradCdfLogBetaBinomial_fd_752;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_753> AgradCdfLogBetaBinomial_fd_753;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_754> AgradCdfLogBetaBinomial_fd_754;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_755> AgradCdfLogBetaBinomial_fd_755;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_756> AgradCdfLogBetaBinomial_fd_756;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_757> AgradCdfLogBetaBinomial_fd_757;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_758> AgradCdfLogBetaBinomial_fd_758;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_759> AgradCdfLogBetaBinomial_fd_759;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_760> AgradCdfLogBetaBinomial_fd_760;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_761> AgradCdfLogBetaBinomial_fd_761;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_762> AgradCdfLogBetaBinomial_fd_762;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_763> AgradCdfLogBetaBinomial_fd_763;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_764> AgradCdfLogBetaBinomial_fd_764;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_765> AgradCdfLogBetaBinomial_fd_765;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_766> AgradCdfLogBetaBinomial_fd_766;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_767> AgradCdfLogBetaBinomial_fd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_600, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_601, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_602, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_603, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_604, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_605, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_606, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_607, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_608, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_609, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_610, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_611, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_612, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_613, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_614, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_615, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_616, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_617, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_618, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_619, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_620, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_621, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_622, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_623, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_624, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_625, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_626, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_627, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_628, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_629, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_630, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_631, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_632, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_633, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_634, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_635, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_636, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_637, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_638, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_639, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_640, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_641, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_642, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_643, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_644, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_645, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_646, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_647, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_648, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_649, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_650, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_651, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_652, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_653, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_654, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_655, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_656, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_657, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_658, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_659, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_660, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_661, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_662, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_663, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_664, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_665, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_666, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_667, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_668, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_669, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_670, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_671, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_672, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_673, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_674, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_675, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_676, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_677, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_678, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_679, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_680, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_681, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_682, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_683, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_684, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_685, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_686, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_687, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_688, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_689, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_690, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_691, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_692, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_693, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_694, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_695, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_696, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_697, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_698, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_699, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_699);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_700, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_701, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_702, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_703, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_704, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_705, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_706, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_707, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_708, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_709, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_710, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_711, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_712, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_713, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_714, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_715, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_716, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_717, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_718, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_719, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_720, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_721, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_722, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_723, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_724, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_725, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_726, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_727, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_728, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_729, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_730, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_731, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_732, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_733, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_734, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_735, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_736, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_737, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_738, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_739, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_740, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_741, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_742, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_743, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_744, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_745, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_746, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_747, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_748, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_749, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_750, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_751, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_752, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_753, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_754, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_755, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_756, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_757, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_758, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_759, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_760, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_761, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_762, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_763, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_764, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_765, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_766, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_767, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_767);

