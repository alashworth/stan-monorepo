#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_499;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_400> AgradCdfBetaBinomial_ffd_400;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_401> AgradCdfBetaBinomial_ffd_401;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_402> AgradCdfBetaBinomial_ffd_402;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_403> AgradCdfBetaBinomial_ffd_403;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_404> AgradCdfBetaBinomial_ffd_404;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_405> AgradCdfBetaBinomial_ffd_405;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_406> AgradCdfBetaBinomial_ffd_406;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_407> AgradCdfBetaBinomial_ffd_407;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_408> AgradCdfBetaBinomial_ffd_408;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_409> AgradCdfBetaBinomial_ffd_409;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_410> AgradCdfBetaBinomial_ffd_410;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_411> AgradCdfBetaBinomial_ffd_411;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_412> AgradCdfBetaBinomial_ffd_412;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_413> AgradCdfBetaBinomial_ffd_413;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_414> AgradCdfBetaBinomial_ffd_414;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_415> AgradCdfBetaBinomial_ffd_415;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_416> AgradCdfBetaBinomial_ffd_416;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_417> AgradCdfBetaBinomial_ffd_417;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_418> AgradCdfBetaBinomial_ffd_418;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_419> AgradCdfBetaBinomial_ffd_419;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_420> AgradCdfBetaBinomial_ffd_420;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_421> AgradCdfBetaBinomial_ffd_421;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_422> AgradCdfBetaBinomial_ffd_422;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_423> AgradCdfBetaBinomial_ffd_423;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_424> AgradCdfBetaBinomial_ffd_424;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_425> AgradCdfBetaBinomial_ffd_425;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_426> AgradCdfBetaBinomial_ffd_426;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_427> AgradCdfBetaBinomial_ffd_427;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_428> AgradCdfBetaBinomial_ffd_428;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_429> AgradCdfBetaBinomial_ffd_429;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_430> AgradCdfBetaBinomial_ffd_430;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_431> AgradCdfBetaBinomial_ffd_431;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_432> AgradCdfBetaBinomial_ffd_432;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_433> AgradCdfBetaBinomial_ffd_433;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_434> AgradCdfBetaBinomial_ffd_434;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_435> AgradCdfBetaBinomial_ffd_435;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_436> AgradCdfBetaBinomial_ffd_436;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_437> AgradCdfBetaBinomial_ffd_437;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_438> AgradCdfBetaBinomial_ffd_438;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_439> AgradCdfBetaBinomial_ffd_439;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_440> AgradCdfBetaBinomial_ffd_440;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_441> AgradCdfBetaBinomial_ffd_441;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_442> AgradCdfBetaBinomial_ffd_442;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_443> AgradCdfBetaBinomial_ffd_443;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_444> AgradCdfBetaBinomial_ffd_444;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_445> AgradCdfBetaBinomial_ffd_445;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_446> AgradCdfBetaBinomial_ffd_446;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_447> AgradCdfBetaBinomial_ffd_447;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_448> AgradCdfBetaBinomial_ffd_448;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_449> AgradCdfBetaBinomial_ffd_449;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_450> AgradCdfBetaBinomial_ffd_450;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_451> AgradCdfBetaBinomial_ffd_451;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_452> AgradCdfBetaBinomial_ffd_452;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_453> AgradCdfBetaBinomial_ffd_453;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_454> AgradCdfBetaBinomial_ffd_454;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_455> AgradCdfBetaBinomial_ffd_455;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_456> AgradCdfBetaBinomial_ffd_456;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_457> AgradCdfBetaBinomial_ffd_457;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_458> AgradCdfBetaBinomial_ffd_458;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_459> AgradCdfBetaBinomial_ffd_459;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_460> AgradCdfBetaBinomial_ffd_460;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_461> AgradCdfBetaBinomial_ffd_461;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_462> AgradCdfBetaBinomial_ffd_462;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_463> AgradCdfBetaBinomial_ffd_463;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_464> AgradCdfBetaBinomial_ffd_464;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_465> AgradCdfBetaBinomial_ffd_465;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_466> AgradCdfBetaBinomial_ffd_466;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_467> AgradCdfBetaBinomial_ffd_467;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_468> AgradCdfBetaBinomial_ffd_468;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_469> AgradCdfBetaBinomial_ffd_469;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_470> AgradCdfBetaBinomial_ffd_470;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_471> AgradCdfBetaBinomial_ffd_471;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_472> AgradCdfBetaBinomial_ffd_472;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_473> AgradCdfBetaBinomial_ffd_473;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_474> AgradCdfBetaBinomial_ffd_474;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_475> AgradCdfBetaBinomial_ffd_475;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_476> AgradCdfBetaBinomial_ffd_476;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_477> AgradCdfBetaBinomial_ffd_477;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_478> AgradCdfBetaBinomial_ffd_478;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_479> AgradCdfBetaBinomial_ffd_479;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_480> AgradCdfBetaBinomial_ffd_480;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_481> AgradCdfBetaBinomial_ffd_481;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_482> AgradCdfBetaBinomial_ffd_482;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_483> AgradCdfBetaBinomial_ffd_483;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_484> AgradCdfBetaBinomial_ffd_484;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_485> AgradCdfBetaBinomial_ffd_485;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_486> AgradCdfBetaBinomial_ffd_486;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_487> AgradCdfBetaBinomial_ffd_487;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_488> AgradCdfBetaBinomial_ffd_488;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_489> AgradCdfBetaBinomial_ffd_489;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_490> AgradCdfBetaBinomial_ffd_490;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_491> AgradCdfBetaBinomial_ffd_491;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_492> AgradCdfBetaBinomial_ffd_492;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_493> AgradCdfBetaBinomial_ffd_493;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_494> AgradCdfBetaBinomial_ffd_494;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_495> AgradCdfBetaBinomial_ffd_495;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_496> AgradCdfBetaBinomial_ffd_496;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_497> AgradCdfBetaBinomial_ffd_497;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_498> AgradCdfBetaBinomial_ffd_498;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_499> AgradCdfBetaBinomial_ffd_499;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_400, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_401, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_402, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_403, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_404, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_405, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_406, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_407, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_408, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_409, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_410, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_411, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_412, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_413, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_414, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_415, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_416, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_417, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_418, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_419, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_420, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_421, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_422, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_423, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_424, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_425, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_426, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_427, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_428, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_429, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_430, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_431, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_432, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_433, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_434, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_435, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_436, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_437, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_438, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_439, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_440, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_441, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_442, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_443, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_444, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_445, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_446, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_447, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_448, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_449, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_450, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_451, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_452, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_453, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_454, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_455, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_456, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_457, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_458, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_459, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_460, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_461, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_462, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_463, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_464, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_465, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_466, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_467, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_468, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_469, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_470, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_471, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_472, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_473, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_474, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_475, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_476, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_477, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_478, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_479, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_480, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_481, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_482, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_483, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_484, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_485, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_486, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_487, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_488, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_489, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_490, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_491, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_492, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_493, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_494, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_495, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_496, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_497, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_498, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_499, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_499);

