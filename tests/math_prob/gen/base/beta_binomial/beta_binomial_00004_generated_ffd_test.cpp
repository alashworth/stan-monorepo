#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_499;

typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_400> AgradDistributionsBetaBinomial_ffd_400;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_401> AgradDistributionsBetaBinomial_ffd_401;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_402> AgradDistributionsBetaBinomial_ffd_402;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_403> AgradDistributionsBetaBinomial_ffd_403;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_404> AgradDistributionsBetaBinomial_ffd_404;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_405> AgradDistributionsBetaBinomial_ffd_405;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_406> AgradDistributionsBetaBinomial_ffd_406;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_407> AgradDistributionsBetaBinomial_ffd_407;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_408> AgradDistributionsBetaBinomial_ffd_408;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_409> AgradDistributionsBetaBinomial_ffd_409;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_410> AgradDistributionsBetaBinomial_ffd_410;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_411> AgradDistributionsBetaBinomial_ffd_411;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_412> AgradDistributionsBetaBinomial_ffd_412;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_413> AgradDistributionsBetaBinomial_ffd_413;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_414> AgradDistributionsBetaBinomial_ffd_414;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_415> AgradDistributionsBetaBinomial_ffd_415;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_416> AgradDistributionsBetaBinomial_ffd_416;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_417> AgradDistributionsBetaBinomial_ffd_417;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_418> AgradDistributionsBetaBinomial_ffd_418;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_419> AgradDistributionsBetaBinomial_ffd_419;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_420> AgradDistributionsBetaBinomial_ffd_420;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_421> AgradDistributionsBetaBinomial_ffd_421;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_422> AgradDistributionsBetaBinomial_ffd_422;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_423> AgradDistributionsBetaBinomial_ffd_423;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_424> AgradDistributionsBetaBinomial_ffd_424;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_425> AgradDistributionsBetaBinomial_ffd_425;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_426> AgradDistributionsBetaBinomial_ffd_426;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_427> AgradDistributionsBetaBinomial_ffd_427;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_428> AgradDistributionsBetaBinomial_ffd_428;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_429> AgradDistributionsBetaBinomial_ffd_429;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_430> AgradDistributionsBetaBinomial_ffd_430;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_431> AgradDistributionsBetaBinomial_ffd_431;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_432> AgradDistributionsBetaBinomial_ffd_432;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_433> AgradDistributionsBetaBinomial_ffd_433;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_434> AgradDistributionsBetaBinomial_ffd_434;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_435> AgradDistributionsBetaBinomial_ffd_435;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_436> AgradDistributionsBetaBinomial_ffd_436;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_437> AgradDistributionsBetaBinomial_ffd_437;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_438> AgradDistributionsBetaBinomial_ffd_438;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_439> AgradDistributionsBetaBinomial_ffd_439;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_440> AgradDistributionsBetaBinomial_ffd_440;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_441> AgradDistributionsBetaBinomial_ffd_441;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_442> AgradDistributionsBetaBinomial_ffd_442;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_443> AgradDistributionsBetaBinomial_ffd_443;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_444> AgradDistributionsBetaBinomial_ffd_444;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_445> AgradDistributionsBetaBinomial_ffd_445;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_446> AgradDistributionsBetaBinomial_ffd_446;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_447> AgradDistributionsBetaBinomial_ffd_447;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_448> AgradDistributionsBetaBinomial_ffd_448;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_449> AgradDistributionsBetaBinomial_ffd_449;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_450> AgradDistributionsBetaBinomial_ffd_450;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_451> AgradDistributionsBetaBinomial_ffd_451;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_452> AgradDistributionsBetaBinomial_ffd_452;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_453> AgradDistributionsBetaBinomial_ffd_453;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_454> AgradDistributionsBetaBinomial_ffd_454;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_455> AgradDistributionsBetaBinomial_ffd_455;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_456> AgradDistributionsBetaBinomial_ffd_456;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_457> AgradDistributionsBetaBinomial_ffd_457;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_458> AgradDistributionsBetaBinomial_ffd_458;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_459> AgradDistributionsBetaBinomial_ffd_459;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_460> AgradDistributionsBetaBinomial_ffd_460;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_461> AgradDistributionsBetaBinomial_ffd_461;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_462> AgradDistributionsBetaBinomial_ffd_462;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_463> AgradDistributionsBetaBinomial_ffd_463;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_464> AgradDistributionsBetaBinomial_ffd_464;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_465> AgradDistributionsBetaBinomial_ffd_465;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_466> AgradDistributionsBetaBinomial_ffd_466;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_467> AgradDistributionsBetaBinomial_ffd_467;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_468> AgradDistributionsBetaBinomial_ffd_468;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_469> AgradDistributionsBetaBinomial_ffd_469;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_470> AgradDistributionsBetaBinomial_ffd_470;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_471> AgradDistributionsBetaBinomial_ffd_471;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_472> AgradDistributionsBetaBinomial_ffd_472;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_473> AgradDistributionsBetaBinomial_ffd_473;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_474> AgradDistributionsBetaBinomial_ffd_474;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_475> AgradDistributionsBetaBinomial_ffd_475;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_476> AgradDistributionsBetaBinomial_ffd_476;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_477> AgradDistributionsBetaBinomial_ffd_477;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_478> AgradDistributionsBetaBinomial_ffd_478;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_479> AgradDistributionsBetaBinomial_ffd_479;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_480> AgradDistributionsBetaBinomial_ffd_480;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_481> AgradDistributionsBetaBinomial_ffd_481;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_482> AgradDistributionsBetaBinomial_ffd_482;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_483> AgradDistributionsBetaBinomial_ffd_483;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_484> AgradDistributionsBetaBinomial_ffd_484;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_485> AgradDistributionsBetaBinomial_ffd_485;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_486> AgradDistributionsBetaBinomial_ffd_486;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_487> AgradDistributionsBetaBinomial_ffd_487;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_488> AgradDistributionsBetaBinomial_ffd_488;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_489> AgradDistributionsBetaBinomial_ffd_489;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_490> AgradDistributionsBetaBinomial_ffd_490;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_491> AgradDistributionsBetaBinomial_ffd_491;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_492> AgradDistributionsBetaBinomial_ffd_492;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_493> AgradDistributionsBetaBinomial_ffd_493;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_494> AgradDistributionsBetaBinomial_ffd_494;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_495> AgradDistributionsBetaBinomial_ffd_495;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_496> AgradDistributionsBetaBinomial_ffd_496;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_497> AgradDistributionsBetaBinomial_ffd_497;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_498> AgradDistributionsBetaBinomial_ffd_498;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffd_499> AgradDistributionsBetaBinomial_ffd_499;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_400, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_401, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_402, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_403, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_404, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_405, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_406, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_407, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_408, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_409, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_410, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_411, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_412, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_413, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_414, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_415, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_416, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_417, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_418, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_419, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_420, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_421, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_422, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_423, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_424, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_425, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_426, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_427, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_428, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_429, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_430, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_431, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_432, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_433, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_434, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_435, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_436, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_437, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_438, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_439, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_440, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_441, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_442, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_443, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_444, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_445, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_446, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_447, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_448, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_449, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_450, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_451, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_452, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_453, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_454, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_455, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_456, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_457, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_458, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_459, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_460, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_461, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_462, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_463, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_464, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_465, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_466, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_467, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_468, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_469, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_470, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_471, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_472, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_473, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_474, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_475, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_476, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_477, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_478, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_479, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_480, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_481, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_482, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_483, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_484, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_485, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_486, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_487, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_488, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_489, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_490, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_491, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_492, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_493, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_494, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_495, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_496, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_497, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_498, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffd_499, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffd_499);

