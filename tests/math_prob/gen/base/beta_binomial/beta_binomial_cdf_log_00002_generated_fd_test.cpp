#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, double, empty, empty> type_fd_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, std::vector<double>, empty, empty> type_fd_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, fvar<double>, empty, empty> type_fd_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, double, empty, empty> type_fd_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<double>, empty, empty> type_fd_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<double>>, empty, empty> type_fd_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<double>, empty, empty> type_fd_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, double, empty, empty> type_fd_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, std::vector<double>, empty, empty> type_fd_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, fvar<double>, empty, empty> type_fd_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, double, empty, empty> type_fd_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<double>, empty, empty> type_fd_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<double>>, empty, empty> type_fd_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<double>, empty, empty> type_fd_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, double, empty, empty> type_fd_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<double>, empty, empty> type_fd_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_499;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, fvar<double>, empty, empty> type_fd_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, double, empty, empty> type_fd_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty> type_fd_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty> type_fd_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty> type_fd_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty> type_fd_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty> type_fd_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty> type_fd_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty> type_fd_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<double>, empty, empty> type_fd_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<double>>, empty, empty> type_fd_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<double>, empty, empty> type_fd_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, double, empty, empty> type_fd_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, std::vector<double>, empty, empty> type_fd_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, fvar<double>, empty, empty> type_fd_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_599;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_400> AgradCdfLogBetaBinomial_fd_400;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_401> AgradCdfLogBetaBinomial_fd_401;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_402> AgradCdfLogBetaBinomial_fd_402;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_403> AgradCdfLogBetaBinomial_fd_403;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_404> AgradCdfLogBetaBinomial_fd_404;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_405> AgradCdfLogBetaBinomial_fd_405;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_406> AgradCdfLogBetaBinomial_fd_406;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_407> AgradCdfLogBetaBinomial_fd_407;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_408> AgradCdfLogBetaBinomial_fd_408;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_409> AgradCdfLogBetaBinomial_fd_409;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_410> AgradCdfLogBetaBinomial_fd_410;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_411> AgradCdfLogBetaBinomial_fd_411;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_412> AgradCdfLogBetaBinomial_fd_412;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_413> AgradCdfLogBetaBinomial_fd_413;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_414> AgradCdfLogBetaBinomial_fd_414;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_415> AgradCdfLogBetaBinomial_fd_415;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_416> AgradCdfLogBetaBinomial_fd_416;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_417> AgradCdfLogBetaBinomial_fd_417;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_418> AgradCdfLogBetaBinomial_fd_418;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_419> AgradCdfLogBetaBinomial_fd_419;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_420> AgradCdfLogBetaBinomial_fd_420;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_421> AgradCdfLogBetaBinomial_fd_421;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_422> AgradCdfLogBetaBinomial_fd_422;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_423> AgradCdfLogBetaBinomial_fd_423;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_424> AgradCdfLogBetaBinomial_fd_424;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_425> AgradCdfLogBetaBinomial_fd_425;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_426> AgradCdfLogBetaBinomial_fd_426;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_427> AgradCdfLogBetaBinomial_fd_427;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_428> AgradCdfLogBetaBinomial_fd_428;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_429> AgradCdfLogBetaBinomial_fd_429;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_430> AgradCdfLogBetaBinomial_fd_430;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_431> AgradCdfLogBetaBinomial_fd_431;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_432> AgradCdfLogBetaBinomial_fd_432;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_433> AgradCdfLogBetaBinomial_fd_433;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_434> AgradCdfLogBetaBinomial_fd_434;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_435> AgradCdfLogBetaBinomial_fd_435;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_436> AgradCdfLogBetaBinomial_fd_436;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_437> AgradCdfLogBetaBinomial_fd_437;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_438> AgradCdfLogBetaBinomial_fd_438;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_439> AgradCdfLogBetaBinomial_fd_439;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_440> AgradCdfLogBetaBinomial_fd_440;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_441> AgradCdfLogBetaBinomial_fd_441;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_442> AgradCdfLogBetaBinomial_fd_442;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_443> AgradCdfLogBetaBinomial_fd_443;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_444> AgradCdfLogBetaBinomial_fd_444;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_445> AgradCdfLogBetaBinomial_fd_445;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_446> AgradCdfLogBetaBinomial_fd_446;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_447> AgradCdfLogBetaBinomial_fd_447;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_448> AgradCdfLogBetaBinomial_fd_448;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_449> AgradCdfLogBetaBinomial_fd_449;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_450> AgradCdfLogBetaBinomial_fd_450;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_451> AgradCdfLogBetaBinomial_fd_451;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_452> AgradCdfLogBetaBinomial_fd_452;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_453> AgradCdfLogBetaBinomial_fd_453;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_454> AgradCdfLogBetaBinomial_fd_454;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_455> AgradCdfLogBetaBinomial_fd_455;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_456> AgradCdfLogBetaBinomial_fd_456;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_457> AgradCdfLogBetaBinomial_fd_457;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_458> AgradCdfLogBetaBinomial_fd_458;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_459> AgradCdfLogBetaBinomial_fd_459;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_460> AgradCdfLogBetaBinomial_fd_460;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_461> AgradCdfLogBetaBinomial_fd_461;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_462> AgradCdfLogBetaBinomial_fd_462;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_463> AgradCdfLogBetaBinomial_fd_463;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_464> AgradCdfLogBetaBinomial_fd_464;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_465> AgradCdfLogBetaBinomial_fd_465;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_466> AgradCdfLogBetaBinomial_fd_466;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_467> AgradCdfLogBetaBinomial_fd_467;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_468> AgradCdfLogBetaBinomial_fd_468;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_469> AgradCdfLogBetaBinomial_fd_469;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_470> AgradCdfLogBetaBinomial_fd_470;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_471> AgradCdfLogBetaBinomial_fd_471;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_472> AgradCdfLogBetaBinomial_fd_472;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_473> AgradCdfLogBetaBinomial_fd_473;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_474> AgradCdfLogBetaBinomial_fd_474;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_475> AgradCdfLogBetaBinomial_fd_475;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_476> AgradCdfLogBetaBinomial_fd_476;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_477> AgradCdfLogBetaBinomial_fd_477;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_478> AgradCdfLogBetaBinomial_fd_478;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_479> AgradCdfLogBetaBinomial_fd_479;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_480> AgradCdfLogBetaBinomial_fd_480;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_481> AgradCdfLogBetaBinomial_fd_481;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_482> AgradCdfLogBetaBinomial_fd_482;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_483> AgradCdfLogBetaBinomial_fd_483;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_484> AgradCdfLogBetaBinomial_fd_484;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_485> AgradCdfLogBetaBinomial_fd_485;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_486> AgradCdfLogBetaBinomial_fd_486;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_487> AgradCdfLogBetaBinomial_fd_487;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_488> AgradCdfLogBetaBinomial_fd_488;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_489> AgradCdfLogBetaBinomial_fd_489;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_490> AgradCdfLogBetaBinomial_fd_490;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_491> AgradCdfLogBetaBinomial_fd_491;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_492> AgradCdfLogBetaBinomial_fd_492;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_493> AgradCdfLogBetaBinomial_fd_493;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_494> AgradCdfLogBetaBinomial_fd_494;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_495> AgradCdfLogBetaBinomial_fd_495;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_496> AgradCdfLogBetaBinomial_fd_496;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_497> AgradCdfLogBetaBinomial_fd_497;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_498> AgradCdfLogBetaBinomial_fd_498;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_499> AgradCdfLogBetaBinomial_fd_499;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_500> AgradCdfLogBetaBinomial_fd_500;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_501> AgradCdfLogBetaBinomial_fd_501;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_502> AgradCdfLogBetaBinomial_fd_502;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_503> AgradCdfLogBetaBinomial_fd_503;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_504> AgradCdfLogBetaBinomial_fd_504;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_505> AgradCdfLogBetaBinomial_fd_505;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_506> AgradCdfLogBetaBinomial_fd_506;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_507> AgradCdfLogBetaBinomial_fd_507;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_508> AgradCdfLogBetaBinomial_fd_508;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_509> AgradCdfLogBetaBinomial_fd_509;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_510> AgradCdfLogBetaBinomial_fd_510;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_511> AgradCdfLogBetaBinomial_fd_511;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_512> AgradCdfLogBetaBinomial_fd_512;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_513> AgradCdfLogBetaBinomial_fd_513;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_514> AgradCdfLogBetaBinomial_fd_514;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_515> AgradCdfLogBetaBinomial_fd_515;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_516> AgradCdfLogBetaBinomial_fd_516;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_517> AgradCdfLogBetaBinomial_fd_517;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_518> AgradCdfLogBetaBinomial_fd_518;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_519> AgradCdfLogBetaBinomial_fd_519;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_520> AgradCdfLogBetaBinomial_fd_520;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_521> AgradCdfLogBetaBinomial_fd_521;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_522> AgradCdfLogBetaBinomial_fd_522;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_523> AgradCdfLogBetaBinomial_fd_523;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_524> AgradCdfLogBetaBinomial_fd_524;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_525> AgradCdfLogBetaBinomial_fd_525;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_526> AgradCdfLogBetaBinomial_fd_526;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_527> AgradCdfLogBetaBinomial_fd_527;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_528> AgradCdfLogBetaBinomial_fd_528;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_529> AgradCdfLogBetaBinomial_fd_529;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_530> AgradCdfLogBetaBinomial_fd_530;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_531> AgradCdfLogBetaBinomial_fd_531;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_532> AgradCdfLogBetaBinomial_fd_532;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_533> AgradCdfLogBetaBinomial_fd_533;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_534> AgradCdfLogBetaBinomial_fd_534;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_535> AgradCdfLogBetaBinomial_fd_535;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_536> AgradCdfLogBetaBinomial_fd_536;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_537> AgradCdfLogBetaBinomial_fd_537;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_538> AgradCdfLogBetaBinomial_fd_538;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_539> AgradCdfLogBetaBinomial_fd_539;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_540> AgradCdfLogBetaBinomial_fd_540;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_541> AgradCdfLogBetaBinomial_fd_541;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_542> AgradCdfLogBetaBinomial_fd_542;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_543> AgradCdfLogBetaBinomial_fd_543;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_544> AgradCdfLogBetaBinomial_fd_544;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_545> AgradCdfLogBetaBinomial_fd_545;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_546> AgradCdfLogBetaBinomial_fd_546;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_547> AgradCdfLogBetaBinomial_fd_547;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_548> AgradCdfLogBetaBinomial_fd_548;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_549> AgradCdfLogBetaBinomial_fd_549;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_550> AgradCdfLogBetaBinomial_fd_550;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_551> AgradCdfLogBetaBinomial_fd_551;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_552> AgradCdfLogBetaBinomial_fd_552;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_553> AgradCdfLogBetaBinomial_fd_553;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_554> AgradCdfLogBetaBinomial_fd_554;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_555> AgradCdfLogBetaBinomial_fd_555;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_556> AgradCdfLogBetaBinomial_fd_556;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_557> AgradCdfLogBetaBinomial_fd_557;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_558> AgradCdfLogBetaBinomial_fd_558;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_559> AgradCdfLogBetaBinomial_fd_559;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_560> AgradCdfLogBetaBinomial_fd_560;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_561> AgradCdfLogBetaBinomial_fd_561;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_562> AgradCdfLogBetaBinomial_fd_562;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_563> AgradCdfLogBetaBinomial_fd_563;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_564> AgradCdfLogBetaBinomial_fd_564;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_565> AgradCdfLogBetaBinomial_fd_565;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_566> AgradCdfLogBetaBinomial_fd_566;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_567> AgradCdfLogBetaBinomial_fd_567;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_568> AgradCdfLogBetaBinomial_fd_568;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_569> AgradCdfLogBetaBinomial_fd_569;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_570> AgradCdfLogBetaBinomial_fd_570;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_571> AgradCdfLogBetaBinomial_fd_571;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_572> AgradCdfLogBetaBinomial_fd_572;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_573> AgradCdfLogBetaBinomial_fd_573;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_574> AgradCdfLogBetaBinomial_fd_574;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_575> AgradCdfLogBetaBinomial_fd_575;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_576> AgradCdfLogBetaBinomial_fd_576;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_577> AgradCdfLogBetaBinomial_fd_577;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_578> AgradCdfLogBetaBinomial_fd_578;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_579> AgradCdfLogBetaBinomial_fd_579;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_580> AgradCdfLogBetaBinomial_fd_580;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_581> AgradCdfLogBetaBinomial_fd_581;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_582> AgradCdfLogBetaBinomial_fd_582;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_583> AgradCdfLogBetaBinomial_fd_583;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_584> AgradCdfLogBetaBinomial_fd_584;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_585> AgradCdfLogBetaBinomial_fd_585;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_586> AgradCdfLogBetaBinomial_fd_586;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_587> AgradCdfLogBetaBinomial_fd_587;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_588> AgradCdfLogBetaBinomial_fd_588;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_589> AgradCdfLogBetaBinomial_fd_589;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_590> AgradCdfLogBetaBinomial_fd_590;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_591> AgradCdfLogBetaBinomial_fd_591;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_592> AgradCdfLogBetaBinomial_fd_592;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_593> AgradCdfLogBetaBinomial_fd_593;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_594> AgradCdfLogBetaBinomial_fd_594;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_595> AgradCdfLogBetaBinomial_fd_595;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_596> AgradCdfLogBetaBinomial_fd_596;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_597> AgradCdfLogBetaBinomial_fd_597;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_598> AgradCdfLogBetaBinomial_fd_598;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_599> AgradCdfLogBetaBinomial_fd_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_400, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_401, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_402, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_403, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_404, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_405, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_406, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_407, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_408, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_409, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_410, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_411, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_412, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_413, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_414, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_415, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_416, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_417, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_418, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_419, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_420, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_421, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_422, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_423, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_424, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_425, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_426, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_427, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_428, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_429, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_430, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_431, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_432, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_433, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_434, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_435, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_436, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_437, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_438, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_439, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_440, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_441, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_442, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_443, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_444, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_445, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_446, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_447, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_448, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_449, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_450, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_451, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_452, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_453, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_454, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_455, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_456, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_457, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_458, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_459, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_460, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_461, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_462, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_463, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_464, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_465, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_466, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_467, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_468, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_469, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_470, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_471, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_472, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_473, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_474, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_475, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_476, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_477, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_478, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_479, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_480, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_481, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_482, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_483, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_484, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_485, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_486, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_487, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_488, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_489, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_490, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_491, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_492, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_493, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_494, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_495, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_496, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_497, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_498, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_499, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_499);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_500, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_501, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_502, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_503, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_504, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_505, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_506, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_507, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_508, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_509, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_510, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_511, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_512, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_513, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_514, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_515, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_516, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_517, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_518, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_519, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_520, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_521, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_522, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_523, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_524, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_525, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_526, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_527, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_528, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_529, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_530, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_531, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_532, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_533, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_534, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_535, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_536, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_537, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_538, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_539, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_540, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_541, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_542, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_543, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_544, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_545, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_546, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_547, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_548, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_549, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_550, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_551, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_552, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_553, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_554, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_555, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_556, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_557, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_558, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_559, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_560, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_561, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_562, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_563, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_564, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_565, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_566, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_567, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_568, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_569, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_570, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_571, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_572, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_573, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_574, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_575, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_576, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_577, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_578, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_579, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_580, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_581, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_582, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_583, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_584, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_585, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_586, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_587, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_588, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_589, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_590, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_591, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_592, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_593, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_594, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_595, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_596, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_597, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_598, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_599, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_599);

