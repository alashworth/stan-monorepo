#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty> type_ffv_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty> type_ffv_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_767;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_700> AgradCdfLogBetaBinomial_ffv_700;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_701> AgradCdfLogBetaBinomial_ffv_701;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_702> AgradCdfLogBetaBinomial_ffv_702;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_703> AgradCdfLogBetaBinomial_ffv_703;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_704> AgradCdfLogBetaBinomial_ffv_704;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_705> AgradCdfLogBetaBinomial_ffv_705;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_706> AgradCdfLogBetaBinomial_ffv_706;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_707> AgradCdfLogBetaBinomial_ffv_707;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_708> AgradCdfLogBetaBinomial_ffv_708;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_709> AgradCdfLogBetaBinomial_ffv_709;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_710> AgradCdfLogBetaBinomial_ffv_710;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_711> AgradCdfLogBetaBinomial_ffv_711;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_712> AgradCdfLogBetaBinomial_ffv_712;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_713> AgradCdfLogBetaBinomial_ffv_713;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_714> AgradCdfLogBetaBinomial_ffv_714;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_715> AgradCdfLogBetaBinomial_ffv_715;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_716> AgradCdfLogBetaBinomial_ffv_716;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_717> AgradCdfLogBetaBinomial_ffv_717;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_718> AgradCdfLogBetaBinomial_ffv_718;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_719> AgradCdfLogBetaBinomial_ffv_719;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_720> AgradCdfLogBetaBinomial_ffv_720;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_721> AgradCdfLogBetaBinomial_ffv_721;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_722> AgradCdfLogBetaBinomial_ffv_722;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_723> AgradCdfLogBetaBinomial_ffv_723;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_724> AgradCdfLogBetaBinomial_ffv_724;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_725> AgradCdfLogBetaBinomial_ffv_725;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_726> AgradCdfLogBetaBinomial_ffv_726;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_727> AgradCdfLogBetaBinomial_ffv_727;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_728> AgradCdfLogBetaBinomial_ffv_728;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_729> AgradCdfLogBetaBinomial_ffv_729;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_730> AgradCdfLogBetaBinomial_ffv_730;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_731> AgradCdfLogBetaBinomial_ffv_731;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_732> AgradCdfLogBetaBinomial_ffv_732;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_733> AgradCdfLogBetaBinomial_ffv_733;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_734> AgradCdfLogBetaBinomial_ffv_734;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_735> AgradCdfLogBetaBinomial_ffv_735;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_736> AgradCdfLogBetaBinomial_ffv_736;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_737> AgradCdfLogBetaBinomial_ffv_737;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_738> AgradCdfLogBetaBinomial_ffv_738;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_739> AgradCdfLogBetaBinomial_ffv_739;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_740> AgradCdfLogBetaBinomial_ffv_740;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_741> AgradCdfLogBetaBinomial_ffv_741;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_742> AgradCdfLogBetaBinomial_ffv_742;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_743> AgradCdfLogBetaBinomial_ffv_743;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_744> AgradCdfLogBetaBinomial_ffv_744;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_745> AgradCdfLogBetaBinomial_ffv_745;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_746> AgradCdfLogBetaBinomial_ffv_746;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_747> AgradCdfLogBetaBinomial_ffv_747;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_748> AgradCdfLogBetaBinomial_ffv_748;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_749> AgradCdfLogBetaBinomial_ffv_749;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_750> AgradCdfLogBetaBinomial_ffv_750;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_751> AgradCdfLogBetaBinomial_ffv_751;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_752> AgradCdfLogBetaBinomial_ffv_752;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_753> AgradCdfLogBetaBinomial_ffv_753;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_754> AgradCdfLogBetaBinomial_ffv_754;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_755> AgradCdfLogBetaBinomial_ffv_755;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_756> AgradCdfLogBetaBinomial_ffv_756;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_757> AgradCdfLogBetaBinomial_ffv_757;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_758> AgradCdfLogBetaBinomial_ffv_758;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_759> AgradCdfLogBetaBinomial_ffv_759;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_760> AgradCdfLogBetaBinomial_ffv_760;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_761> AgradCdfLogBetaBinomial_ffv_761;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_762> AgradCdfLogBetaBinomial_ffv_762;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_763> AgradCdfLogBetaBinomial_ffv_763;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_764> AgradCdfLogBetaBinomial_ffv_764;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_765> AgradCdfLogBetaBinomial_ffv_765;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_766> AgradCdfLogBetaBinomial_ffv_766;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_767> AgradCdfLogBetaBinomial_ffv_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_700, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_701, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_702, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_703, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_704, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_705, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_706, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_707, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_708, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_709, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_710, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_711, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_712, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_713, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_714, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_715, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_716, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_717, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_718, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_719, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_720, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_721, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_722, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_723, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_724, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_725, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_726, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_727, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_728, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_729, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_730, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_731, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_732, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_733, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_734, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_735, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_736, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_737, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_738, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_739, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_740, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_741, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_742, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_743, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_744, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_745, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_746, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_747, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_748, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_749, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_750, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_751, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_752, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_753, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_754, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_755, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_756, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_757, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_758, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_759, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_760, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_761, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_762, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_763, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_764, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_765, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_766, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_767, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_767);

