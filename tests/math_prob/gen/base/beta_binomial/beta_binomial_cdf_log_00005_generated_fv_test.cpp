#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, fvar<var>, empty, empty> type_fv_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, double, empty, empty> type_fv_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<var>, empty, empty> type_fv_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<var>>, empty, empty> type_fv_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<var>, empty, empty> type_fv_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, double, empty, empty> type_fv_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<double>, empty, empty> type_fv_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, fvar<var>, empty, empty> type_fv_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, double, empty, empty> type_fv_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<var>, empty, empty> type_fv_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<var>>, empty, empty> type_fv_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<var>, empty, empty> type_fv_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, double, empty, empty> type_fv_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, std::vector<double>, empty, empty> type_fv_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, fvar<var>, empty, empty> type_fv_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_599;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_500> AgradCdfLogBetaBinomial_fv_500;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_501> AgradCdfLogBetaBinomial_fv_501;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_502> AgradCdfLogBetaBinomial_fv_502;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_503> AgradCdfLogBetaBinomial_fv_503;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_504> AgradCdfLogBetaBinomial_fv_504;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_505> AgradCdfLogBetaBinomial_fv_505;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_506> AgradCdfLogBetaBinomial_fv_506;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_507> AgradCdfLogBetaBinomial_fv_507;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_508> AgradCdfLogBetaBinomial_fv_508;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_509> AgradCdfLogBetaBinomial_fv_509;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_510> AgradCdfLogBetaBinomial_fv_510;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_511> AgradCdfLogBetaBinomial_fv_511;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_512> AgradCdfLogBetaBinomial_fv_512;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_513> AgradCdfLogBetaBinomial_fv_513;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_514> AgradCdfLogBetaBinomial_fv_514;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_515> AgradCdfLogBetaBinomial_fv_515;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_516> AgradCdfLogBetaBinomial_fv_516;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_517> AgradCdfLogBetaBinomial_fv_517;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_518> AgradCdfLogBetaBinomial_fv_518;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_519> AgradCdfLogBetaBinomial_fv_519;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_520> AgradCdfLogBetaBinomial_fv_520;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_521> AgradCdfLogBetaBinomial_fv_521;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_522> AgradCdfLogBetaBinomial_fv_522;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_523> AgradCdfLogBetaBinomial_fv_523;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_524> AgradCdfLogBetaBinomial_fv_524;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_525> AgradCdfLogBetaBinomial_fv_525;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_526> AgradCdfLogBetaBinomial_fv_526;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_527> AgradCdfLogBetaBinomial_fv_527;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_528> AgradCdfLogBetaBinomial_fv_528;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_529> AgradCdfLogBetaBinomial_fv_529;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_530> AgradCdfLogBetaBinomial_fv_530;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_531> AgradCdfLogBetaBinomial_fv_531;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_532> AgradCdfLogBetaBinomial_fv_532;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_533> AgradCdfLogBetaBinomial_fv_533;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_534> AgradCdfLogBetaBinomial_fv_534;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_535> AgradCdfLogBetaBinomial_fv_535;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_536> AgradCdfLogBetaBinomial_fv_536;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_537> AgradCdfLogBetaBinomial_fv_537;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_538> AgradCdfLogBetaBinomial_fv_538;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_539> AgradCdfLogBetaBinomial_fv_539;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_540> AgradCdfLogBetaBinomial_fv_540;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_541> AgradCdfLogBetaBinomial_fv_541;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_542> AgradCdfLogBetaBinomial_fv_542;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_543> AgradCdfLogBetaBinomial_fv_543;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_544> AgradCdfLogBetaBinomial_fv_544;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_545> AgradCdfLogBetaBinomial_fv_545;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_546> AgradCdfLogBetaBinomial_fv_546;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_547> AgradCdfLogBetaBinomial_fv_547;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_548> AgradCdfLogBetaBinomial_fv_548;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_549> AgradCdfLogBetaBinomial_fv_549;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_550> AgradCdfLogBetaBinomial_fv_550;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_551> AgradCdfLogBetaBinomial_fv_551;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_552> AgradCdfLogBetaBinomial_fv_552;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_553> AgradCdfLogBetaBinomial_fv_553;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_554> AgradCdfLogBetaBinomial_fv_554;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_555> AgradCdfLogBetaBinomial_fv_555;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_556> AgradCdfLogBetaBinomial_fv_556;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_557> AgradCdfLogBetaBinomial_fv_557;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_558> AgradCdfLogBetaBinomial_fv_558;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_559> AgradCdfLogBetaBinomial_fv_559;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_560> AgradCdfLogBetaBinomial_fv_560;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_561> AgradCdfLogBetaBinomial_fv_561;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_562> AgradCdfLogBetaBinomial_fv_562;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_563> AgradCdfLogBetaBinomial_fv_563;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_564> AgradCdfLogBetaBinomial_fv_564;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_565> AgradCdfLogBetaBinomial_fv_565;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_566> AgradCdfLogBetaBinomial_fv_566;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_567> AgradCdfLogBetaBinomial_fv_567;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_568> AgradCdfLogBetaBinomial_fv_568;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_569> AgradCdfLogBetaBinomial_fv_569;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_570> AgradCdfLogBetaBinomial_fv_570;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_571> AgradCdfLogBetaBinomial_fv_571;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_572> AgradCdfLogBetaBinomial_fv_572;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_573> AgradCdfLogBetaBinomial_fv_573;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_574> AgradCdfLogBetaBinomial_fv_574;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_575> AgradCdfLogBetaBinomial_fv_575;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_576> AgradCdfLogBetaBinomial_fv_576;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_577> AgradCdfLogBetaBinomial_fv_577;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_578> AgradCdfLogBetaBinomial_fv_578;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_579> AgradCdfLogBetaBinomial_fv_579;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_580> AgradCdfLogBetaBinomial_fv_580;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_581> AgradCdfLogBetaBinomial_fv_581;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_582> AgradCdfLogBetaBinomial_fv_582;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_583> AgradCdfLogBetaBinomial_fv_583;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_584> AgradCdfLogBetaBinomial_fv_584;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_585> AgradCdfLogBetaBinomial_fv_585;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_586> AgradCdfLogBetaBinomial_fv_586;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_587> AgradCdfLogBetaBinomial_fv_587;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_588> AgradCdfLogBetaBinomial_fv_588;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_589> AgradCdfLogBetaBinomial_fv_589;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_590> AgradCdfLogBetaBinomial_fv_590;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_591> AgradCdfLogBetaBinomial_fv_591;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_592> AgradCdfLogBetaBinomial_fv_592;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_593> AgradCdfLogBetaBinomial_fv_593;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_594> AgradCdfLogBetaBinomial_fv_594;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_595> AgradCdfLogBetaBinomial_fv_595;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_596> AgradCdfLogBetaBinomial_fv_596;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_597> AgradCdfLogBetaBinomial_fv_597;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_598> AgradCdfLogBetaBinomial_fv_598;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_599> AgradCdfLogBetaBinomial_fv_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_500, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_501, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_502, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_503, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_504, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_505, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_506, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_507, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_508, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_509, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_510, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_511, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_512, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_513, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_514, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_515, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_516, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_517, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_518, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_519, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_520, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_521, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_522, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_523, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_524, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_525, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_526, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_527, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_528, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_529, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_530, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_531, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_532, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_533, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_534, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_535, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_536, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_537, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_538, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_539, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_540, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_541, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_542, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_543, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_544, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_545, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_546, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_547, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_548, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_549, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_550, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_551, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_552, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_553, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_554, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_555, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_556, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_557, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_558, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_559, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_560, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_561, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_562, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_563, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_564, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_565, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_566, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_567, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_568, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_569, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_570, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_571, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_572, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_573, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_574, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_575, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_576, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_577, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_578, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_579, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_580, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_581, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_582, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_583, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_584, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_585, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_586, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_587, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_588, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_589, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_590, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_591, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_592, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_593, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_594, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_595, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_596, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_597, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_598, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_599, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_599);

