#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty> type_ffv_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty> type_ffv_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<fvar<var> >, empty, empty> type_ffv_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, double, empty, empty> type_ffv_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_599;

typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_500> AgradDistributionsBetaBinomial_ffv_500;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_501> AgradDistributionsBetaBinomial_ffv_501;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_502> AgradDistributionsBetaBinomial_ffv_502;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_503> AgradDistributionsBetaBinomial_ffv_503;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_504> AgradDistributionsBetaBinomial_ffv_504;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_505> AgradDistributionsBetaBinomial_ffv_505;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_506> AgradDistributionsBetaBinomial_ffv_506;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_507> AgradDistributionsBetaBinomial_ffv_507;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_508> AgradDistributionsBetaBinomial_ffv_508;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_509> AgradDistributionsBetaBinomial_ffv_509;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_510> AgradDistributionsBetaBinomial_ffv_510;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_511> AgradDistributionsBetaBinomial_ffv_511;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_512> AgradDistributionsBetaBinomial_ffv_512;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_513> AgradDistributionsBetaBinomial_ffv_513;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_514> AgradDistributionsBetaBinomial_ffv_514;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_515> AgradDistributionsBetaBinomial_ffv_515;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_516> AgradDistributionsBetaBinomial_ffv_516;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_517> AgradDistributionsBetaBinomial_ffv_517;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_518> AgradDistributionsBetaBinomial_ffv_518;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_519> AgradDistributionsBetaBinomial_ffv_519;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_520> AgradDistributionsBetaBinomial_ffv_520;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_521> AgradDistributionsBetaBinomial_ffv_521;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_522> AgradDistributionsBetaBinomial_ffv_522;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_523> AgradDistributionsBetaBinomial_ffv_523;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_524> AgradDistributionsBetaBinomial_ffv_524;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_525> AgradDistributionsBetaBinomial_ffv_525;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_526> AgradDistributionsBetaBinomial_ffv_526;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_527> AgradDistributionsBetaBinomial_ffv_527;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_528> AgradDistributionsBetaBinomial_ffv_528;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_529> AgradDistributionsBetaBinomial_ffv_529;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_530> AgradDistributionsBetaBinomial_ffv_530;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_531> AgradDistributionsBetaBinomial_ffv_531;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_532> AgradDistributionsBetaBinomial_ffv_532;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_533> AgradDistributionsBetaBinomial_ffv_533;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_534> AgradDistributionsBetaBinomial_ffv_534;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_535> AgradDistributionsBetaBinomial_ffv_535;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_536> AgradDistributionsBetaBinomial_ffv_536;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_537> AgradDistributionsBetaBinomial_ffv_537;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_538> AgradDistributionsBetaBinomial_ffv_538;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_539> AgradDistributionsBetaBinomial_ffv_539;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_540> AgradDistributionsBetaBinomial_ffv_540;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_541> AgradDistributionsBetaBinomial_ffv_541;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_542> AgradDistributionsBetaBinomial_ffv_542;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_543> AgradDistributionsBetaBinomial_ffv_543;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_544> AgradDistributionsBetaBinomial_ffv_544;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_545> AgradDistributionsBetaBinomial_ffv_545;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_546> AgradDistributionsBetaBinomial_ffv_546;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_547> AgradDistributionsBetaBinomial_ffv_547;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_548> AgradDistributionsBetaBinomial_ffv_548;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_549> AgradDistributionsBetaBinomial_ffv_549;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_550> AgradDistributionsBetaBinomial_ffv_550;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_551> AgradDistributionsBetaBinomial_ffv_551;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_552> AgradDistributionsBetaBinomial_ffv_552;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_553> AgradDistributionsBetaBinomial_ffv_553;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_554> AgradDistributionsBetaBinomial_ffv_554;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_555> AgradDistributionsBetaBinomial_ffv_555;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_556> AgradDistributionsBetaBinomial_ffv_556;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_557> AgradDistributionsBetaBinomial_ffv_557;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_558> AgradDistributionsBetaBinomial_ffv_558;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_559> AgradDistributionsBetaBinomial_ffv_559;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_560> AgradDistributionsBetaBinomial_ffv_560;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_561> AgradDistributionsBetaBinomial_ffv_561;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_562> AgradDistributionsBetaBinomial_ffv_562;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_563> AgradDistributionsBetaBinomial_ffv_563;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_564> AgradDistributionsBetaBinomial_ffv_564;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_565> AgradDistributionsBetaBinomial_ffv_565;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_566> AgradDistributionsBetaBinomial_ffv_566;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_567> AgradDistributionsBetaBinomial_ffv_567;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_568> AgradDistributionsBetaBinomial_ffv_568;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_569> AgradDistributionsBetaBinomial_ffv_569;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_570> AgradDistributionsBetaBinomial_ffv_570;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_571> AgradDistributionsBetaBinomial_ffv_571;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_572> AgradDistributionsBetaBinomial_ffv_572;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_573> AgradDistributionsBetaBinomial_ffv_573;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_574> AgradDistributionsBetaBinomial_ffv_574;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_575> AgradDistributionsBetaBinomial_ffv_575;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_576> AgradDistributionsBetaBinomial_ffv_576;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_577> AgradDistributionsBetaBinomial_ffv_577;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_578> AgradDistributionsBetaBinomial_ffv_578;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_579> AgradDistributionsBetaBinomial_ffv_579;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_580> AgradDistributionsBetaBinomial_ffv_580;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_581> AgradDistributionsBetaBinomial_ffv_581;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_582> AgradDistributionsBetaBinomial_ffv_582;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_583> AgradDistributionsBetaBinomial_ffv_583;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_584> AgradDistributionsBetaBinomial_ffv_584;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_585> AgradDistributionsBetaBinomial_ffv_585;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_586> AgradDistributionsBetaBinomial_ffv_586;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_587> AgradDistributionsBetaBinomial_ffv_587;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_588> AgradDistributionsBetaBinomial_ffv_588;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_589> AgradDistributionsBetaBinomial_ffv_589;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_590> AgradDistributionsBetaBinomial_ffv_590;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_591> AgradDistributionsBetaBinomial_ffv_591;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_592> AgradDistributionsBetaBinomial_ffv_592;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_593> AgradDistributionsBetaBinomial_ffv_593;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_594> AgradDistributionsBetaBinomial_ffv_594;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_595> AgradDistributionsBetaBinomial_ffv_595;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_596> AgradDistributionsBetaBinomial_ffv_596;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_597> AgradDistributionsBetaBinomial_ffv_597;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_598> AgradDistributionsBetaBinomial_ffv_598;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_599> AgradDistributionsBetaBinomial_ffv_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_500, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_501, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_502, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_503, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_504, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_505, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_506, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_507, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_508, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_509, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_510, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_511, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_512, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_513, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_514, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_515, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_516, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_517, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_518, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_519, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_520, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_521, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_522, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_523, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_524, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_525, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_526, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_527, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_528, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_529, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_530, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_531, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_532, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_533, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_534, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_535, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_536, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_537, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_538, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_539, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_540, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_541, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_542, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_543, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_544, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_545, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_546, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_547, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_548, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_549, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_550, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_551, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_552, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_553, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_554, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_555, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_556, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_557, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_558, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_559, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_560, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_561, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_562, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_563, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_564, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_565, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_566, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_567, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_568, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_569, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_570, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_571, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_572, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_573, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_574, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_575, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_576, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_577, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_578, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_579, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_580, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_581, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_582, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_583, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_584, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_585, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_586, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_587, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_588, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_589, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_590, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_591, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_592, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_593, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_594, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_595, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_596, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_597, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_598, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_599, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_599);

