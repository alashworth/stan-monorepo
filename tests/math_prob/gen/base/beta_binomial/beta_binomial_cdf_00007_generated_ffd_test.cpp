#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_767;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_700> AgradCdfBetaBinomial_ffd_700;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_701> AgradCdfBetaBinomial_ffd_701;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_702> AgradCdfBetaBinomial_ffd_702;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_703> AgradCdfBetaBinomial_ffd_703;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_704> AgradCdfBetaBinomial_ffd_704;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_705> AgradCdfBetaBinomial_ffd_705;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_706> AgradCdfBetaBinomial_ffd_706;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_707> AgradCdfBetaBinomial_ffd_707;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_708> AgradCdfBetaBinomial_ffd_708;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_709> AgradCdfBetaBinomial_ffd_709;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_710> AgradCdfBetaBinomial_ffd_710;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_711> AgradCdfBetaBinomial_ffd_711;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_712> AgradCdfBetaBinomial_ffd_712;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_713> AgradCdfBetaBinomial_ffd_713;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_714> AgradCdfBetaBinomial_ffd_714;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_715> AgradCdfBetaBinomial_ffd_715;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_716> AgradCdfBetaBinomial_ffd_716;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_717> AgradCdfBetaBinomial_ffd_717;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_718> AgradCdfBetaBinomial_ffd_718;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_719> AgradCdfBetaBinomial_ffd_719;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_720> AgradCdfBetaBinomial_ffd_720;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_721> AgradCdfBetaBinomial_ffd_721;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_722> AgradCdfBetaBinomial_ffd_722;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_723> AgradCdfBetaBinomial_ffd_723;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_724> AgradCdfBetaBinomial_ffd_724;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_725> AgradCdfBetaBinomial_ffd_725;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_726> AgradCdfBetaBinomial_ffd_726;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_727> AgradCdfBetaBinomial_ffd_727;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_728> AgradCdfBetaBinomial_ffd_728;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_729> AgradCdfBetaBinomial_ffd_729;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_730> AgradCdfBetaBinomial_ffd_730;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_731> AgradCdfBetaBinomial_ffd_731;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_732> AgradCdfBetaBinomial_ffd_732;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_733> AgradCdfBetaBinomial_ffd_733;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_734> AgradCdfBetaBinomial_ffd_734;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_735> AgradCdfBetaBinomial_ffd_735;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_736> AgradCdfBetaBinomial_ffd_736;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_737> AgradCdfBetaBinomial_ffd_737;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_738> AgradCdfBetaBinomial_ffd_738;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_739> AgradCdfBetaBinomial_ffd_739;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_740> AgradCdfBetaBinomial_ffd_740;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_741> AgradCdfBetaBinomial_ffd_741;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_742> AgradCdfBetaBinomial_ffd_742;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_743> AgradCdfBetaBinomial_ffd_743;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_744> AgradCdfBetaBinomial_ffd_744;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_745> AgradCdfBetaBinomial_ffd_745;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_746> AgradCdfBetaBinomial_ffd_746;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_747> AgradCdfBetaBinomial_ffd_747;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_748> AgradCdfBetaBinomial_ffd_748;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_749> AgradCdfBetaBinomial_ffd_749;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_750> AgradCdfBetaBinomial_ffd_750;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_751> AgradCdfBetaBinomial_ffd_751;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_752> AgradCdfBetaBinomial_ffd_752;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_753> AgradCdfBetaBinomial_ffd_753;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_754> AgradCdfBetaBinomial_ffd_754;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_755> AgradCdfBetaBinomial_ffd_755;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_756> AgradCdfBetaBinomial_ffd_756;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_757> AgradCdfBetaBinomial_ffd_757;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_758> AgradCdfBetaBinomial_ffd_758;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_759> AgradCdfBetaBinomial_ffd_759;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_760> AgradCdfBetaBinomial_ffd_760;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_761> AgradCdfBetaBinomial_ffd_761;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_762> AgradCdfBetaBinomial_ffd_762;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_763> AgradCdfBetaBinomial_ffd_763;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_764> AgradCdfBetaBinomial_ffd_764;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_765> AgradCdfBetaBinomial_ffd_765;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_766> AgradCdfBetaBinomial_ffd_766;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_767> AgradCdfBetaBinomial_ffd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_700, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_701, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_702, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_703, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_704, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_705, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_706, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_707, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_708, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_709, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_710, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_711, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_712, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_713, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_714, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_715, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_716, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_717, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_718, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_719, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_720, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_721, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_722, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_723, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_724, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_725, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_726, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_727, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_728, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_729, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_730, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_731, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_732, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_733, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_734, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_735, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_736, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_737, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_738, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_739, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_740, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_741, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_742, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_743, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_744, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_745, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_746, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_747, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_748, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_749, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_750, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_751, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_752, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_753, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_754, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_755, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_756, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_757, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_758, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_759, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_760, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_761, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_762, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_763, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_764, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_765, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_766, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_767, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_767);

