#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<fvar<double> >, empty, empty> type_ffd_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_599;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_500> AgradCdfLogBetaBinomial_ffd_500;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_501> AgradCdfLogBetaBinomial_ffd_501;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_502> AgradCdfLogBetaBinomial_ffd_502;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_503> AgradCdfLogBetaBinomial_ffd_503;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_504> AgradCdfLogBetaBinomial_ffd_504;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_505> AgradCdfLogBetaBinomial_ffd_505;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_506> AgradCdfLogBetaBinomial_ffd_506;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_507> AgradCdfLogBetaBinomial_ffd_507;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_508> AgradCdfLogBetaBinomial_ffd_508;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_509> AgradCdfLogBetaBinomial_ffd_509;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_510> AgradCdfLogBetaBinomial_ffd_510;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_511> AgradCdfLogBetaBinomial_ffd_511;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_512> AgradCdfLogBetaBinomial_ffd_512;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_513> AgradCdfLogBetaBinomial_ffd_513;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_514> AgradCdfLogBetaBinomial_ffd_514;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_515> AgradCdfLogBetaBinomial_ffd_515;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_516> AgradCdfLogBetaBinomial_ffd_516;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_517> AgradCdfLogBetaBinomial_ffd_517;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_518> AgradCdfLogBetaBinomial_ffd_518;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_519> AgradCdfLogBetaBinomial_ffd_519;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_520> AgradCdfLogBetaBinomial_ffd_520;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_521> AgradCdfLogBetaBinomial_ffd_521;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_522> AgradCdfLogBetaBinomial_ffd_522;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_523> AgradCdfLogBetaBinomial_ffd_523;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_524> AgradCdfLogBetaBinomial_ffd_524;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_525> AgradCdfLogBetaBinomial_ffd_525;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_526> AgradCdfLogBetaBinomial_ffd_526;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_527> AgradCdfLogBetaBinomial_ffd_527;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_528> AgradCdfLogBetaBinomial_ffd_528;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_529> AgradCdfLogBetaBinomial_ffd_529;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_530> AgradCdfLogBetaBinomial_ffd_530;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_531> AgradCdfLogBetaBinomial_ffd_531;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_532> AgradCdfLogBetaBinomial_ffd_532;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_533> AgradCdfLogBetaBinomial_ffd_533;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_534> AgradCdfLogBetaBinomial_ffd_534;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_535> AgradCdfLogBetaBinomial_ffd_535;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_536> AgradCdfLogBetaBinomial_ffd_536;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_537> AgradCdfLogBetaBinomial_ffd_537;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_538> AgradCdfLogBetaBinomial_ffd_538;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_539> AgradCdfLogBetaBinomial_ffd_539;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_540> AgradCdfLogBetaBinomial_ffd_540;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_541> AgradCdfLogBetaBinomial_ffd_541;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_542> AgradCdfLogBetaBinomial_ffd_542;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_543> AgradCdfLogBetaBinomial_ffd_543;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_544> AgradCdfLogBetaBinomial_ffd_544;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_545> AgradCdfLogBetaBinomial_ffd_545;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_546> AgradCdfLogBetaBinomial_ffd_546;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_547> AgradCdfLogBetaBinomial_ffd_547;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_548> AgradCdfLogBetaBinomial_ffd_548;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_549> AgradCdfLogBetaBinomial_ffd_549;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_550> AgradCdfLogBetaBinomial_ffd_550;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_551> AgradCdfLogBetaBinomial_ffd_551;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_552> AgradCdfLogBetaBinomial_ffd_552;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_553> AgradCdfLogBetaBinomial_ffd_553;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_554> AgradCdfLogBetaBinomial_ffd_554;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_555> AgradCdfLogBetaBinomial_ffd_555;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_556> AgradCdfLogBetaBinomial_ffd_556;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_557> AgradCdfLogBetaBinomial_ffd_557;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_558> AgradCdfLogBetaBinomial_ffd_558;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_559> AgradCdfLogBetaBinomial_ffd_559;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_560> AgradCdfLogBetaBinomial_ffd_560;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_561> AgradCdfLogBetaBinomial_ffd_561;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_562> AgradCdfLogBetaBinomial_ffd_562;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_563> AgradCdfLogBetaBinomial_ffd_563;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_564> AgradCdfLogBetaBinomial_ffd_564;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_565> AgradCdfLogBetaBinomial_ffd_565;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_566> AgradCdfLogBetaBinomial_ffd_566;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_567> AgradCdfLogBetaBinomial_ffd_567;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_568> AgradCdfLogBetaBinomial_ffd_568;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_569> AgradCdfLogBetaBinomial_ffd_569;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_570> AgradCdfLogBetaBinomial_ffd_570;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_571> AgradCdfLogBetaBinomial_ffd_571;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_572> AgradCdfLogBetaBinomial_ffd_572;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_573> AgradCdfLogBetaBinomial_ffd_573;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_574> AgradCdfLogBetaBinomial_ffd_574;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_575> AgradCdfLogBetaBinomial_ffd_575;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_576> AgradCdfLogBetaBinomial_ffd_576;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_577> AgradCdfLogBetaBinomial_ffd_577;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_578> AgradCdfLogBetaBinomial_ffd_578;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_579> AgradCdfLogBetaBinomial_ffd_579;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_580> AgradCdfLogBetaBinomial_ffd_580;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_581> AgradCdfLogBetaBinomial_ffd_581;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_582> AgradCdfLogBetaBinomial_ffd_582;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_583> AgradCdfLogBetaBinomial_ffd_583;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_584> AgradCdfLogBetaBinomial_ffd_584;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_585> AgradCdfLogBetaBinomial_ffd_585;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_586> AgradCdfLogBetaBinomial_ffd_586;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_587> AgradCdfLogBetaBinomial_ffd_587;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_588> AgradCdfLogBetaBinomial_ffd_588;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_589> AgradCdfLogBetaBinomial_ffd_589;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_590> AgradCdfLogBetaBinomial_ffd_590;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_591> AgradCdfLogBetaBinomial_ffd_591;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_592> AgradCdfLogBetaBinomial_ffd_592;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_593> AgradCdfLogBetaBinomial_ffd_593;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_594> AgradCdfLogBetaBinomial_ffd_594;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_595> AgradCdfLogBetaBinomial_ffd_595;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_596> AgradCdfLogBetaBinomial_ffd_596;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_597> AgradCdfLogBetaBinomial_ffd_597;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_598> AgradCdfLogBetaBinomial_ffd_598;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_599> AgradCdfLogBetaBinomial_ffd_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_500, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_501, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_502, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_503, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_504, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_505, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_506, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_507, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_508, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_509, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_510, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_511, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_512, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_513, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_514, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_515, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_516, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_517, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_518, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_519, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_520, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_521, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_522, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_523, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_524, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_525, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_526, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_527, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_528, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_529, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_530, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_531, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_532, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_533, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_534, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_535, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_536, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_537, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_538, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_539, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_540, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_541, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_542, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_543, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_544, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_545, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_546, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_547, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_548, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_549, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_550, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_551, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_552, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_553, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_554, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_555, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_556, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_557, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_558, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_559, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_560, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_561, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_562, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_563, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_564, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_565, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_566, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_567, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_568, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_569, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_570, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_571, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_572, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_573, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_574, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_575, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_576, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_577, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_578, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_579, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_580, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_581, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_582, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_583, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_584, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_585, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_586, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_587, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_588, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_589, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_590, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_591, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_592, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_593, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_594, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_595, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_596, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_597, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_598, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_599, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_599);

