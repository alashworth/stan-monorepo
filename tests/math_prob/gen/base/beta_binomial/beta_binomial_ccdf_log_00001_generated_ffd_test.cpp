#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_200;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_201;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_202;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_203;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_204;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_205;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_206;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_207;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_208;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_209;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_210;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_211;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_212;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_213;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_214;
typedef boost::mpl::vector<std::vector<int>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_215;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_216;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_217;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_218;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_219;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_220;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_221;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_222;
typedef boost::mpl::vector<std::vector<int>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_223;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_224;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_225;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_226;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_227;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_228;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_229;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_230;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_231;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_232;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_233;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_234;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_235;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_236;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_237;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_238;
typedef boost::mpl::vector<std::vector<int>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_239;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_240;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_241;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_242;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_243;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_244;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_245;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_246;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_247;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_248;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_249;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_250;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_251;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_252;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_253;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_254;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_255;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_256;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_257;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_258;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_259;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_260;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_261;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_262;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_263;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_264;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_265;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_266;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_267;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_268;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_269;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_270;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_271;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_272;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_273;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_274;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_275;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_276;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_277;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_278;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_279;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_280;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_281;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_282;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_283;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_284;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_285;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_286;
typedef boost::mpl::vector<std::vector<int>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_287;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_288;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_289;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_290;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_291;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_292;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_293;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_294;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_295;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_296;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_297;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_298;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_299;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_300;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_301;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_302;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_303;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_304;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_305;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_306;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_307;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_308;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_309;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_310;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_311;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_312;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_313;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_314;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_315;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_316;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_317;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_318;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_319;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_320;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_321;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_322;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_323;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_324;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_325;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_326;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_327;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_328;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_329;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_330;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_331;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_332;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_333;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_334;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_335;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_336;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_337;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_338;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_339;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_340;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_341;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_342;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_343;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_344;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_345;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_346;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_347;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_348;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_349;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_350;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_351;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_352;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_353;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_354;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_355;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_356;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_357;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_358;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_359;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_360;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_361;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_362;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_363;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_364;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_365;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_366;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_367;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_368;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_369;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_370;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_371;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_372;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_373;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_374;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_375;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_376;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_377;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_378;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_379;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_380;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_381;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_382;
typedef boost::mpl::vector<std::vector<int>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_383;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, double, fvar<fvar<double> >, empty, empty> type_ffd_384;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_385;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_386;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_387;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_388;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_389;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_390;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_391;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_392;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_393;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_394;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_395;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_396;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_397;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_398;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_399;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_200> AgradCcdfLogBetaBinomial_ffd_200;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_201> AgradCcdfLogBetaBinomial_ffd_201;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_202> AgradCcdfLogBetaBinomial_ffd_202;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_203> AgradCcdfLogBetaBinomial_ffd_203;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_204> AgradCcdfLogBetaBinomial_ffd_204;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_205> AgradCcdfLogBetaBinomial_ffd_205;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_206> AgradCcdfLogBetaBinomial_ffd_206;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_207> AgradCcdfLogBetaBinomial_ffd_207;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_208> AgradCcdfLogBetaBinomial_ffd_208;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_209> AgradCcdfLogBetaBinomial_ffd_209;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_210> AgradCcdfLogBetaBinomial_ffd_210;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_211> AgradCcdfLogBetaBinomial_ffd_211;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_212> AgradCcdfLogBetaBinomial_ffd_212;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_213> AgradCcdfLogBetaBinomial_ffd_213;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_214> AgradCcdfLogBetaBinomial_ffd_214;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_215> AgradCcdfLogBetaBinomial_ffd_215;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_216> AgradCcdfLogBetaBinomial_ffd_216;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_217> AgradCcdfLogBetaBinomial_ffd_217;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_218> AgradCcdfLogBetaBinomial_ffd_218;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_219> AgradCcdfLogBetaBinomial_ffd_219;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_220> AgradCcdfLogBetaBinomial_ffd_220;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_221> AgradCcdfLogBetaBinomial_ffd_221;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_222> AgradCcdfLogBetaBinomial_ffd_222;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_223> AgradCcdfLogBetaBinomial_ffd_223;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_224> AgradCcdfLogBetaBinomial_ffd_224;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_225> AgradCcdfLogBetaBinomial_ffd_225;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_226> AgradCcdfLogBetaBinomial_ffd_226;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_227> AgradCcdfLogBetaBinomial_ffd_227;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_228> AgradCcdfLogBetaBinomial_ffd_228;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_229> AgradCcdfLogBetaBinomial_ffd_229;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_230> AgradCcdfLogBetaBinomial_ffd_230;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_231> AgradCcdfLogBetaBinomial_ffd_231;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_232> AgradCcdfLogBetaBinomial_ffd_232;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_233> AgradCcdfLogBetaBinomial_ffd_233;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_234> AgradCcdfLogBetaBinomial_ffd_234;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_235> AgradCcdfLogBetaBinomial_ffd_235;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_236> AgradCcdfLogBetaBinomial_ffd_236;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_237> AgradCcdfLogBetaBinomial_ffd_237;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_238> AgradCcdfLogBetaBinomial_ffd_238;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_239> AgradCcdfLogBetaBinomial_ffd_239;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_240> AgradCcdfLogBetaBinomial_ffd_240;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_241> AgradCcdfLogBetaBinomial_ffd_241;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_242> AgradCcdfLogBetaBinomial_ffd_242;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_243> AgradCcdfLogBetaBinomial_ffd_243;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_244> AgradCcdfLogBetaBinomial_ffd_244;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_245> AgradCcdfLogBetaBinomial_ffd_245;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_246> AgradCcdfLogBetaBinomial_ffd_246;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_247> AgradCcdfLogBetaBinomial_ffd_247;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_248> AgradCcdfLogBetaBinomial_ffd_248;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_249> AgradCcdfLogBetaBinomial_ffd_249;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_250> AgradCcdfLogBetaBinomial_ffd_250;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_251> AgradCcdfLogBetaBinomial_ffd_251;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_252> AgradCcdfLogBetaBinomial_ffd_252;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_253> AgradCcdfLogBetaBinomial_ffd_253;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_254> AgradCcdfLogBetaBinomial_ffd_254;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_255> AgradCcdfLogBetaBinomial_ffd_255;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_256> AgradCcdfLogBetaBinomial_ffd_256;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_257> AgradCcdfLogBetaBinomial_ffd_257;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_258> AgradCcdfLogBetaBinomial_ffd_258;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_259> AgradCcdfLogBetaBinomial_ffd_259;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_260> AgradCcdfLogBetaBinomial_ffd_260;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_261> AgradCcdfLogBetaBinomial_ffd_261;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_262> AgradCcdfLogBetaBinomial_ffd_262;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_263> AgradCcdfLogBetaBinomial_ffd_263;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_264> AgradCcdfLogBetaBinomial_ffd_264;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_265> AgradCcdfLogBetaBinomial_ffd_265;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_266> AgradCcdfLogBetaBinomial_ffd_266;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_267> AgradCcdfLogBetaBinomial_ffd_267;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_268> AgradCcdfLogBetaBinomial_ffd_268;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_269> AgradCcdfLogBetaBinomial_ffd_269;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_270> AgradCcdfLogBetaBinomial_ffd_270;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_271> AgradCcdfLogBetaBinomial_ffd_271;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_272> AgradCcdfLogBetaBinomial_ffd_272;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_273> AgradCcdfLogBetaBinomial_ffd_273;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_274> AgradCcdfLogBetaBinomial_ffd_274;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_275> AgradCcdfLogBetaBinomial_ffd_275;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_276> AgradCcdfLogBetaBinomial_ffd_276;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_277> AgradCcdfLogBetaBinomial_ffd_277;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_278> AgradCcdfLogBetaBinomial_ffd_278;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_279> AgradCcdfLogBetaBinomial_ffd_279;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_280> AgradCcdfLogBetaBinomial_ffd_280;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_281> AgradCcdfLogBetaBinomial_ffd_281;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_282> AgradCcdfLogBetaBinomial_ffd_282;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_283> AgradCcdfLogBetaBinomial_ffd_283;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_284> AgradCcdfLogBetaBinomial_ffd_284;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_285> AgradCcdfLogBetaBinomial_ffd_285;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_286> AgradCcdfLogBetaBinomial_ffd_286;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_287> AgradCcdfLogBetaBinomial_ffd_287;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_288> AgradCcdfLogBetaBinomial_ffd_288;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_289> AgradCcdfLogBetaBinomial_ffd_289;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_290> AgradCcdfLogBetaBinomial_ffd_290;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_291> AgradCcdfLogBetaBinomial_ffd_291;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_292> AgradCcdfLogBetaBinomial_ffd_292;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_293> AgradCcdfLogBetaBinomial_ffd_293;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_294> AgradCcdfLogBetaBinomial_ffd_294;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_295> AgradCcdfLogBetaBinomial_ffd_295;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_296> AgradCcdfLogBetaBinomial_ffd_296;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_297> AgradCcdfLogBetaBinomial_ffd_297;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_298> AgradCcdfLogBetaBinomial_ffd_298;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_299> AgradCcdfLogBetaBinomial_ffd_299;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_300> AgradCcdfLogBetaBinomial_ffd_300;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_301> AgradCcdfLogBetaBinomial_ffd_301;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_302> AgradCcdfLogBetaBinomial_ffd_302;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_303> AgradCcdfLogBetaBinomial_ffd_303;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_304> AgradCcdfLogBetaBinomial_ffd_304;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_305> AgradCcdfLogBetaBinomial_ffd_305;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_306> AgradCcdfLogBetaBinomial_ffd_306;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_307> AgradCcdfLogBetaBinomial_ffd_307;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_308> AgradCcdfLogBetaBinomial_ffd_308;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_309> AgradCcdfLogBetaBinomial_ffd_309;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_310> AgradCcdfLogBetaBinomial_ffd_310;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_311> AgradCcdfLogBetaBinomial_ffd_311;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_312> AgradCcdfLogBetaBinomial_ffd_312;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_313> AgradCcdfLogBetaBinomial_ffd_313;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_314> AgradCcdfLogBetaBinomial_ffd_314;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_315> AgradCcdfLogBetaBinomial_ffd_315;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_316> AgradCcdfLogBetaBinomial_ffd_316;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_317> AgradCcdfLogBetaBinomial_ffd_317;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_318> AgradCcdfLogBetaBinomial_ffd_318;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_319> AgradCcdfLogBetaBinomial_ffd_319;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_320> AgradCcdfLogBetaBinomial_ffd_320;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_321> AgradCcdfLogBetaBinomial_ffd_321;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_322> AgradCcdfLogBetaBinomial_ffd_322;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_323> AgradCcdfLogBetaBinomial_ffd_323;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_324> AgradCcdfLogBetaBinomial_ffd_324;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_325> AgradCcdfLogBetaBinomial_ffd_325;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_326> AgradCcdfLogBetaBinomial_ffd_326;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_327> AgradCcdfLogBetaBinomial_ffd_327;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_328> AgradCcdfLogBetaBinomial_ffd_328;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_329> AgradCcdfLogBetaBinomial_ffd_329;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_330> AgradCcdfLogBetaBinomial_ffd_330;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_331> AgradCcdfLogBetaBinomial_ffd_331;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_332> AgradCcdfLogBetaBinomial_ffd_332;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_333> AgradCcdfLogBetaBinomial_ffd_333;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_334> AgradCcdfLogBetaBinomial_ffd_334;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_335> AgradCcdfLogBetaBinomial_ffd_335;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_336> AgradCcdfLogBetaBinomial_ffd_336;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_337> AgradCcdfLogBetaBinomial_ffd_337;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_338> AgradCcdfLogBetaBinomial_ffd_338;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_339> AgradCcdfLogBetaBinomial_ffd_339;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_340> AgradCcdfLogBetaBinomial_ffd_340;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_341> AgradCcdfLogBetaBinomial_ffd_341;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_342> AgradCcdfLogBetaBinomial_ffd_342;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_343> AgradCcdfLogBetaBinomial_ffd_343;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_344> AgradCcdfLogBetaBinomial_ffd_344;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_345> AgradCcdfLogBetaBinomial_ffd_345;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_346> AgradCcdfLogBetaBinomial_ffd_346;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_347> AgradCcdfLogBetaBinomial_ffd_347;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_348> AgradCcdfLogBetaBinomial_ffd_348;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_349> AgradCcdfLogBetaBinomial_ffd_349;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_350> AgradCcdfLogBetaBinomial_ffd_350;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_351> AgradCcdfLogBetaBinomial_ffd_351;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_352> AgradCcdfLogBetaBinomial_ffd_352;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_353> AgradCcdfLogBetaBinomial_ffd_353;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_354> AgradCcdfLogBetaBinomial_ffd_354;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_355> AgradCcdfLogBetaBinomial_ffd_355;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_356> AgradCcdfLogBetaBinomial_ffd_356;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_357> AgradCcdfLogBetaBinomial_ffd_357;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_358> AgradCcdfLogBetaBinomial_ffd_358;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_359> AgradCcdfLogBetaBinomial_ffd_359;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_360> AgradCcdfLogBetaBinomial_ffd_360;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_361> AgradCcdfLogBetaBinomial_ffd_361;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_362> AgradCcdfLogBetaBinomial_ffd_362;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_363> AgradCcdfLogBetaBinomial_ffd_363;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_364> AgradCcdfLogBetaBinomial_ffd_364;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_365> AgradCcdfLogBetaBinomial_ffd_365;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_366> AgradCcdfLogBetaBinomial_ffd_366;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_367> AgradCcdfLogBetaBinomial_ffd_367;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_368> AgradCcdfLogBetaBinomial_ffd_368;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_369> AgradCcdfLogBetaBinomial_ffd_369;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_370> AgradCcdfLogBetaBinomial_ffd_370;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_371> AgradCcdfLogBetaBinomial_ffd_371;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_372> AgradCcdfLogBetaBinomial_ffd_372;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_373> AgradCcdfLogBetaBinomial_ffd_373;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_374> AgradCcdfLogBetaBinomial_ffd_374;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_375> AgradCcdfLogBetaBinomial_ffd_375;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_376> AgradCcdfLogBetaBinomial_ffd_376;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_377> AgradCcdfLogBetaBinomial_ffd_377;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_378> AgradCcdfLogBetaBinomial_ffd_378;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_379> AgradCcdfLogBetaBinomial_ffd_379;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_380> AgradCcdfLogBetaBinomial_ffd_380;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_381> AgradCcdfLogBetaBinomial_ffd_381;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_382> AgradCcdfLogBetaBinomial_ffd_382;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_383> AgradCcdfLogBetaBinomial_ffd_383;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_384> AgradCcdfLogBetaBinomial_ffd_384;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_385> AgradCcdfLogBetaBinomial_ffd_385;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_386> AgradCcdfLogBetaBinomial_ffd_386;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_387> AgradCcdfLogBetaBinomial_ffd_387;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_388> AgradCcdfLogBetaBinomial_ffd_388;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_389> AgradCcdfLogBetaBinomial_ffd_389;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_390> AgradCcdfLogBetaBinomial_ffd_390;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_391> AgradCcdfLogBetaBinomial_ffd_391;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_392> AgradCcdfLogBetaBinomial_ffd_392;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_393> AgradCcdfLogBetaBinomial_ffd_393;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_394> AgradCcdfLogBetaBinomial_ffd_394;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_395> AgradCcdfLogBetaBinomial_ffd_395;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_396> AgradCcdfLogBetaBinomial_ffd_396;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_397> AgradCcdfLogBetaBinomial_ffd_397;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_398> AgradCcdfLogBetaBinomial_ffd_398;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_399> AgradCcdfLogBetaBinomial_ffd_399;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_200, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_200);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_201, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_201);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_202, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_202);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_203, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_203);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_204, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_204);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_205, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_205);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_206, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_206);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_207, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_207);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_208, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_208);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_209, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_209);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_210, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_210);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_211, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_211);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_212, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_212);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_213, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_213);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_214, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_214);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_215, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_215);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_216, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_216);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_217, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_217);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_218, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_218);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_219, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_219);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_220, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_220);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_221, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_221);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_222, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_222);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_223, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_223);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_224, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_224);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_225, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_225);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_226, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_226);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_227, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_227);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_228, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_228);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_229, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_229);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_230, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_230);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_231, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_231);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_232, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_232);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_233, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_233);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_234, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_234);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_235, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_235);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_236, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_236);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_237, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_237);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_238, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_238);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_239, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_239);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_240, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_240);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_241, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_241);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_242, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_242);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_243, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_243);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_244, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_244);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_245, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_245);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_246, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_246);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_247, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_247);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_248, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_248);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_249, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_249);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_250, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_250);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_251, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_251);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_252, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_252);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_253, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_253);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_254, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_254);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_255, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_255);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_256, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_256);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_257, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_257);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_258, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_258);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_259, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_259);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_260, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_260);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_261, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_261);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_262, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_262);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_263, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_263);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_264, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_264);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_265, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_265);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_266, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_266);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_267, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_267);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_268, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_268);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_269, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_269);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_270, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_270);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_271, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_271);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_272, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_272);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_273, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_273);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_274, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_274);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_275, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_275);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_276, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_276);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_277, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_277);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_278, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_278);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_279, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_279);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_280, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_280);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_281, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_281);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_282, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_282);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_283, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_283);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_284, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_284);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_285, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_285);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_286, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_286);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_287, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_287);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_288, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_288);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_289, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_289);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_290, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_290);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_291, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_291);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_292, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_292);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_293, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_293);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_294, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_294);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_295, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_295);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_296, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_296);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_297, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_297);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_298, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_298);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_299, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_299);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_300, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_300);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_301, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_301);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_302, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_302);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_303, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_303);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_304, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_304);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_305, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_305);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_306, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_306);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_307, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_307);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_308, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_308);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_309, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_309);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_310, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_310);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_311, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_311);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_312, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_312);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_313, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_313);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_314, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_314);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_315, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_315);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_316, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_316);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_317, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_317);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_318, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_318);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_319, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_319);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_320, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_320);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_321, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_321);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_322, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_322);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_323, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_323);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_324, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_324);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_325, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_325);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_326, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_326);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_327, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_327);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_328, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_328);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_329, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_329);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_330, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_330);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_331, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_331);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_332, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_332);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_333, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_333);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_334, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_334);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_335, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_335);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_336, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_336);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_337, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_337);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_338, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_338);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_339, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_339);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_340, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_340);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_341, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_341);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_342, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_342);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_343, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_343);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_344, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_344);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_345, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_345);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_346, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_346);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_347, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_347);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_348, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_348);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_349, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_349);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_350, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_350);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_351, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_351);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_352, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_352);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_353, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_353);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_354, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_354);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_355, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_355);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_356, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_356);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_357, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_357);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_358, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_358);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_359, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_359);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_360, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_360);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_361, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_361);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_362, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_362);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_363, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_363);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_364, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_364);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_365, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_365);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_366, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_366);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_367, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_367);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_368, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_368);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_369, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_369);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_370, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_370);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_371, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_371);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_372, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_372);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_373, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_373);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_374, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_374);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_375, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_375);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_376, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_376);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_377, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_377);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_378, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_378);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_379, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_379);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_380, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_380);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_381, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_381);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_382, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_382);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_383, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_383);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_384, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_384);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_385, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_385);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_386, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_386);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_387, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_387);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_388, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_388);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_389, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_389);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_390, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_390);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_391, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_391);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_392, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_392);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_393, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_393);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_394, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_394);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_395, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_395);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_396, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_396);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_397, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_397);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_398, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_398);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_399, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_399);

