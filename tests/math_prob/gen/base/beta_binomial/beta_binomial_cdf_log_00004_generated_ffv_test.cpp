#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, double, empty, empty> type_ffv_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<fvar<var> >, empty, empty> type_ffv_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, double, empty, empty> type_ffv_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<var> >, empty, empty> type_ffv_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, double, empty, empty> type_ffv_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_499;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_400> AgradCdfLogBetaBinomial_ffv_400;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_401> AgradCdfLogBetaBinomial_ffv_401;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_402> AgradCdfLogBetaBinomial_ffv_402;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_403> AgradCdfLogBetaBinomial_ffv_403;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_404> AgradCdfLogBetaBinomial_ffv_404;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_405> AgradCdfLogBetaBinomial_ffv_405;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_406> AgradCdfLogBetaBinomial_ffv_406;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_407> AgradCdfLogBetaBinomial_ffv_407;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_408> AgradCdfLogBetaBinomial_ffv_408;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_409> AgradCdfLogBetaBinomial_ffv_409;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_410> AgradCdfLogBetaBinomial_ffv_410;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_411> AgradCdfLogBetaBinomial_ffv_411;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_412> AgradCdfLogBetaBinomial_ffv_412;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_413> AgradCdfLogBetaBinomial_ffv_413;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_414> AgradCdfLogBetaBinomial_ffv_414;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_415> AgradCdfLogBetaBinomial_ffv_415;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_416> AgradCdfLogBetaBinomial_ffv_416;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_417> AgradCdfLogBetaBinomial_ffv_417;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_418> AgradCdfLogBetaBinomial_ffv_418;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_419> AgradCdfLogBetaBinomial_ffv_419;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_420> AgradCdfLogBetaBinomial_ffv_420;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_421> AgradCdfLogBetaBinomial_ffv_421;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_422> AgradCdfLogBetaBinomial_ffv_422;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_423> AgradCdfLogBetaBinomial_ffv_423;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_424> AgradCdfLogBetaBinomial_ffv_424;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_425> AgradCdfLogBetaBinomial_ffv_425;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_426> AgradCdfLogBetaBinomial_ffv_426;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_427> AgradCdfLogBetaBinomial_ffv_427;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_428> AgradCdfLogBetaBinomial_ffv_428;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_429> AgradCdfLogBetaBinomial_ffv_429;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_430> AgradCdfLogBetaBinomial_ffv_430;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_431> AgradCdfLogBetaBinomial_ffv_431;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_432> AgradCdfLogBetaBinomial_ffv_432;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_433> AgradCdfLogBetaBinomial_ffv_433;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_434> AgradCdfLogBetaBinomial_ffv_434;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_435> AgradCdfLogBetaBinomial_ffv_435;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_436> AgradCdfLogBetaBinomial_ffv_436;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_437> AgradCdfLogBetaBinomial_ffv_437;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_438> AgradCdfLogBetaBinomial_ffv_438;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_439> AgradCdfLogBetaBinomial_ffv_439;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_440> AgradCdfLogBetaBinomial_ffv_440;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_441> AgradCdfLogBetaBinomial_ffv_441;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_442> AgradCdfLogBetaBinomial_ffv_442;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_443> AgradCdfLogBetaBinomial_ffv_443;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_444> AgradCdfLogBetaBinomial_ffv_444;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_445> AgradCdfLogBetaBinomial_ffv_445;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_446> AgradCdfLogBetaBinomial_ffv_446;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_447> AgradCdfLogBetaBinomial_ffv_447;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_448> AgradCdfLogBetaBinomial_ffv_448;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_449> AgradCdfLogBetaBinomial_ffv_449;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_450> AgradCdfLogBetaBinomial_ffv_450;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_451> AgradCdfLogBetaBinomial_ffv_451;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_452> AgradCdfLogBetaBinomial_ffv_452;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_453> AgradCdfLogBetaBinomial_ffv_453;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_454> AgradCdfLogBetaBinomial_ffv_454;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_455> AgradCdfLogBetaBinomial_ffv_455;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_456> AgradCdfLogBetaBinomial_ffv_456;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_457> AgradCdfLogBetaBinomial_ffv_457;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_458> AgradCdfLogBetaBinomial_ffv_458;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_459> AgradCdfLogBetaBinomial_ffv_459;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_460> AgradCdfLogBetaBinomial_ffv_460;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_461> AgradCdfLogBetaBinomial_ffv_461;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_462> AgradCdfLogBetaBinomial_ffv_462;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_463> AgradCdfLogBetaBinomial_ffv_463;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_464> AgradCdfLogBetaBinomial_ffv_464;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_465> AgradCdfLogBetaBinomial_ffv_465;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_466> AgradCdfLogBetaBinomial_ffv_466;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_467> AgradCdfLogBetaBinomial_ffv_467;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_468> AgradCdfLogBetaBinomial_ffv_468;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_469> AgradCdfLogBetaBinomial_ffv_469;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_470> AgradCdfLogBetaBinomial_ffv_470;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_471> AgradCdfLogBetaBinomial_ffv_471;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_472> AgradCdfLogBetaBinomial_ffv_472;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_473> AgradCdfLogBetaBinomial_ffv_473;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_474> AgradCdfLogBetaBinomial_ffv_474;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_475> AgradCdfLogBetaBinomial_ffv_475;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_476> AgradCdfLogBetaBinomial_ffv_476;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_477> AgradCdfLogBetaBinomial_ffv_477;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_478> AgradCdfLogBetaBinomial_ffv_478;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_479> AgradCdfLogBetaBinomial_ffv_479;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_480> AgradCdfLogBetaBinomial_ffv_480;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_481> AgradCdfLogBetaBinomial_ffv_481;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_482> AgradCdfLogBetaBinomial_ffv_482;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_483> AgradCdfLogBetaBinomial_ffv_483;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_484> AgradCdfLogBetaBinomial_ffv_484;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_485> AgradCdfLogBetaBinomial_ffv_485;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_486> AgradCdfLogBetaBinomial_ffv_486;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_487> AgradCdfLogBetaBinomial_ffv_487;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_488> AgradCdfLogBetaBinomial_ffv_488;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_489> AgradCdfLogBetaBinomial_ffv_489;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_490> AgradCdfLogBetaBinomial_ffv_490;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_491> AgradCdfLogBetaBinomial_ffv_491;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_492> AgradCdfLogBetaBinomial_ffv_492;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_493> AgradCdfLogBetaBinomial_ffv_493;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_494> AgradCdfLogBetaBinomial_ffv_494;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_495> AgradCdfLogBetaBinomial_ffv_495;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_496> AgradCdfLogBetaBinomial_ffv_496;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_497> AgradCdfLogBetaBinomial_ffv_497;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_498> AgradCdfLogBetaBinomial_ffv_498;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_499> AgradCdfLogBetaBinomial_ffv_499;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_400, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_401, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_402, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_403, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_404, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_405, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_406, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_407, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_408, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_409, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_410, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_411, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_412, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_413, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_414, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_415, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_416, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_417, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_418, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_419, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_420, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_421, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_422, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_423, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_424, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_425, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_426, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_427, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_428, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_429, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_430, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_431, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_432, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_433, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_434, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_435, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_436, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_437, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_438, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_439, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_440, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_441, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_442, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_443, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_444, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_445, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_446, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_447, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_448, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_449, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_450, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_451, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_452, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_453, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_454, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_455, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_456, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_457, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_458, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_459, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_460, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_461, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_462, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_463, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_464, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_465, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_466, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_467, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_468, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_469, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_470, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_471, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_472, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_473, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_474, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_475, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_476, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_477, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_478, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_479, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_480, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_481, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_482, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_483, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_484, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_485, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_486, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_487, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_488, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_489, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_490, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_491, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_492, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_493, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_494, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_495, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_496, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_497, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_498, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_499, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_499);

