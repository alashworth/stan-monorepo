#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty> type_ffv_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty> type_ffv_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_767;

typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_700> AgradDistributionsBetaBinomial_ffv_700;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_701> AgradDistributionsBetaBinomial_ffv_701;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_702> AgradDistributionsBetaBinomial_ffv_702;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_703> AgradDistributionsBetaBinomial_ffv_703;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_704> AgradDistributionsBetaBinomial_ffv_704;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_705> AgradDistributionsBetaBinomial_ffv_705;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_706> AgradDistributionsBetaBinomial_ffv_706;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_707> AgradDistributionsBetaBinomial_ffv_707;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_708> AgradDistributionsBetaBinomial_ffv_708;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_709> AgradDistributionsBetaBinomial_ffv_709;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_710> AgradDistributionsBetaBinomial_ffv_710;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_711> AgradDistributionsBetaBinomial_ffv_711;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_712> AgradDistributionsBetaBinomial_ffv_712;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_713> AgradDistributionsBetaBinomial_ffv_713;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_714> AgradDistributionsBetaBinomial_ffv_714;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_715> AgradDistributionsBetaBinomial_ffv_715;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_716> AgradDistributionsBetaBinomial_ffv_716;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_717> AgradDistributionsBetaBinomial_ffv_717;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_718> AgradDistributionsBetaBinomial_ffv_718;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_719> AgradDistributionsBetaBinomial_ffv_719;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_720> AgradDistributionsBetaBinomial_ffv_720;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_721> AgradDistributionsBetaBinomial_ffv_721;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_722> AgradDistributionsBetaBinomial_ffv_722;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_723> AgradDistributionsBetaBinomial_ffv_723;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_724> AgradDistributionsBetaBinomial_ffv_724;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_725> AgradDistributionsBetaBinomial_ffv_725;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_726> AgradDistributionsBetaBinomial_ffv_726;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_727> AgradDistributionsBetaBinomial_ffv_727;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_728> AgradDistributionsBetaBinomial_ffv_728;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_729> AgradDistributionsBetaBinomial_ffv_729;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_730> AgradDistributionsBetaBinomial_ffv_730;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_731> AgradDistributionsBetaBinomial_ffv_731;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_732> AgradDistributionsBetaBinomial_ffv_732;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_733> AgradDistributionsBetaBinomial_ffv_733;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_734> AgradDistributionsBetaBinomial_ffv_734;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_735> AgradDistributionsBetaBinomial_ffv_735;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_736> AgradDistributionsBetaBinomial_ffv_736;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_737> AgradDistributionsBetaBinomial_ffv_737;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_738> AgradDistributionsBetaBinomial_ffv_738;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_739> AgradDistributionsBetaBinomial_ffv_739;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_740> AgradDistributionsBetaBinomial_ffv_740;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_741> AgradDistributionsBetaBinomial_ffv_741;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_742> AgradDistributionsBetaBinomial_ffv_742;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_743> AgradDistributionsBetaBinomial_ffv_743;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_744> AgradDistributionsBetaBinomial_ffv_744;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_745> AgradDistributionsBetaBinomial_ffv_745;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_746> AgradDistributionsBetaBinomial_ffv_746;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_747> AgradDistributionsBetaBinomial_ffv_747;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_748> AgradDistributionsBetaBinomial_ffv_748;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_749> AgradDistributionsBetaBinomial_ffv_749;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_750> AgradDistributionsBetaBinomial_ffv_750;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_751> AgradDistributionsBetaBinomial_ffv_751;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_752> AgradDistributionsBetaBinomial_ffv_752;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_753> AgradDistributionsBetaBinomial_ffv_753;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_754> AgradDistributionsBetaBinomial_ffv_754;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_755> AgradDistributionsBetaBinomial_ffv_755;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_756> AgradDistributionsBetaBinomial_ffv_756;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_757> AgradDistributionsBetaBinomial_ffv_757;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_758> AgradDistributionsBetaBinomial_ffv_758;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_759> AgradDistributionsBetaBinomial_ffv_759;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_760> AgradDistributionsBetaBinomial_ffv_760;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_761> AgradDistributionsBetaBinomial_ffv_761;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_762> AgradDistributionsBetaBinomial_ffv_762;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_763> AgradDistributionsBetaBinomial_ffv_763;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_764> AgradDistributionsBetaBinomial_ffv_764;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_765> AgradDistributionsBetaBinomial_ffv_765;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_766> AgradDistributionsBetaBinomial_ffv_766;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_767> AgradDistributionsBetaBinomial_ffv_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_700, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_701, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_702, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_703, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_704, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_705, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_706, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_707, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_708, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_709, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_710, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_711, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_712, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_713, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_714, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_715, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_716, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_717, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_718, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_719, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_720, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_721, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_722, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_723, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_724, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_725, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_726, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_727, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_728, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_729, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_730, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_731, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_732, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_733, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_734, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_735, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_736, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_737, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_738, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_739, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_740, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_741, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_742, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_743, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_744, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_745, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_746, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_747, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_748, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_749, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_750, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_751, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_752, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_753, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_754, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_755, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_756, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_757, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_758, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_759, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_760, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_761, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_762, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_763, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_764, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_765, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_766, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_767, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_767);

