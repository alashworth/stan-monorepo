#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<var>, empty, empty> type_fv_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<var>>, empty, empty> type_fv_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<var>, empty, empty> type_fv_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, double, empty, empty> type_fv_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<double>, empty, empty> type_fv_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, fvar<var>, empty, empty> type_fv_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, double, empty, empty> type_fv_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_767;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_700> AgradCdfBetaBinomial_fv_700;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_701> AgradCdfBetaBinomial_fv_701;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_702> AgradCdfBetaBinomial_fv_702;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_703> AgradCdfBetaBinomial_fv_703;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_704> AgradCdfBetaBinomial_fv_704;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_705> AgradCdfBetaBinomial_fv_705;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_706> AgradCdfBetaBinomial_fv_706;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_707> AgradCdfBetaBinomial_fv_707;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_708> AgradCdfBetaBinomial_fv_708;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_709> AgradCdfBetaBinomial_fv_709;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_710> AgradCdfBetaBinomial_fv_710;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_711> AgradCdfBetaBinomial_fv_711;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_712> AgradCdfBetaBinomial_fv_712;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_713> AgradCdfBetaBinomial_fv_713;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_714> AgradCdfBetaBinomial_fv_714;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_715> AgradCdfBetaBinomial_fv_715;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_716> AgradCdfBetaBinomial_fv_716;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_717> AgradCdfBetaBinomial_fv_717;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_718> AgradCdfBetaBinomial_fv_718;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_719> AgradCdfBetaBinomial_fv_719;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_720> AgradCdfBetaBinomial_fv_720;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_721> AgradCdfBetaBinomial_fv_721;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_722> AgradCdfBetaBinomial_fv_722;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_723> AgradCdfBetaBinomial_fv_723;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_724> AgradCdfBetaBinomial_fv_724;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_725> AgradCdfBetaBinomial_fv_725;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_726> AgradCdfBetaBinomial_fv_726;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_727> AgradCdfBetaBinomial_fv_727;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_728> AgradCdfBetaBinomial_fv_728;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_729> AgradCdfBetaBinomial_fv_729;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_730> AgradCdfBetaBinomial_fv_730;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_731> AgradCdfBetaBinomial_fv_731;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_732> AgradCdfBetaBinomial_fv_732;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_733> AgradCdfBetaBinomial_fv_733;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_734> AgradCdfBetaBinomial_fv_734;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_735> AgradCdfBetaBinomial_fv_735;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_736> AgradCdfBetaBinomial_fv_736;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_737> AgradCdfBetaBinomial_fv_737;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_738> AgradCdfBetaBinomial_fv_738;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_739> AgradCdfBetaBinomial_fv_739;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_740> AgradCdfBetaBinomial_fv_740;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_741> AgradCdfBetaBinomial_fv_741;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_742> AgradCdfBetaBinomial_fv_742;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_743> AgradCdfBetaBinomial_fv_743;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_744> AgradCdfBetaBinomial_fv_744;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_745> AgradCdfBetaBinomial_fv_745;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_746> AgradCdfBetaBinomial_fv_746;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_747> AgradCdfBetaBinomial_fv_747;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_748> AgradCdfBetaBinomial_fv_748;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_749> AgradCdfBetaBinomial_fv_749;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_750> AgradCdfBetaBinomial_fv_750;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_751> AgradCdfBetaBinomial_fv_751;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_752> AgradCdfBetaBinomial_fv_752;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_753> AgradCdfBetaBinomial_fv_753;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_754> AgradCdfBetaBinomial_fv_754;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_755> AgradCdfBetaBinomial_fv_755;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_756> AgradCdfBetaBinomial_fv_756;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_757> AgradCdfBetaBinomial_fv_757;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_758> AgradCdfBetaBinomial_fv_758;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_759> AgradCdfBetaBinomial_fv_759;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_760> AgradCdfBetaBinomial_fv_760;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_761> AgradCdfBetaBinomial_fv_761;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_762> AgradCdfBetaBinomial_fv_762;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_763> AgradCdfBetaBinomial_fv_763;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_764> AgradCdfBetaBinomial_fv_764;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_765> AgradCdfBetaBinomial_fv_765;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_766> AgradCdfBetaBinomial_fv_766;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_767> AgradCdfBetaBinomial_fv_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_700, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_701, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_702, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_703, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_704, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_705, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_706, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_707, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_708, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_709, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_710, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_711, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_712, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_713, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_714, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_715, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_716, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_717, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_718, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_719, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_720, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_721, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_722, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_723, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_724, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_725, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_726, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_727, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_728, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_729, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_730, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_731, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_732, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_733, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_734, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_735, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_736, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_737, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_738, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_739, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_740, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_741, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_742, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_743, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_744, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_745, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_746, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_747, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_748, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_749, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_750, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_751, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_752, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_753, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_754, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_755, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_756, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_757, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_758, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_759, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_760, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_761, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_762, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_763, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_764, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_765, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_766, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_767, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_767);

