#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_767;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_700> AgradCdfLogBetaBinomial_ffd_700;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_701> AgradCdfLogBetaBinomial_ffd_701;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_702> AgradCdfLogBetaBinomial_ffd_702;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_703> AgradCdfLogBetaBinomial_ffd_703;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_704> AgradCdfLogBetaBinomial_ffd_704;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_705> AgradCdfLogBetaBinomial_ffd_705;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_706> AgradCdfLogBetaBinomial_ffd_706;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_707> AgradCdfLogBetaBinomial_ffd_707;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_708> AgradCdfLogBetaBinomial_ffd_708;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_709> AgradCdfLogBetaBinomial_ffd_709;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_710> AgradCdfLogBetaBinomial_ffd_710;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_711> AgradCdfLogBetaBinomial_ffd_711;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_712> AgradCdfLogBetaBinomial_ffd_712;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_713> AgradCdfLogBetaBinomial_ffd_713;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_714> AgradCdfLogBetaBinomial_ffd_714;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_715> AgradCdfLogBetaBinomial_ffd_715;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_716> AgradCdfLogBetaBinomial_ffd_716;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_717> AgradCdfLogBetaBinomial_ffd_717;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_718> AgradCdfLogBetaBinomial_ffd_718;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_719> AgradCdfLogBetaBinomial_ffd_719;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_720> AgradCdfLogBetaBinomial_ffd_720;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_721> AgradCdfLogBetaBinomial_ffd_721;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_722> AgradCdfLogBetaBinomial_ffd_722;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_723> AgradCdfLogBetaBinomial_ffd_723;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_724> AgradCdfLogBetaBinomial_ffd_724;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_725> AgradCdfLogBetaBinomial_ffd_725;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_726> AgradCdfLogBetaBinomial_ffd_726;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_727> AgradCdfLogBetaBinomial_ffd_727;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_728> AgradCdfLogBetaBinomial_ffd_728;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_729> AgradCdfLogBetaBinomial_ffd_729;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_730> AgradCdfLogBetaBinomial_ffd_730;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_731> AgradCdfLogBetaBinomial_ffd_731;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_732> AgradCdfLogBetaBinomial_ffd_732;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_733> AgradCdfLogBetaBinomial_ffd_733;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_734> AgradCdfLogBetaBinomial_ffd_734;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_735> AgradCdfLogBetaBinomial_ffd_735;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_736> AgradCdfLogBetaBinomial_ffd_736;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_737> AgradCdfLogBetaBinomial_ffd_737;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_738> AgradCdfLogBetaBinomial_ffd_738;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_739> AgradCdfLogBetaBinomial_ffd_739;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_740> AgradCdfLogBetaBinomial_ffd_740;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_741> AgradCdfLogBetaBinomial_ffd_741;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_742> AgradCdfLogBetaBinomial_ffd_742;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_743> AgradCdfLogBetaBinomial_ffd_743;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_744> AgradCdfLogBetaBinomial_ffd_744;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_745> AgradCdfLogBetaBinomial_ffd_745;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_746> AgradCdfLogBetaBinomial_ffd_746;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_747> AgradCdfLogBetaBinomial_ffd_747;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_748> AgradCdfLogBetaBinomial_ffd_748;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_749> AgradCdfLogBetaBinomial_ffd_749;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_750> AgradCdfLogBetaBinomial_ffd_750;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_751> AgradCdfLogBetaBinomial_ffd_751;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_752> AgradCdfLogBetaBinomial_ffd_752;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_753> AgradCdfLogBetaBinomial_ffd_753;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_754> AgradCdfLogBetaBinomial_ffd_754;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_755> AgradCdfLogBetaBinomial_ffd_755;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_756> AgradCdfLogBetaBinomial_ffd_756;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_757> AgradCdfLogBetaBinomial_ffd_757;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_758> AgradCdfLogBetaBinomial_ffd_758;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_759> AgradCdfLogBetaBinomial_ffd_759;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_760> AgradCdfLogBetaBinomial_ffd_760;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_761> AgradCdfLogBetaBinomial_ffd_761;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_762> AgradCdfLogBetaBinomial_ffd_762;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_763> AgradCdfLogBetaBinomial_ffd_763;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_764> AgradCdfLogBetaBinomial_ffd_764;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_765> AgradCdfLogBetaBinomial_ffd_765;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_766> AgradCdfLogBetaBinomial_ffd_766;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_767> AgradCdfLogBetaBinomial_ffd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_700, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_701, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_702, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_703, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_704, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_705, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_706, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_707, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_708, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_709, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_710, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_711, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_712, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_713, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_714, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_715, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_716, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_717, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_718, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_719, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_720, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_721, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_722, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_723, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_724, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_725, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_726, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_727, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_728, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_729, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_730, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_731, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_732, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_733, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_734, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_735, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_736, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_737, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_738, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_739, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_740, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_741, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_742, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_743, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_744, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_745, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_746, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_747, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_748, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_749, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_750, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_751, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_752, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_753, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_754, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_755, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_756, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_757, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_758, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_759, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_760, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_761, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_762, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_763, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_764, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_765, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_766, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_767, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_767);

