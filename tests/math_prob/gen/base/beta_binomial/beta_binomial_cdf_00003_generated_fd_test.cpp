#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, double, empty, empty> type_fd_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<double>, empty, empty> type_fd_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<double>>, empty, empty> type_fd_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<double>, empty, empty> type_fd_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, double, empty, empty> type_fd_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, std::vector<double>, empty, empty> type_fd_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, fvar<double>, empty, empty> type_fd_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, double, empty, empty> type_fd_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<double>, empty, empty> type_fd_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<double>>, empty, empty> type_fd_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<double>, empty, empty> type_fd_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, double, empty, empty> type_fd_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<double>, empty, empty> type_fd_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, fvar<double>, empty, empty> type_fd_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, double, empty, empty> type_fd_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_699;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty> type_fd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty> type_fd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty> type_fd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty> type_fd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty> type_fd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty> type_fd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty> type_fd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_767;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_600> AgradCdfBetaBinomial_fd_600;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_601> AgradCdfBetaBinomial_fd_601;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_602> AgradCdfBetaBinomial_fd_602;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_603> AgradCdfBetaBinomial_fd_603;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_604> AgradCdfBetaBinomial_fd_604;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_605> AgradCdfBetaBinomial_fd_605;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_606> AgradCdfBetaBinomial_fd_606;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_607> AgradCdfBetaBinomial_fd_607;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_608> AgradCdfBetaBinomial_fd_608;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_609> AgradCdfBetaBinomial_fd_609;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_610> AgradCdfBetaBinomial_fd_610;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_611> AgradCdfBetaBinomial_fd_611;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_612> AgradCdfBetaBinomial_fd_612;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_613> AgradCdfBetaBinomial_fd_613;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_614> AgradCdfBetaBinomial_fd_614;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_615> AgradCdfBetaBinomial_fd_615;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_616> AgradCdfBetaBinomial_fd_616;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_617> AgradCdfBetaBinomial_fd_617;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_618> AgradCdfBetaBinomial_fd_618;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_619> AgradCdfBetaBinomial_fd_619;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_620> AgradCdfBetaBinomial_fd_620;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_621> AgradCdfBetaBinomial_fd_621;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_622> AgradCdfBetaBinomial_fd_622;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_623> AgradCdfBetaBinomial_fd_623;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_624> AgradCdfBetaBinomial_fd_624;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_625> AgradCdfBetaBinomial_fd_625;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_626> AgradCdfBetaBinomial_fd_626;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_627> AgradCdfBetaBinomial_fd_627;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_628> AgradCdfBetaBinomial_fd_628;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_629> AgradCdfBetaBinomial_fd_629;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_630> AgradCdfBetaBinomial_fd_630;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_631> AgradCdfBetaBinomial_fd_631;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_632> AgradCdfBetaBinomial_fd_632;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_633> AgradCdfBetaBinomial_fd_633;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_634> AgradCdfBetaBinomial_fd_634;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_635> AgradCdfBetaBinomial_fd_635;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_636> AgradCdfBetaBinomial_fd_636;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_637> AgradCdfBetaBinomial_fd_637;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_638> AgradCdfBetaBinomial_fd_638;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_639> AgradCdfBetaBinomial_fd_639;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_640> AgradCdfBetaBinomial_fd_640;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_641> AgradCdfBetaBinomial_fd_641;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_642> AgradCdfBetaBinomial_fd_642;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_643> AgradCdfBetaBinomial_fd_643;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_644> AgradCdfBetaBinomial_fd_644;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_645> AgradCdfBetaBinomial_fd_645;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_646> AgradCdfBetaBinomial_fd_646;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_647> AgradCdfBetaBinomial_fd_647;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_648> AgradCdfBetaBinomial_fd_648;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_649> AgradCdfBetaBinomial_fd_649;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_650> AgradCdfBetaBinomial_fd_650;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_651> AgradCdfBetaBinomial_fd_651;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_652> AgradCdfBetaBinomial_fd_652;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_653> AgradCdfBetaBinomial_fd_653;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_654> AgradCdfBetaBinomial_fd_654;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_655> AgradCdfBetaBinomial_fd_655;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_656> AgradCdfBetaBinomial_fd_656;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_657> AgradCdfBetaBinomial_fd_657;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_658> AgradCdfBetaBinomial_fd_658;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_659> AgradCdfBetaBinomial_fd_659;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_660> AgradCdfBetaBinomial_fd_660;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_661> AgradCdfBetaBinomial_fd_661;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_662> AgradCdfBetaBinomial_fd_662;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_663> AgradCdfBetaBinomial_fd_663;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_664> AgradCdfBetaBinomial_fd_664;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_665> AgradCdfBetaBinomial_fd_665;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_666> AgradCdfBetaBinomial_fd_666;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_667> AgradCdfBetaBinomial_fd_667;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_668> AgradCdfBetaBinomial_fd_668;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_669> AgradCdfBetaBinomial_fd_669;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_670> AgradCdfBetaBinomial_fd_670;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_671> AgradCdfBetaBinomial_fd_671;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_672> AgradCdfBetaBinomial_fd_672;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_673> AgradCdfBetaBinomial_fd_673;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_674> AgradCdfBetaBinomial_fd_674;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_675> AgradCdfBetaBinomial_fd_675;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_676> AgradCdfBetaBinomial_fd_676;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_677> AgradCdfBetaBinomial_fd_677;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_678> AgradCdfBetaBinomial_fd_678;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_679> AgradCdfBetaBinomial_fd_679;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_680> AgradCdfBetaBinomial_fd_680;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_681> AgradCdfBetaBinomial_fd_681;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_682> AgradCdfBetaBinomial_fd_682;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_683> AgradCdfBetaBinomial_fd_683;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_684> AgradCdfBetaBinomial_fd_684;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_685> AgradCdfBetaBinomial_fd_685;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_686> AgradCdfBetaBinomial_fd_686;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_687> AgradCdfBetaBinomial_fd_687;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_688> AgradCdfBetaBinomial_fd_688;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_689> AgradCdfBetaBinomial_fd_689;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_690> AgradCdfBetaBinomial_fd_690;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_691> AgradCdfBetaBinomial_fd_691;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_692> AgradCdfBetaBinomial_fd_692;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_693> AgradCdfBetaBinomial_fd_693;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_694> AgradCdfBetaBinomial_fd_694;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_695> AgradCdfBetaBinomial_fd_695;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_696> AgradCdfBetaBinomial_fd_696;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_697> AgradCdfBetaBinomial_fd_697;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_698> AgradCdfBetaBinomial_fd_698;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_699> AgradCdfBetaBinomial_fd_699;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_700> AgradCdfBetaBinomial_fd_700;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_701> AgradCdfBetaBinomial_fd_701;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_702> AgradCdfBetaBinomial_fd_702;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_703> AgradCdfBetaBinomial_fd_703;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_704> AgradCdfBetaBinomial_fd_704;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_705> AgradCdfBetaBinomial_fd_705;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_706> AgradCdfBetaBinomial_fd_706;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_707> AgradCdfBetaBinomial_fd_707;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_708> AgradCdfBetaBinomial_fd_708;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_709> AgradCdfBetaBinomial_fd_709;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_710> AgradCdfBetaBinomial_fd_710;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_711> AgradCdfBetaBinomial_fd_711;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_712> AgradCdfBetaBinomial_fd_712;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_713> AgradCdfBetaBinomial_fd_713;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_714> AgradCdfBetaBinomial_fd_714;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_715> AgradCdfBetaBinomial_fd_715;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_716> AgradCdfBetaBinomial_fd_716;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_717> AgradCdfBetaBinomial_fd_717;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_718> AgradCdfBetaBinomial_fd_718;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_719> AgradCdfBetaBinomial_fd_719;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_720> AgradCdfBetaBinomial_fd_720;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_721> AgradCdfBetaBinomial_fd_721;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_722> AgradCdfBetaBinomial_fd_722;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_723> AgradCdfBetaBinomial_fd_723;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_724> AgradCdfBetaBinomial_fd_724;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_725> AgradCdfBetaBinomial_fd_725;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_726> AgradCdfBetaBinomial_fd_726;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_727> AgradCdfBetaBinomial_fd_727;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_728> AgradCdfBetaBinomial_fd_728;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_729> AgradCdfBetaBinomial_fd_729;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_730> AgradCdfBetaBinomial_fd_730;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_731> AgradCdfBetaBinomial_fd_731;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_732> AgradCdfBetaBinomial_fd_732;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_733> AgradCdfBetaBinomial_fd_733;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_734> AgradCdfBetaBinomial_fd_734;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_735> AgradCdfBetaBinomial_fd_735;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_736> AgradCdfBetaBinomial_fd_736;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_737> AgradCdfBetaBinomial_fd_737;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_738> AgradCdfBetaBinomial_fd_738;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_739> AgradCdfBetaBinomial_fd_739;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_740> AgradCdfBetaBinomial_fd_740;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_741> AgradCdfBetaBinomial_fd_741;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_742> AgradCdfBetaBinomial_fd_742;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_743> AgradCdfBetaBinomial_fd_743;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_744> AgradCdfBetaBinomial_fd_744;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_745> AgradCdfBetaBinomial_fd_745;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_746> AgradCdfBetaBinomial_fd_746;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_747> AgradCdfBetaBinomial_fd_747;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_748> AgradCdfBetaBinomial_fd_748;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_749> AgradCdfBetaBinomial_fd_749;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_750> AgradCdfBetaBinomial_fd_750;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_751> AgradCdfBetaBinomial_fd_751;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_752> AgradCdfBetaBinomial_fd_752;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_753> AgradCdfBetaBinomial_fd_753;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_754> AgradCdfBetaBinomial_fd_754;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_755> AgradCdfBetaBinomial_fd_755;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_756> AgradCdfBetaBinomial_fd_756;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_757> AgradCdfBetaBinomial_fd_757;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_758> AgradCdfBetaBinomial_fd_758;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_759> AgradCdfBetaBinomial_fd_759;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_760> AgradCdfBetaBinomial_fd_760;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_761> AgradCdfBetaBinomial_fd_761;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_762> AgradCdfBetaBinomial_fd_762;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_763> AgradCdfBetaBinomial_fd_763;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_764> AgradCdfBetaBinomial_fd_764;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_765> AgradCdfBetaBinomial_fd_765;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_766> AgradCdfBetaBinomial_fd_766;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fd_767> AgradCdfBetaBinomial_fd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_600, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_601, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_602, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_603, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_604, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_605, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_606, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_607, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_608, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_609, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_610, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_611, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_612, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_613, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_614, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_615, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_616, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_617, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_618, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_619, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_620, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_621, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_622, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_623, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_624, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_625, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_626, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_627, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_628, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_629, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_630, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_631, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_632, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_633, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_634, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_635, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_636, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_637, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_638, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_639, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_640, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_641, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_642, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_643, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_644, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_645, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_646, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_647, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_648, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_649, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_650, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_651, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_652, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_653, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_654, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_655, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_656, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_657, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_658, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_659, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_660, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_661, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_662, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_663, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_664, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_665, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_666, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_667, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_668, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_669, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_670, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_671, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_672, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_673, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_674, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_675, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_676, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_677, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_678, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_679, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_680, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_681, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_682, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_683, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_684, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_685, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_686, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_687, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_688, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_689, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_690, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_691, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_692, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_693, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_694, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_695, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_696, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_697, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_698, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_699, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_699);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_700, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_701, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_702, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_703, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_704, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_705, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_706, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_707, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_708, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_709, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_710, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_711, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_712, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_713, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_714, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_715, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_716, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_717, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_718, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_719, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_720, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_721, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_722, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_723, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_724, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_725, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_726, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_727, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_728, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_729, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_730, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_731, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_732, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_733, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_734, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_735, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_736, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_737, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_738, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_739, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_740, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_741, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_742, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_743, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_744, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_745, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_746, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_747, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_748, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_749, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_750, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_751, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_752, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_753, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_754, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_755, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_756, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_757, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_758, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_759, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_760, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_761, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_762, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_763, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_764, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_765, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_766, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fd_767, AgradCdfTestFixture, AgradCdfBetaBinomial_fd_767);

