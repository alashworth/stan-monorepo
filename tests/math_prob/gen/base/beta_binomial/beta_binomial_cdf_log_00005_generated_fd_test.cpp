#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, fvar<double>, empty, empty> type_fd_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, double, empty, empty> type_fd_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty> type_fd_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty> type_fd_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty> type_fd_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty> type_fd_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty> type_fd_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty> type_fd_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty> type_fd_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<double>, empty, empty> type_fd_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<double>>, empty, empty> type_fd_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<double>, empty, empty> type_fd_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, double, empty, empty> type_fd_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, std::vector<double>, empty, empty> type_fd_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, fvar<double>, empty, empty> type_fd_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_599;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_500> AgradCdfLogBetaBinomial_fd_500;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_501> AgradCdfLogBetaBinomial_fd_501;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_502> AgradCdfLogBetaBinomial_fd_502;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_503> AgradCdfLogBetaBinomial_fd_503;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_504> AgradCdfLogBetaBinomial_fd_504;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_505> AgradCdfLogBetaBinomial_fd_505;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_506> AgradCdfLogBetaBinomial_fd_506;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_507> AgradCdfLogBetaBinomial_fd_507;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_508> AgradCdfLogBetaBinomial_fd_508;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_509> AgradCdfLogBetaBinomial_fd_509;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_510> AgradCdfLogBetaBinomial_fd_510;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_511> AgradCdfLogBetaBinomial_fd_511;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_512> AgradCdfLogBetaBinomial_fd_512;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_513> AgradCdfLogBetaBinomial_fd_513;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_514> AgradCdfLogBetaBinomial_fd_514;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_515> AgradCdfLogBetaBinomial_fd_515;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_516> AgradCdfLogBetaBinomial_fd_516;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_517> AgradCdfLogBetaBinomial_fd_517;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_518> AgradCdfLogBetaBinomial_fd_518;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_519> AgradCdfLogBetaBinomial_fd_519;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_520> AgradCdfLogBetaBinomial_fd_520;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_521> AgradCdfLogBetaBinomial_fd_521;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_522> AgradCdfLogBetaBinomial_fd_522;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_523> AgradCdfLogBetaBinomial_fd_523;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_524> AgradCdfLogBetaBinomial_fd_524;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_525> AgradCdfLogBetaBinomial_fd_525;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_526> AgradCdfLogBetaBinomial_fd_526;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_527> AgradCdfLogBetaBinomial_fd_527;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_528> AgradCdfLogBetaBinomial_fd_528;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_529> AgradCdfLogBetaBinomial_fd_529;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_530> AgradCdfLogBetaBinomial_fd_530;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_531> AgradCdfLogBetaBinomial_fd_531;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_532> AgradCdfLogBetaBinomial_fd_532;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_533> AgradCdfLogBetaBinomial_fd_533;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_534> AgradCdfLogBetaBinomial_fd_534;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_535> AgradCdfLogBetaBinomial_fd_535;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_536> AgradCdfLogBetaBinomial_fd_536;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_537> AgradCdfLogBetaBinomial_fd_537;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_538> AgradCdfLogBetaBinomial_fd_538;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_539> AgradCdfLogBetaBinomial_fd_539;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_540> AgradCdfLogBetaBinomial_fd_540;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_541> AgradCdfLogBetaBinomial_fd_541;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_542> AgradCdfLogBetaBinomial_fd_542;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_543> AgradCdfLogBetaBinomial_fd_543;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_544> AgradCdfLogBetaBinomial_fd_544;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_545> AgradCdfLogBetaBinomial_fd_545;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_546> AgradCdfLogBetaBinomial_fd_546;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_547> AgradCdfLogBetaBinomial_fd_547;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_548> AgradCdfLogBetaBinomial_fd_548;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_549> AgradCdfLogBetaBinomial_fd_549;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_550> AgradCdfLogBetaBinomial_fd_550;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_551> AgradCdfLogBetaBinomial_fd_551;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_552> AgradCdfLogBetaBinomial_fd_552;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_553> AgradCdfLogBetaBinomial_fd_553;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_554> AgradCdfLogBetaBinomial_fd_554;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_555> AgradCdfLogBetaBinomial_fd_555;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_556> AgradCdfLogBetaBinomial_fd_556;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_557> AgradCdfLogBetaBinomial_fd_557;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_558> AgradCdfLogBetaBinomial_fd_558;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_559> AgradCdfLogBetaBinomial_fd_559;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_560> AgradCdfLogBetaBinomial_fd_560;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_561> AgradCdfLogBetaBinomial_fd_561;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_562> AgradCdfLogBetaBinomial_fd_562;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_563> AgradCdfLogBetaBinomial_fd_563;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_564> AgradCdfLogBetaBinomial_fd_564;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_565> AgradCdfLogBetaBinomial_fd_565;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_566> AgradCdfLogBetaBinomial_fd_566;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_567> AgradCdfLogBetaBinomial_fd_567;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_568> AgradCdfLogBetaBinomial_fd_568;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_569> AgradCdfLogBetaBinomial_fd_569;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_570> AgradCdfLogBetaBinomial_fd_570;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_571> AgradCdfLogBetaBinomial_fd_571;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_572> AgradCdfLogBetaBinomial_fd_572;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_573> AgradCdfLogBetaBinomial_fd_573;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_574> AgradCdfLogBetaBinomial_fd_574;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_575> AgradCdfLogBetaBinomial_fd_575;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_576> AgradCdfLogBetaBinomial_fd_576;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_577> AgradCdfLogBetaBinomial_fd_577;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_578> AgradCdfLogBetaBinomial_fd_578;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_579> AgradCdfLogBetaBinomial_fd_579;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_580> AgradCdfLogBetaBinomial_fd_580;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_581> AgradCdfLogBetaBinomial_fd_581;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_582> AgradCdfLogBetaBinomial_fd_582;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_583> AgradCdfLogBetaBinomial_fd_583;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_584> AgradCdfLogBetaBinomial_fd_584;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_585> AgradCdfLogBetaBinomial_fd_585;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_586> AgradCdfLogBetaBinomial_fd_586;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_587> AgradCdfLogBetaBinomial_fd_587;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_588> AgradCdfLogBetaBinomial_fd_588;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_589> AgradCdfLogBetaBinomial_fd_589;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_590> AgradCdfLogBetaBinomial_fd_590;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_591> AgradCdfLogBetaBinomial_fd_591;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_592> AgradCdfLogBetaBinomial_fd_592;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_593> AgradCdfLogBetaBinomial_fd_593;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_594> AgradCdfLogBetaBinomial_fd_594;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_595> AgradCdfLogBetaBinomial_fd_595;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_596> AgradCdfLogBetaBinomial_fd_596;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_597> AgradCdfLogBetaBinomial_fd_597;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_598> AgradCdfLogBetaBinomial_fd_598;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_599> AgradCdfLogBetaBinomial_fd_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_500, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_501, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_502, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_503, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_504, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_505, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_506, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_507, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_508, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_509, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_510, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_511, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_512, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_513, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_514, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_515, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_516, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_517, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_518, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_519, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_520, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_521, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_522, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_523, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_524, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_525, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_526, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_527, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_528, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_529, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_530, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_531, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_532, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_533, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_534, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_535, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_536, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_537, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_538, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_539, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_540, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_541, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_542, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_543, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_544, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_545, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_546, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_547, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_548, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_549, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_550, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_551, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_552, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_553, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_554, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_555, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_556, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_557, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_558, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_559, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_560, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_561, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_562, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_563, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_564, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_565, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_566, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_567, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_568, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_569, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_570, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_571, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_572, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_573, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_574, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_575, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_576, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_577, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_578, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_579, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_580, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_581, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_582, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_583, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_584, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_585, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_586, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_587, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_588, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_589, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_590, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_591, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_592, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_593, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_594, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_595, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_596, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_597, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_598, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_599, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_599);

