#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty> type_fd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty> type_fd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty> type_fd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty> type_fd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty> type_fd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty> type_fd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty> type_fd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_767;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_700> AgradCcdfLogBetaBinomial_fd_700;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_701> AgradCcdfLogBetaBinomial_fd_701;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_702> AgradCcdfLogBetaBinomial_fd_702;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_703> AgradCcdfLogBetaBinomial_fd_703;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_704> AgradCcdfLogBetaBinomial_fd_704;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_705> AgradCcdfLogBetaBinomial_fd_705;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_706> AgradCcdfLogBetaBinomial_fd_706;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_707> AgradCcdfLogBetaBinomial_fd_707;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_708> AgradCcdfLogBetaBinomial_fd_708;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_709> AgradCcdfLogBetaBinomial_fd_709;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_710> AgradCcdfLogBetaBinomial_fd_710;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_711> AgradCcdfLogBetaBinomial_fd_711;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_712> AgradCcdfLogBetaBinomial_fd_712;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_713> AgradCcdfLogBetaBinomial_fd_713;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_714> AgradCcdfLogBetaBinomial_fd_714;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_715> AgradCcdfLogBetaBinomial_fd_715;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_716> AgradCcdfLogBetaBinomial_fd_716;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_717> AgradCcdfLogBetaBinomial_fd_717;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_718> AgradCcdfLogBetaBinomial_fd_718;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_719> AgradCcdfLogBetaBinomial_fd_719;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_720> AgradCcdfLogBetaBinomial_fd_720;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_721> AgradCcdfLogBetaBinomial_fd_721;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_722> AgradCcdfLogBetaBinomial_fd_722;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_723> AgradCcdfLogBetaBinomial_fd_723;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_724> AgradCcdfLogBetaBinomial_fd_724;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_725> AgradCcdfLogBetaBinomial_fd_725;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_726> AgradCcdfLogBetaBinomial_fd_726;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_727> AgradCcdfLogBetaBinomial_fd_727;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_728> AgradCcdfLogBetaBinomial_fd_728;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_729> AgradCcdfLogBetaBinomial_fd_729;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_730> AgradCcdfLogBetaBinomial_fd_730;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_731> AgradCcdfLogBetaBinomial_fd_731;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_732> AgradCcdfLogBetaBinomial_fd_732;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_733> AgradCcdfLogBetaBinomial_fd_733;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_734> AgradCcdfLogBetaBinomial_fd_734;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_735> AgradCcdfLogBetaBinomial_fd_735;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_736> AgradCcdfLogBetaBinomial_fd_736;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_737> AgradCcdfLogBetaBinomial_fd_737;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_738> AgradCcdfLogBetaBinomial_fd_738;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_739> AgradCcdfLogBetaBinomial_fd_739;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_740> AgradCcdfLogBetaBinomial_fd_740;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_741> AgradCcdfLogBetaBinomial_fd_741;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_742> AgradCcdfLogBetaBinomial_fd_742;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_743> AgradCcdfLogBetaBinomial_fd_743;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_744> AgradCcdfLogBetaBinomial_fd_744;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_745> AgradCcdfLogBetaBinomial_fd_745;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_746> AgradCcdfLogBetaBinomial_fd_746;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_747> AgradCcdfLogBetaBinomial_fd_747;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_748> AgradCcdfLogBetaBinomial_fd_748;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_749> AgradCcdfLogBetaBinomial_fd_749;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_750> AgradCcdfLogBetaBinomial_fd_750;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_751> AgradCcdfLogBetaBinomial_fd_751;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_752> AgradCcdfLogBetaBinomial_fd_752;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_753> AgradCcdfLogBetaBinomial_fd_753;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_754> AgradCcdfLogBetaBinomial_fd_754;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_755> AgradCcdfLogBetaBinomial_fd_755;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_756> AgradCcdfLogBetaBinomial_fd_756;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_757> AgradCcdfLogBetaBinomial_fd_757;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_758> AgradCcdfLogBetaBinomial_fd_758;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_759> AgradCcdfLogBetaBinomial_fd_759;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_760> AgradCcdfLogBetaBinomial_fd_760;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_761> AgradCcdfLogBetaBinomial_fd_761;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_762> AgradCcdfLogBetaBinomial_fd_762;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_763> AgradCcdfLogBetaBinomial_fd_763;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_764> AgradCcdfLogBetaBinomial_fd_764;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_765> AgradCcdfLogBetaBinomial_fd_765;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_766> AgradCcdfLogBetaBinomial_fd_766;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_767> AgradCcdfLogBetaBinomial_fd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_700, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_701, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_702, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_703, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_704, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_705, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_706, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_707, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_708, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_709, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_710, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_711, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_712, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_713, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_714, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_715, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_716, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_717, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_718, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_719, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_720, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_721, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_722, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_723, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_724, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_725, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_726, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_727, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_728, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_729, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_730, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_731, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_732, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_733, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_734, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_735, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_736, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_737, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_738, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_739, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_740, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_741, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_742, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_743, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_744, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_745, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_746, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_747, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_748, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_749, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_750, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_751, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_752, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_753, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_754, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_755, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_756, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_757, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_758, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_759, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_760, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_761, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_762, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_763, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_764, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_765, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_766, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_767, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_767);

