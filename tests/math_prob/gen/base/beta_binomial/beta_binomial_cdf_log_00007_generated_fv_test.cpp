#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<var>, empty, empty> type_fv_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<var>>, empty, empty> type_fv_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<var>, empty, empty> type_fv_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, double, empty, empty> type_fv_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<double>, empty, empty> type_fv_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, fvar<var>, empty, empty> type_fv_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, double, empty, empty> type_fv_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_767;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_700> AgradCdfLogBetaBinomial_fv_700;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_701> AgradCdfLogBetaBinomial_fv_701;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_702> AgradCdfLogBetaBinomial_fv_702;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_703> AgradCdfLogBetaBinomial_fv_703;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_704> AgradCdfLogBetaBinomial_fv_704;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_705> AgradCdfLogBetaBinomial_fv_705;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_706> AgradCdfLogBetaBinomial_fv_706;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_707> AgradCdfLogBetaBinomial_fv_707;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_708> AgradCdfLogBetaBinomial_fv_708;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_709> AgradCdfLogBetaBinomial_fv_709;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_710> AgradCdfLogBetaBinomial_fv_710;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_711> AgradCdfLogBetaBinomial_fv_711;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_712> AgradCdfLogBetaBinomial_fv_712;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_713> AgradCdfLogBetaBinomial_fv_713;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_714> AgradCdfLogBetaBinomial_fv_714;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_715> AgradCdfLogBetaBinomial_fv_715;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_716> AgradCdfLogBetaBinomial_fv_716;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_717> AgradCdfLogBetaBinomial_fv_717;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_718> AgradCdfLogBetaBinomial_fv_718;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_719> AgradCdfLogBetaBinomial_fv_719;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_720> AgradCdfLogBetaBinomial_fv_720;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_721> AgradCdfLogBetaBinomial_fv_721;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_722> AgradCdfLogBetaBinomial_fv_722;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_723> AgradCdfLogBetaBinomial_fv_723;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_724> AgradCdfLogBetaBinomial_fv_724;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_725> AgradCdfLogBetaBinomial_fv_725;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_726> AgradCdfLogBetaBinomial_fv_726;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_727> AgradCdfLogBetaBinomial_fv_727;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_728> AgradCdfLogBetaBinomial_fv_728;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_729> AgradCdfLogBetaBinomial_fv_729;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_730> AgradCdfLogBetaBinomial_fv_730;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_731> AgradCdfLogBetaBinomial_fv_731;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_732> AgradCdfLogBetaBinomial_fv_732;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_733> AgradCdfLogBetaBinomial_fv_733;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_734> AgradCdfLogBetaBinomial_fv_734;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_735> AgradCdfLogBetaBinomial_fv_735;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_736> AgradCdfLogBetaBinomial_fv_736;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_737> AgradCdfLogBetaBinomial_fv_737;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_738> AgradCdfLogBetaBinomial_fv_738;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_739> AgradCdfLogBetaBinomial_fv_739;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_740> AgradCdfLogBetaBinomial_fv_740;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_741> AgradCdfLogBetaBinomial_fv_741;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_742> AgradCdfLogBetaBinomial_fv_742;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_743> AgradCdfLogBetaBinomial_fv_743;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_744> AgradCdfLogBetaBinomial_fv_744;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_745> AgradCdfLogBetaBinomial_fv_745;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_746> AgradCdfLogBetaBinomial_fv_746;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_747> AgradCdfLogBetaBinomial_fv_747;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_748> AgradCdfLogBetaBinomial_fv_748;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_749> AgradCdfLogBetaBinomial_fv_749;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_750> AgradCdfLogBetaBinomial_fv_750;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_751> AgradCdfLogBetaBinomial_fv_751;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_752> AgradCdfLogBetaBinomial_fv_752;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_753> AgradCdfLogBetaBinomial_fv_753;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_754> AgradCdfLogBetaBinomial_fv_754;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_755> AgradCdfLogBetaBinomial_fv_755;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_756> AgradCdfLogBetaBinomial_fv_756;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_757> AgradCdfLogBetaBinomial_fv_757;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_758> AgradCdfLogBetaBinomial_fv_758;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_759> AgradCdfLogBetaBinomial_fv_759;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_760> AgradCdfLogBetaBinomial_fv_760;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_761> AgradCdfLogBetaBinomial_fv_761;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_762> AgradCdfLogBetaBinomial_fv_762;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_763> AgradCdfLogBetaBinomial_fv_763;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_764> AgradCdfLogBetaBinomial_fv_764;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_765> AgradCdfLogBetaBinomial_fv_765;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_766> AgradCdfLogBetaBinomial_fv_766;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_767> AgradCdfLogBetaBinomial_fv_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_700, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_701, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_702, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_703, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_704, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_705, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_706, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_707, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_708, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_709, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_710, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_711, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_712, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_713, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_714, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_715, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_716, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_717, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_718, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_719, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_720, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_721, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_722, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_723, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_724, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_725, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_726, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_727, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_728, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_729, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_730, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_731, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_732, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_733, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_734, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_735, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_736, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_737, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_738, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_739, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_740, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_741, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_742, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_743, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_744, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_745, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_746, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_747, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_748, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_749, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_750, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_751, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_752, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_753, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_754, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_755, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_756, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_757, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_758, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_759, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_760, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_761, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_762, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_763, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_764, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_765, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_766, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_767, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_767);

