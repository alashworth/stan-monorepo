#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, double, empty, empty> type_fv_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<var>, empty, empty> type_fv_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<var>>, empty, empty> type_fv_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<var>, empty, empty> type_fv_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, double, empty, empty> type_fv_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, std::vector<double>, empty, empty> type_fv_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, fvar<var>, empty, empty> type_fv_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, double, empty, empty> type_fv_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<var>, empty, empty> type_fv_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<var>>, empty, empty> type_fv_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<var>, empty, empty> type_fv_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, double, empty, empty> type_fv_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<double>, empty, empty> type_fv_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, fvar<var>, empty, empty> type_fv_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, double, empty, empty> type_fv_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_699;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_600> AgradCdfBetaBinomial_fv_600;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_601> AgradCdfBetaBinomial_fv_601;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_602> AgradCdfBetaBinomial_fv_602;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_603> AgradCdfBetaBinomial_fv_603;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_604> AgradCdfBetaBinomial_fv_604;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_605> AgradCdfBetaBinomial_fv_605;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_606> AgradCdfBetaBinomial_fv_606;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_607> AgradCdfBetaBinomial_fv_607;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_608> AgradCdfBetaBinomial_fv_608;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_609> AgradCdfBetaBinomial_fv_609;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_610> AgradCdfBetaBinomial_fv_610;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_611> AgradCdfBetaBinomial_fv_611;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_612> AgradCdfBetaBinomial_fv_612;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_613> AgradCdfBetaBinomial_fv_613;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_614> AgradCdfBetaBinomial_fv_614;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_615> AgradCdfBetaBinomial_fv_615;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_616> AgradCdfBetaBinomial_fv_616;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_617> AgradCdfBetaBinomial_fv_617;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_618> AgradCdfBetaBinomial_fv_618;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_619> AgradCdfBetaBinomial_fv_619;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_620> AgradCdfBetaBinomial_fv_620;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_621> AgradCdfBetaBinomial_fv_621;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_622> AgradCdfBetaBinomial_fv_622;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_623> AgradCdfBetaBinomial_fv_623;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_624> AgradCdfBetaBinomial_fv_624;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_625> AgradCdfBetaBinomial_fv_625;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_626> AgradCdfBetaBinomial_fv_626;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_627> AgradCdfBetaBinomial_fv_627;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_628> AgradCdfBetaBinomial_fv_628;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_629> AgradCdfBetaBinomial_fv_629;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_630> AgradCdfBetaBinomial_fv_630;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_631> AgradCdfBetaBinomial_fv_631;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_632> AgradCdfBetaBinomial_fv_632;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_633> AgradCdfBetaBinomial_fv_633;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_634> AgradCdfBetaBinomial_fv_634;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_635> AgradCdfBetaBinomial_fv_635;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_636> AgradCdfBetaBinomial_fv_636;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_637> AgradCdfBetaBinomial_fv_637;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_638> AgradCdfBetaBinomial_fv_638;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_639> AgradCdfBetaBinomial_fv_639;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_640> AgradCdfBetaBinomial_fv_640;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_641> AgradCdfBetaBinomial_fv_641;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_642> AgradCdfBetaBinomial_fv_642;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_643> AgradCdfBetaBinomial_fv_643;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_644> AgradCdfBetaBinomial_fv_644;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_645> AgradCdfBetaBinomial_fv_645;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_646> AgradCdfBetaBinomial_fv_646;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_647> AgradCdfBetaBinomial_fv_647;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_648> AgradCdfBetaBinomial_fv_648;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_649> AgradCdfBetaBinomial_fv_649;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_650> AgradCdfBetaBinomial_fv_650;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_651> AgradCdfBetaBinomial_fv_651;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_652> AgradCdfBetaBinomial_fv_652;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_653> AgradCdfBetaBinomial_fv_653;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_654> AgradCdfBetaBinomial_fv_654;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_655> AgradCdfBetaBinomial_fv_655;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_656> AgradCdfBetaBinomial_fv_656;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_657> AgradCdfBetaBinomial_fv_657;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_658> AgradCdfBetaBinomial_fv_658;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_659> AgradCdfBetaBinomial_fv_659;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_660> AgradCdfBetaBinomial_fv_660;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_661> AgradCdfBetaBinomial_fv_661;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_662> AgradCdfBetaBinomial_fv_662;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_663> AgradCdfBetaBinomial_fv_663;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_664> AgradCdfBetaBinomial_fv_664;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_665> AgradCdfBetaBinomial_fv_665;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_666> AgradCdfBetaBinomial_fv_666;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_667> AgradCdfBetaBinomial_fv_667;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_668> AgradCdfBetaBinomial_fv_668;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_669> AgradCdfBetaBinomial_fv_669;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_670> AgradCdfBetaBinomial_fv_670;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_671> AgradCdfBetaBinomial_fv_671;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_672> AgradCdfBetaBinomial_fv_672;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_673> AgradCdfBetaBinomial_fv_673;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_674> AgradCdfBetaBinomial_fv_674;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_675> AgradCdfBetaBinomial_fv_675;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_676> AgradCdfBetaBinomial_fv_676;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_677> AgradCdfBetaBinomial_fv_677;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_678> AgradCdfBetaBinomial_fv_678;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_679> AgradCdfBetaBinomial_fv_679;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_680> AgradCdfBetaBinomial_fv_680;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_681> AgradCdfBetaBinomial_fv_681;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_682> AgradCdfBetaBinomial_fv_682;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_683> AgradCdfBetaBinomial_fv_683;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_684> AgradCdfBetaBinomial_fv_684;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_685> AgradCdfBetaBinomial_fv_685;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_686> AgradCdfBetaBinomial_fv_686;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_687> AgradCdfBetaBinomial_fv_687;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_688> AgradCdfBetaBinomial_fv_688;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_689> AgradCdfBetaBinomial_fv_689;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_690> AgradCdfBetaBinomial_fv_690;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_691> AgradCdfBetaBinomial_fv_691;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_692> AgradCdfBetaBinomial_fv_692;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_693> AgradCdfBetaBinomial_fv_693;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_694> AgradCdfBetaBinomial_fv_694;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_695> AgradCdfBetaBinomial_fv_695;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_696> AgradCdfBetaBinomial_fv_696;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_697> AgradCdfBetaBinomial_fv_697;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_698> AgradCdfBetaBinomial_fv_698;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_699> AgradCdfBetaBinomial_fv_699;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_600, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_601, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_602, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_603, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_604, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_605, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_606, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_607, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_608, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_609, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_610, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_611, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_612, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_613, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_614, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_615, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_616, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_617, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_618, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_619, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_620, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_621, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_622, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_623, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_624, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_625, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_626, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_627, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_628, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_629, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_630, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_631, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_632, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_633, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_634, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_635, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_636, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_637, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_638, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_639, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_640, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_641, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_642, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_643, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_644, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_645, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_646, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_647, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_648, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_649, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_650, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_651, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_652, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_653, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_654, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_655, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_656, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_657, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_658, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_659, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_660, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_661, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_662, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_663, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_664, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_665, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_666, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_667, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_668, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_669, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_670, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_671, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_672, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_673, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_674, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_675, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_676, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_677, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_678, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_679, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_680, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_681, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_682, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_683, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_684, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_685, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_686, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_687, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_688, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_689, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_690, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_691, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_692, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_693, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_694, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_695, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_696, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_697, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_698, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_699, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_699);

