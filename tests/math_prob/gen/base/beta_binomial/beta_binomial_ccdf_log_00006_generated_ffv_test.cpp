#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<fvar<var> >, empty, empty> type_ffv_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, double, empty, empty> type_ffv_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<var> >, empty, empty> type_ffv_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, double, empty, empty> type_ffv_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_699;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_600> AgradCcdfLogBetaBinomial_ffv_600;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_601> AgradCcdfLogBetaBinomial_ffv_601;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_602> AgradCcdfLogBetaBinomial_ffv_602;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_603> AgradCcdfLogBetaBinomial_ffv_603;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_604> AgradCcdfLogBetaBinomial_ffv_604;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_605> AgradCcdfLogBetaBinomial_ffv_605;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_606> AgradCcdfLogBetaBinomial_ffv_606;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_607> AgradCcdfLogBetaBinomial_ffv_607;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_608> AgradCcdfLogBetaBinomial_ffv_608;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_609> AgradCcdfLogBetaBinomial_ffv_609;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_610> AgradCcdfLogBetaBinomial_ffv_610;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_611> AgradCcdfLogBetaBinomial_ffv_611;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_612> AgradCcdfLogBetaBinomial_ffv_612;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_613> AgradCcdfLogBetaBinomial_ffv_613;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_614> AgradCcdfLogBetaBinomial_ffv_614;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_615> AgradCcdfLogBetaBinomial_ffv_615;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_616> AgradCcdfLogBetaBinomial_ffv_616;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_617> AgradCcdfLogBetaBinomial_ffv_617;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_618> AgradCcdfLogBetaBinomial_ffv_618;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_619> AgradCcdfLogBetaBinomial_ffv_619;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_620> AgradCcdfLogBetaBinomial_ffv_620;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_621> AgradCcdfLogBetaBinomial_ffv_621;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_622> AgradCcdfLogBetaBinomial_ffv_622;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_623> AgradCcdfLogBetaBinomial_ffv_623;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_624> AgradCcdfLogBetaBinomial_ffv_624;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_625> AgradCcdfLogBetaBinomial_ffv_625;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_626> AgradCcdfLogBetaBinomial_ffv_626;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_627> AgradCcdfLogBetaBinomial_ffv_627;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_628> AgradCcdfLogBetaBinomial_ffv_628;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_629> AgradCcdfLogBetaBinomial_ffv_629;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_630> AgradCcdfLogBetaBinomial_ffv_630;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_631> AgradCcdfLogBetaBinomial_ffv_631;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_632> AgradCcdfLogBetaBinomial_ffv_632;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_633> AgradCcdfLogBetaBinomial_ffv_633;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_634> AgradCcdfLogBetaBinomial_ffv_634;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_635> AgradCcdfLogBetaBinomial_ffv_635;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_636> AgradCcdfLogBetaBinomial_ffv_636;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_637> AgradCcdfLogBetaBinomial_ffv_637;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_638> AgradCcdfLogBetaBinomial_ffv_638;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_639> AgradCcdfLogBetaBinomial_ffv_639;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_640> AgradCcdfLogBetaBinomial_ffv_640;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_641> AgradCcdfLogBetaBinomial_ffv_641;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_642> AgradCcdfLogBetaBinomial_ffv_642;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_643> AgradCcdfLogBetaBinomial_ffv_643;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_644> AgradCcdfLogBetaBinomial_ffv_644;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_645> AgradCcdfLogBetaBinomial_ffv_645;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_646> AgradCcdfLogBetaBinomial_ffv_646;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_647> AgradCcdfLogBetaBinomial_ffv_647;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_648> AgradCcdfLogBetaBinomial_ffv_648;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_649> AgradCcdfLogBetaBinomial_ffv_649;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_650> AgradCcdfLogBetaBinomial_ffv_650;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_651> AgradCcdfLogBetaBinomial_ffv_651;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_652> AgradCcdfLogBetaBinomial_ffv_652;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_653> AgradCcdfLogBetaBinomial_ffv_653;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_654> AgradCcdfLogBetaBinomial_ffv_654;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_655> AgradCcdfLogBetaBinomial_ffv_655;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_656> AgradCcdfLogBetaBinomial_ffv_656;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_657> AgradCcdfLogBetaBinomial_ffv_657;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_658> AgradCcdfLogBetaBinomial_ffv_658;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_659> AgradCcdfLogBetaBinomial_ffv_659;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_660> AgradCcdfLogBetaBinomial_ffv_660;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_661> AgradCcdfLogBetaBinomial_ffv_661;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_662> AgradCcdfLogBetaBinomial_ffv_662;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_663> AgradCcdfLogBetaBinomial_ffv_663;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_664> AgradCcdfLogBetaBinomial_ffv_664;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_665> AgradCcdfLogBetaBinomial_ffv_665;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_666> AgradCcdfLogBetaBinomial_ffv_666;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_667> AgradCcdfLogBetaBinomial_ffv_667;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_668> AgradCcdfLogBetaBinomial_ffv_668;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_669> AgradCcdfLogBetaBinomial_ffv_669;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_670> AgradCcdfLogBetaBinomial_ffv_670;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_671> AgradCcdfLogBetaBinomial_ffv_671;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_672> AgradCcdfLogBetaBinomial_ffv_672;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_673> AgradCcdfLogBetaBinomial_ffv_673;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_674> AgradCcdfLogBetaBinomial_ffv_674;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_675> AgradCcdfLogBetaBinomial_ffv_675;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_676> AgradCcdfLogBetaBinomial_ffv_676;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_677> AgradCcdfLogBetaBinomial_ffv_677;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_678> AgradCcdfLogBetaBinomial_ffv_678;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_679> AgradCcdfLogBetaBinomial_ffv_679;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_680> AgradCcdfLogBetaBinomial_ffv_680;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_681> AgradCcdfLogBetaBinomial_ffv_681;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_682> AgradCcdfLogBetaBinomial_ffv_682;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_683> AgradCcdfLogBetaBinomial_ffv_683;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_684> AgradCcdfLogBetaBinomial_ffv_684;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_685> AgradCcdfLogBetaBinomial_ffv_685;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_686> AgradCcdfLogBetaBinomial_ffv_686;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_687> AgradCcdfLogBetaBinomial_ffv_687;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_688> AgradCcdfLogBetaBinomial_ffv_688;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_689> AgradCcdfLogBetaBinomial_ffv_689;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_690> AgradCcdfLogBetaBinomial_ffv_690;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_691> AgradCcdfLogBetaBinomial_ffv_691;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_692> AgradCcdfLogBetaBinomial_ffv_692;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_693> AgradCcdfLogBetaBinomial_ffv_693;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_694> AgradCcdfLogBetaBinomial_ffv_694;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_695> AgradCcdfLogBetaBinomial_ffv_695;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_696> AgradCcdfLogBetaBinomial_ffv_696;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_697> AgradCcdfLogBetaBinomial_ffv_697;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_698> AgradCcdfLogBetaBinomial_ffv_698;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_699> AgradCcdfLogBetaBinomial_ffv_699;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_600, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_601, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_602, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_603, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_604, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_605, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_606, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_607, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_608, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_609, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_610, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_611, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_612, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_613, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_614, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_615, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_616, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_617, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_618, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_619, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_620, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_621, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_622, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_623, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_624, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_625, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_626, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_627, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_628, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_629, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_630, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_631, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_632, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_633, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_634, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_635, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_636, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_637, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_638, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_639, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_640, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_641, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_642, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_643, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_644, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_645, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_646, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_647, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_648, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_649, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_650, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_651, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_652, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_653, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_654, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_655, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_656, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_657, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_658, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_659, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_660, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_661, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_662, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_663, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_664, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_665, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_666, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_667, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_668, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_669, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_670, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_671, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_672, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_673, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_674, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_675, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_676, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_677, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_678, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_679, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_680, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_681, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_682, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_683, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_684, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_685, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_686, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_687, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_688, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_689, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_690, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_691, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_692, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_693, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_694, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_695, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_696, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_697, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_698, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_699, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_699);

