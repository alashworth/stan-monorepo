#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<var>, empty, empty> type_fv_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<var>>, empty, empty> type_fv_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<var>, empty, empty> type_fv_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, double, empty, empty> type_fv_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<double>, empty, empty> type_fv_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, fvar<var>, empty, empty> type_fv_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, double, empty, empty> type_fv_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_767;

typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_700> AgradDistributionsBetaBinomial_fv_700;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_701> AgradDistributionsBetaBinomial_fv_701;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_702> AgradDistributionsBetaBinomial_fv_702;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_703> AgradDistributionsBetaBinomial_fv_703;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_704> AgradDistributionsBetaBinomial_fv_704;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_705> AgradDistributionsBetaBinomial_fv_705;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_706> AgradDistributionsBetaBinomial_fv_706;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_707> AgradDistributionsBetaBinomial_fv_707;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_708> AgradDistributionsBetaBinomial_fv_708;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_709> AgradDistributionsBetaBinomial_fv_709;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_710> AgradDistributionsBetaBinomial_fv_710;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_711> AgradDistributionsBetaBinomial_fv_711;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_712> AgradDistributionsBetaBinomial_fv_712;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_713> AgradDistributionsBetaBinomial_fv_713;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_714> AgradDistributionsBetaBinomial_fv_714;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_715> AgradDistributionsBetaBinomial_fv_715;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_716> AgradDistributionsBetaBinomial_fv_716;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_717> AgradDistributionsBetaBinomial_fv_717;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_718> AgradDistributionsBetaBinomial_fv_718;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_719> AgradDistributionsBetaBinomial_fv_719;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_720> AgradDistributionsBetaBinomial_fv_720;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_721> AgradDistributionsBetaBinomial_fv_721;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_722> AgradDistributionsBetaBinomial_fv_722;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_723> AgradDistributionsBetaBinomial_fv_723;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_724> AgradDistributionsBetaBinomial_fv_724;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_725> AgradDistributionsBetaBinomial_fv_725;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_726> AgradDistributionsBetaBinomial_fv_726;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_727> AgradDistributionsBetaBinomial_fv_727;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_728> AgradDistributionsBetaBinomial_fv_728;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_729> AgradDistributionsBetaBinomial_fv_729;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_730> AgradDistributionsBetaBinomial_fv_730;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_731> AgradDistributionsBetaBinomial_fv_731;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_732> AgradDistributionsBetaBinomial_fv_732;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_733> AgradDistributionsBetaBinomial_fv_733;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_734> AgradDistributionsBetaBinomial_fv_734;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_735> AgradDistributionsBetaBinomial_fv_735;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_736> AgradDistributionsBetaBinomial_fv_736;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_737> AgradDistributionsBetaBinomial_fv_737;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_738> AgradDistributionsBetaBinomial_fv_738;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_739> AgradDistributionsBetaBinomial_fv_739;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_740> AgradDistributionsBetaBinomial_fv_740;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_741> AgradDistributionsBetaBinomial_fv_741;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_742> AgradDistributionsBetaBinomial_fv_742;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_743> AgradDistributionsBetaBinomial_fv_743;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_744> AgradDistributionsBetaBinomial_fv_744;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_745> AgradDistributionsBetaBinomial_fv_745;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_746> AgradDistributionsBetaBinomial_fv_746;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_747> AgradDistributionsBetaBinomial_fv_747;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_748> AgradDistributionsBetaBinomial_fv_748;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_749> AgradDistributionsBetaBinomial_fv_749;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_750> AgradDistributionsBetaBinomial_fv_750;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_751> AgradDistributionsBetaBinomial_fv_751;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_752> AgradDistributionsBetaBinomial_fv_752;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_753> AgradDistributionsBetaBinomial_fv_753;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_754> AgradDistributionsBetaBinomial_fv_754;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_755> AgradDistributionsBetaBinomial_fv_755;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_756> AgradDistributionsBetaBinomial_fv_756;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_757> AgradDistributionsBetaBinomial_fv_757;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_758> AgradDistributionsBetaBinomial_fv_758;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_759> AgradDistributionsBetaBinomial_fv_759;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_760> AgradDistributionsBetaBinomial_fv_760;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_761> AgradDistributionsBetaBinomial_fv_761;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_762> AgradDistributionsBetaBinomial_fv_762;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_763> AgradDistributionsBetaBinomial_fv_763;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_764> AgradDistributionsBetaBinomial_fv_764;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_765> AgradDistributionsBetaBinomial_fv_765;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_766> AgradDistributionsBetaBinomial_fv_766;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_fv_767> AgradDistributionsBetaBinomial_fv_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_700, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_701, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_702, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_703, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_704, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_705, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_706, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_707, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_708, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_709, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_710, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_711, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_712, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_713, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_714, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_715, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_716, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_717, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_718, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_719, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_720, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_721, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_722, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_723, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_724, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_725, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_726, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_727, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_728, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_729, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_730, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_731, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_732, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_733, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_734, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_735, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_736, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_737, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_738, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_739, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_740, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_741, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_742, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_743, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_744, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_745, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_746, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_747, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_748, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_749, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_750, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_751, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_752, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_753, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_754, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_755, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_756, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_757, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_758, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_759, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_760, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_761, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_762, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_763, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_764, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_765, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_766, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_fv_767, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_fv_767);

