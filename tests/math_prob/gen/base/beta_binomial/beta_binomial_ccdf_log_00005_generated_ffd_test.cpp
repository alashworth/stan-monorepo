#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<fvar<double> >, empty, empty> type_ffd_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_599;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_500> AgradCcdfLogBetaBinomial_ffd_500;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_501> AgradCcdfLogBetaBinomial_ffd_501;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_502> AgradCcdfLogBetaBinomial_ffd_502;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_503> AgradCcdfLogBetaBinomial_ffd_503;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_504> AgradCcdfLogBetaBinomial_ffd_504;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_505> AgradCcdfLogBetaBinomial_ffd_505;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_506> AgradCcdfLogBetaBinomial_ffd_506;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_507> AgradCcdfLogBetaBinomial_ffd_507;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_508> AgradCcdfLogBetaBinomial_ffd_508;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_509> AgradCcdfLogBetaBinomial_ffd_509;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_510> AgradCcdfLogBetaBinomial_ffd_510;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_511> AgradCcdfLogBetaBinomial_ffd_511;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_512> AgradCcdfLogBetaBinomial_ffd_512;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_513> AgradCcdfLogBetaBinomial_ffd_513;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_514> AgradCcdfLogBetaBinomial_ffd_514;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_515> AgradCcdfLogBetaBinomial_ffd_515;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_516> AgradCcdfLogBetaBinomial_ffd_516;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_517> AgradCcdfLogBetaBinomial_ffd_517;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_518> AgradCcdfLogBetaBinomial_ffd_518;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_519> AgradCcdfLogBetaBinomial_ffd_519;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_520> AgradCcdfLogBetaBinomial_ffd_520;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_521> AgradCcdfLogBetaBinomial_ffd_521;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_522> AgradCcdfLogBetaBinomial_ffd_522;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_523> AgradCcdfLogBetaBinomial_ffd_523;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_524> AgradCcdfLogBetaBinomial_ffd_524;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_525> AgradCcdfLogBetaBinomial_ffd_525;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_526> AgradCcdfLogBetaBinomial_ffd_526;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_527> AgradCcdfLogBetaBinomial_ffd_527;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_528> AgradCcdfLogBetaBinomial_ffd_528;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_529> AgradCcdfLogBetaBinomial_ffd_529;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_530> AgradCcdfLogBetaBinomial_ffd_530;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_531> AgradCcdfLogBetaBinomial_ffd_531;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_532> AgradCcdfLogBetaBinomial_ffd_532;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_533> AgradCcdfLogBetaBinomial_ffd_533;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_534> AgradCcdfLogBetaBinomial_ffd_534;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_535> AgradCcdfLogBetaBinomial_ffd_535;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_536> AgradCcdfLogBetaBinomial_ffd_536;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_537> AgradCcdfLogBetaBinomial_ffd_537;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_538> AgradCcdfLogBetaBinomial_ffd_538;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_539> AgradCcdfLogBetaBinomial_ffd_539;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_540> AgradCcdfLogBetaBinomial_ffd_540;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_541> AgradCcdfLogBetaBinomial_ffd_541;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_542> AgradCcdfLogBetaBinomial_ffd_542;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_543> AgradCcdfLogBetaBinomial_ffd_543;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_544> AgradCcdfLogBetaBinomial_ffd_544;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_545> AgradCcdfLogBetaBinomial_ffd_545;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_546> AgradCcdfLogBetaBinomial_ffd_546;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_547> AgradCcdfLogBetaBinomial_ffd_547;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_548> AgradCcdfLogBetaBinomial_ffd_548;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_549> AgradCcdfLogBetaBinomial_ffd_549;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_550> AgradCcdfLogBetaBinomial_ffd_550;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_551> AgradCcdfLogBetaBinomial_ffd_551;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_552> AgradCcdfLogBetaBinomial_ffd_552;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_553> AgradCcdfLogBetaBinomial_ffd_553;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_554> AgradCcdfLogBetaBinomial_ffd_554;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_555> AgradCcdfLogBetaBinomial_ffd_555;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_556> AgradCcdfLogBetaBinomial_ffd_556;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_557> AgradCcdfLogBetaBinomial_ffd_557;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_558> AgradCcdfLogBetaBinomial_ffd_558;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_559> AgradCcdfLogBetaBinomial_ffd_559;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_560> AgradCcdfLogBetaBinomial_ffd_560;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_561> AgradCcdfLogBetaBinomial_ffd_561;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_562> AgradCcdfLogBetaBinomial_ffd_562;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_563> AgradCcdfLogBetaBinomial_ffd_563;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_564> AgradCcdfLogBetaBinomial_ffd_564;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_565> AgradCcdfLogBetaBinomial_ffd_565;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_566> AgradCcdfLogBetaBinomial_ffd_566;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_567> AgradCcdfLogBetaBinomial_ffd_567;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_568> AgradCcdfLogBetaBinomial_ffd_568;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_569> AgradCcdfLogBetaBinomial_ffd_569;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_570> AgradCcdfLogBetaBinomial_ffd_570;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_571> AgradCcdfLogBetaBinomial_ffd_571;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_572> AgradCcdfLogBetaBinomial_ffd_572;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_573> AgradCcdfLogBetaBinomial_ffd_573;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_574> AgradCcdfLogBetaBinomial_ffd_574;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_575> AgradCcdfLogBetaBinomial_ffd_575;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_576> AgradCcdfLogBetaBinomial_ffd_576;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_577> AgradCcdfLogBetaBinomial_ffd_577;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_578> AgradCcdfLogBetaBinomial_ffd_578;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_579> AgradCcdfLogBetaBinomial_ffd_579;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_580> AgradCcdfLogBetaBinomial_ffd_580;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_581> AgradCcdfLogBetaBinomial_ffd_581;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_582> AgradCcdfLogBetaBinomial_ffd_582;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_583> AgradCcdfLogBetaBinomial_ffd_583;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_584> AgradCcdfLogBetaBinomial_ffd_584;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_585> AgradCcdfLogBetaBinomial_ffd_585;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_586> AgradCcdfLogBetaBinomial_ffd_586;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_587> AgradCcdfLogBetaBinomial_ffd_587;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_588> AgradCcdfLogBetaBinomial_ffd_588;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_589> AgradCcdfLogBetaBinomial_ffd_589;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_590> AgradCcdfLogBetaBinomial_ffd_590;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_591> AgradCcdfLogBetaBinomial_ffd_591;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_592> AgradCcdfLogBetaBinomial_ffd_592;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_593> AgradCcdfLogBetaBinomial_ffd_593;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_594> AgradCcdfLogBetaBinomial_ffd_594;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_595> AgradCcdfLogBetaBinomial_ffd_595;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_596> AgradCcdfLogBetaBinomial_ffd_596;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_597> AgradCcdfLogBetaBinomial_ffd_597;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_598> AgradCcdfLogBetaBinomial_ffd_598;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_599> AgradCcdfLogBetaBinomial_ffd_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_500, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_501, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_502, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_503, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_504, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_505, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_506, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_507, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_508, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_509, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_510, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_511, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_512, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_513, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_514, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_515, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_516, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_517, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_518, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_519, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_520, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_521, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_522, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_523, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_524, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_525, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_526, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_527, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_528, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_529, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_530, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_531, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_532, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_533, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_534, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_535, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_536, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_537, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_538, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_539, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_540, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_541, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_542, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_543, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_544, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_545, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_546, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_547, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_548, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_549, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_550, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_551, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_552, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_553, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_554, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_555, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_556, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_557, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_558, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_559, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_560, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_561, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_562, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_563, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_564, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_565, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_566, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_567, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_568, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_569, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_570, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_571, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_572, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_573, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_574, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_575, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_576, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_577, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_578, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_579, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_580, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_581, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_582, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_583, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_584, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_585, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_586, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_587, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_588, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_589, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_590, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_591, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_592, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_593, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_594, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_595, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_596, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_597, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_598, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_599, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_599);

