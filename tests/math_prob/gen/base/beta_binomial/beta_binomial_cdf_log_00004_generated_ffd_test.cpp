#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_499;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_400> AgradCdfLogBetaBinomial_ffd_400;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_401> AgradCdfLogBetaBinomial_ffd_401;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_402> AgradCdfLogBetaBinomial_ffd_402;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_403> AgradCdfLogBetaBinomial_ffd_403;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_404> AgradCdfLogBetaBinomial_ffd_404;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_405> AgradCdfLogBetaBinomial_ffd_405;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_406> AgradCdfLogBetaBinomial_ffd_406;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_407> AgradCdfLogBetaBinomial_ffd_407;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_408> AgradCdfLogBetaBinomial_ffd_408;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_409> AgradCdfLogBetaBinomial_ffd_409;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_410> AgradCdfLogBetaBinomial_ffd_410;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_411> AgradCdfLogBetaBinomial_ffd_411;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_412> AgradCdfLogBetaBinomial_ffd_412;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_413> AgradCdfLogBetaBinomial_ffd_413;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_414> AgradCdfLogBetaBinomial_ffd_414;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_415> AgradCdfLogBetaBinomial_ffd_415;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_416> AgradCdfLogBetaBinomial_ffd_416;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_417> AgradCdfLogBetaBinomial_ffd_417;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_418> AgradCdfLogBetaBinomial_ffd_418;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_419> AgradCdfLogBetaBinomial_ffd_419;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_420> AgradCdfLogBetaBinomial_ffd_420;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_421> AgradCdfLogBetaBinomial_ffd_421;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_422> AgradCdfLogBetaBinomial_ffd_422;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_423> AgradCdfLogBetaBinomial_ffd_423;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_424> AgradCdfLogBetaBinomial_ffd_424;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_425> AgradCdfLogBetaBinomial_ffd_425;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_426> AgradCdfLogBetaBinomial_ffd_426;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_427> AgradCdfLogBetaBinomial_ffd_427;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_428> AgradCdfLogBetaBinomial_ffd_428;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_429> AgradCdfLogBetaBinomial_ffd_429;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_430> AgradCdfLogBetaBinomial_ffd_430;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_431> AgradCdfLogBetaBinomial_ffd_431;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_432> AgradCdfLogBetaBinomial_ffd_432;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_433> AgradCdfLogBetaBinomial_ffd_433;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_434> AgradCdfLogBetaBinomial_ffd_434;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_435> AgradCdfLogBetaBinomial_ffd_435;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_436> AgradCdfLogBetaBinomial_ffd_436;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_437> AgradCdfLogBetaBinomial_ffd_437;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_438> AgradCdfLogBetaBinomial_ffd_438;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_439> AgradCdfLogBetaBinomial_ffd_439;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_440> AgradCdfLogBetaBinomial_ffd_440;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_441> AgradCdfLogBetaBinomial_ffd_441;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_442> AgradCdfLogBetaBinomial_ffd_442;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_443> AgradCdfLogBetaBinomial_ffd_443;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_444> AgradCdfLogBetaBinomial_ffd_444;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_445> AgradCdfLogBetaBinomial_ffd_445;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_446> AgradCdfLogBetaBinomial_ffd_446;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_447> AgradCdfLogBetaBinomial_ffd_447;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_448> AgradCdfLogBetaBinomial_ffd_448;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_449> AgradCdfLogBetaBinomial_ffd_449;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_450> AgradCdfLogBetaBinomial_ffd_450;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_451> AgradCdfLogBetaBinomial_ffd_451;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_452> AgradCdfLogBetaBinomial_ffd_452;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_453> AgradCdfLogBetaBinomial_ffd_453;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_454> AgradCdfLogBetaBinomial_ffd_454;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_455> AgradCdfLogBetaBinomial_ffd_455;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_456> AgradCdfLogBetaBinomial_ffd_456;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_457> AgradCdfLogBetaBinomial_ffd_457;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_458> AgradCdfLogBetaBinomial_ffd_458;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_459> AgradCdfLogBetaBinomial_ffd_459;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_460> AgradCdfLogBetaBinomial_ffd_460;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_461> AgradCdfLogBetaBinomial_ffd_461;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_462> AgradCdfLogBetaBinomial_ffd_462;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_463> AgradCdfLogBetaBinomial_ffd_463;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_464> AgradCdfLogBetaBinomial_ffd_464;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_465> AgradCdfLogBetaBinomial_ffd_465;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_466> AgradCdfLogBetaBinomial_ffd_466;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_467> AgradCdfLogBetaBinomial_ffd_467;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_468> AgradCdfLogBetaBinomial_ffd_468;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_469> AgradCdfLogBetaBinomial_ffd_469;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_470> AgradCdfLogBetaBinomial_ffd_470;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_471> AgradCdfLogBetaBinomial_ffd_471;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_472> AgradCdfLogBetaBinomial_ffd_472;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_473> AgradCdfLogBetaBinomial_ffd_473;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_474> AgradCdfLogBetaBinomial_ffd_474;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_475> AgradCdfLogBetaBinomial_ffd_475;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_476> AgradCdfLogBetaBinomial_ffd_476;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_477> AgradCdfLogBetaBinomial_ffd_477;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_478> AgradCdfLogBetaBinomial_ffd_478;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_479> AgradCdfLogBetaBinomial_ffd_479;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_480> AgradCdfLogBetaBinomial_ffd_480;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_481> AgradCdfLogBetaBinomial_ffd_481;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_482> AgradCdfLogBetaBinomial_ffd_482;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_483> AgradCdfLogBetaBinomial_ffd_483;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_484> AgradCdfLogBetaBinomial_ffd_484;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_485> AgradCdfLogBetaBinomial_ffd_485;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_486> AgradCdfLogBetaBinomial_ffd_486;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_487> AgradCdfLogBetaBinomial_ffd_487;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_488> AgradCdfLogBetaBinomial_ffd_488;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_489> AgradCdfLogBetaBinomial_ffd_489;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_490> AgradCdfLogBetaBinomial_ffd_490;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_491> AgradCdfLogBetaBinomial_ffd_491;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_492> AgradCdfLogBetaBinomial_ffd_492;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_493> AgradCdfLogBetaBinomial_ffd_493;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_494> AgradCdfLogBetaBinomial_ffd_494;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_495> AgradCdfLogBetaBinomial_ffd_495;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_496> AgradCdfLogBetaBinomial_ffd_496;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_497> AgradCdfLogBetaBinomial_ffd_497;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_498> AgradCdfLogBetaBinomial_ffd_498;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_499> AgradCdfLogBetaBinomial_ffd_499;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_400, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_401, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_402, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_403, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_404, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_405, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_406, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_407, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_408, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_409, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_410, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_411, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_412, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_413, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_414, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_415, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_416, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_417, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_418, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_419, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_420, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_421, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_422, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_423, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_424, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_425, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_426, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_427, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_428, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_429, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_430, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_431, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_432, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_433, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_434, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_435, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_436, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_437, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_438, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_439, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_440, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_441, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_442, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_443, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_444, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_445, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_446, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_447, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_448, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_449, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_450, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_451, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_452, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_453, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_454, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_455, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_456, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_457, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_458, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_459, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_460, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_461, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_462, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_463, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_464, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_465, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_466, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_467, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_468, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_469, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_470, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_471, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_472, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_473, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_474, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_475, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_476, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_477, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_478, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_479, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_480, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_481, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_482, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_483, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_484, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_485, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_486, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_487, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_488, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_489, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_490, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_491, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_492, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_493, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_494, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_495, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_496, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_497, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_498, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_499, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_499);

