#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, double, empty, empty> type_ffv_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<fvar<var> >, empty, empty> type_ffv_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, double, empty, empty> type_ffv_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<var> >, empty, empty> type_ffv_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, double, empty, empty> type_ffv_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_499;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_400> AgradCcdfLogBetaBinomial_ffv_400;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_401> AgradCcdfLogBetaBinomial_ffv_401;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_402> AgradCcdfLogBetaBinomial_ffv_402;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_403> AgradCcdfLogBetaBinomial_ffv_403;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_404> AgradCcdfLogBetaBinomial_ffv_404;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_405> AgradCcdfLogBetaBinomial_ffv_405;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_406> AgradCcdfLogBetaBinomial_ffv_406;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_407> AgradCcdfLogBetaBinomial_ffv_407;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_408> AgradCcdfLogBetaBinomial_ffv_408;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_409> AgradCcdfLogBetaBinomial_ffv_409;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_410> AgradCcdfLogBetaBinomial_ffv_410;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_411> AgradCcdfLogBetaBinomial_ffv_411;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_412> AgradCcdfLogBetaBinomial_ffv_412;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_413> AgradCcdfLogBetaBinomial_ffv_413;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_414> AgradCcdfLogBetaBinomial_ffv_414;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_415> AgradCcdfLogBetaBinomial_ffv_415;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_416> AgradCcdfLogBetaBinomial_ffv_416;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_417> AgradCcdfLogBetaBinomial_ffv_417;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_418> AgradCcdfLogBetaBinomial_ffv_418;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_419> AgradCcdfLogBetaBinomial_ffv_419;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_420> AgradCcdfLogBetaBinomial_ffv_420;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_421> AgradCcdfLogBetaBinomial_ffv_421;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_422> AgradCcdfLogBetaBinomial_ffv_422;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_423> AgradCcdfLogBetaBinomial_ffv_423;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_424> AgradCcdfLogBetaBinomial_ffv_424;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_425> AgradCcdfLogBetaBinomial_ffv_425;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_426> AgradCcdfLogBetaBinomial_ffv_426;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_427> AgradCcdfLogBetaBinomial_ffv_427;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_428> AgradCcdfLogBetaBinomial_ffv_428;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_429> AgradCcdfLogBetaBinomial_ffv_429;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_430> AgradCcdfLogBetaBinomial_ffv_430;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_431> AgradCcdfLogBetaBinomial_ffv_431;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_432> AgradCcdfLogBetaBinomial_ffv_432;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_433> AgradCcdfLogBetaBinomial_ffv_433;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_434> AgradCcdfLogBetaBinomial_ffv_434;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_435> AgradCcdfLogBetaBinomial_ffv_435;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_436> AgradCcdfLogBetaBinomial_ffv_436;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_437> AgradCcdfLogBetaBinomial_ffv_437;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_438> AgradCcdfLogBetaBinomial_ffv_438;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_439> AgradCcdfLogBetaBinomial_ffv_439;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_440> AgradCcdfLogBetaBinomial_ffv_440;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_441> AgradCcdfLogBetaBinomial_ffv_441;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_442> AgradCcdfLogBetaBinomial_ffv_442;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_443> AgradCcdfLogBetaBinomial_ffv_443;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_444> AgradCcdfLogBetaBinomial_ffv_444;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_445> AgradCcdfLogBetaBinomial_ffv_445;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_446> AgradCcdfLogBetaBinomial_ffv_446;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_447> AgradCcdfLogBetaBinomial_ffv_447;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_448> AgradCcdfLogBetaBinomial_ffv_448;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_449> AgradCcdfLogBetaBinomial_ffv_449;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_450> AgradCcdfLogBetaBinomial_ffv_450;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_451> AgradCcdfLogBetaBinomial_ffv_451;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_452> AgradCcdfLogBetaBinomial_ffv_452;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_453> AgradCcdfLogBetaBinomial_ffv_453;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_454> AgradCcdfLogBetaBinomial_ffv_454;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_455> AgradCcdfLogBetaBinomial_ffv_455;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_456> AgradCcdfLogBetaBinomial_ffv_456;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_457> AgradCcdfLogBetaBinomial_ffv_457;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_458> AgradCcdfLogBetaBinomial_ffv_458;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_459> AgradCcdfLogBetaBinomial_ffv_459;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_460> AgradCcdfLogBetaBinomial_ffv_460;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_461> AgradCcdfLogBetaBinomial_ffv_461;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_462> AgradCcdfLogBetaBinomial_ffv_462;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_463> AgradCcdfLogBetaBinomial_ffv_463;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_464> AgradCcdfLogBetaBinomial_ffv_464;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_465> AgradCcdfLogBetaBinomial_ffv_465;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_466> AgradCcdfLogBetaBinomial_ffv_466;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_467> AgradCcdfLogBetaBinomial_ffv_467;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_468> AgradCcdfLogBetaBinomial_ffv_468;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_469> AgradCcdfLogBetaBinomial_ffv_469;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_470> AgradCcdfLogBetaBinomial_ffv_470;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_471> AgradCcdfLogBetaBinomial_ffv_471;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_472> AgradCcdfLogBetaBinomial_ffv_472;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_473> AgradCcdfLogBetaBinomial_ffv_473;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_474> AgradCcdfLogBetaBinomial_ffv_474;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_475> AgradCcdfLogBetaBinomial_ffv_475;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_476> AgradCcdfLogBetaBinomial_ffv_476;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_477> AgradCcdfLogBetaBinomial_ffv_477;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_478> AgradCcdfLogBetaBinomial_ffv_478;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_479> AgradCcdfLogBetaBinomial_ffv_479;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_480> AgradCcdfLogBetaBinomial_ffv_480;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_481> AgradCcdfLogBetaBinomial_ffv_481;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_482> AgradCcdfLogBetaBinomial_ffv_482;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_483> AgradCcdfLogBetaBinomial_ffv_483;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_484> AgradCcdfLogBetaBinomial_ffv_484;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_485> AgradCcdfLogBetaBinomial_ffv_485;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_486> AgradCcdfLogBetaBinomial_ffv_486;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_487> AgradCcdfLogBetaBinomial_ffv_487;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_488> AgradCcdfLogBetaBinomial_ffv_488;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_489> AgradCcdfLogBetaBinomial_ffv_489;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_490> AgradCcdfLogBetaBinomial_ffv_490;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_491> AgradCcdfLogBetaBinomial_ffv_491;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_492> AgradCcdfLogBetaBinomial_ffv_492;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_493> AgradCcdfLogBetaBinomial_ffv_493;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_494> AgradCcdfLogBetaBinomial_ffv_494;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_495> AgradCcdfLogBetaBinomial_ffv_495;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_496> AgradCcdfLogBetaBinomial_ffv_496;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_497> AgradCcdfLogBetaBinomial_ffv_497;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_498> AgradCcdfLogBetaBinomial_ffv_498;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_499> AgradCcdfLogBetaBinomial_ffv_499;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_400, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_401, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_402, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_403, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_404, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_405, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_406, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_407, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_408, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_409, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_410, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_411, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_412, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_413, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_414, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_415, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_416, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_417, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_418, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_419, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_420, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_421, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_422, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_423, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_424, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_425, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_426, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_427, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_428, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_429, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_430, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_431, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_432, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_433, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_434, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_435, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_436, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_437, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_438, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_439, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_440, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_441, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_442, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_443, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_444, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_445, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_446, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_447, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_448, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_449, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_450, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_451, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_452, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_453, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_454, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_455, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_456, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_457, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_458, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_459, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_460, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_461, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_462, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_463, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_464, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_465, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_466, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_467, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_468, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_469, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_470, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_471, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_472, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_473, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_474, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_475, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_476, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_477, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_478, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_479, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_480, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_481, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_482, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_483, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_484, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_485, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_486, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_487, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_488, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_489, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_490, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_491, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_492, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_493, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_494, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_495, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_496, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_497, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_498, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_499, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_499);

