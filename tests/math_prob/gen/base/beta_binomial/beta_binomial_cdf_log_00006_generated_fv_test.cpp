#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, double, empty, empty> type_fv_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<var>, empty, empty> type_fv_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<var>>, empty, empty> type_fv_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<var>, empty, empty> type_fv_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, double, empty, empty> type_fv_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, std::vector<double>, empty, empty> type_fv_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, fvar<var>, empty, empty> type_fv_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, double, empty, empty> type_fv_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<var>, empty, empty> type_fv_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<var>>, empty, empty> type_fv_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<var>, empty, empty> type_fv_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, double, empty, empty> type_fv_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<double>, empty, empty> type_fv_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, fvar<var>, empty, empty> type_fv_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, double, empty, empty> type_fv_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_699;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_600> AgradCdfLogBetaBinomial_fv_600;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_601> AgradCdfLogBetaBinomial_fv_601;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_602> AgradCdfLogBetaBinomial_fv_602;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_603> AgradCdfLogBetaBinomial_fv_603;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_604> AgradCdfLogBetaBinomial_fv_604;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_605> AgradCdfLogBetaBinomial_fv_605;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_606> AgradCdfLogBetaBinomial_fv_606;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_607> AgradCdfLogBetaBinomial_fv_607;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_608> AgradCdfLogBetaBinomial_fv_608;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_609> AgradCdfLogBetaBinomial_fv_609;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_610> AgradCdfLogBetaBinomial_fv_610;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_611> AgradCdfLogBetaBinomial_fv_611;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_612> AgradCdfLogBetaBinomial_fv_612;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_613> AgradCdfLogBetaBinomial_fv_613;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_614> AgradCdfLogBetaBinomial_fv_614;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_615> AgradCdfLogBetaBinomial_fv_615;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_616> AgradCdfLogBetaBinomial_fv_616;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_617> AgradCdfLogBetaBinomial_fv_617;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_618> AgradCdfLogBetaBinomial_fv_618;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_619> AgradCdfLogBetaBinomial_fv_619;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_620> AgradCdfLogBetaBinomial_fv_620;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_621> AgradCdfLogBetaBinomial_fv_621;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_622> AgradCdfLogBetaBinomial_fv_622;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_623> AgradCdfLogBetaBinomial_fv_623;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_624> AgradCdfLogBetaBinomial_fv_624;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_625> AgradCdfLogBetaBinomial_fv_625;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_626> AgradCdfLogBetaBinomial_fv_626;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_627> AgradCdfLogBetaBinomial_fv_627;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_628> AgradCdfLogBetaBinomial_fv_628;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_629> AgradCdfLogBetaBinomial_fv_629;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_630> AgradCdfLogBetaBinomial_fv_630;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_631> AgradCdfLogBetaBinomial_fv_631;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_632> AgradCdfLogBetaBinomial_fv_632;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_633> AgradCdfLogBetaBinomial_fv_633;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_634> AgradCdfLogBetaBinomial_fv_634;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_635> AgradCdfLogBetaBinomial_fv_635;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_636> AgradCdfLogBetaBinomial_fv_636;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_637> AgradCdfLogBetaBinomial_fv_637;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_638> AgradCdfLogBetaBinomial_fv_638;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_639> AgradCdfLogBetaBinomial_fv_639;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_640> AgradCdfLogBetaBinomial_fv_640;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_641> AgradCdfLogBetaBinomial_fv_641;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_642> AgradCdfLogBetaBinomial_fv_642;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_643> AgradCdfLogBetaBinomial_fv_643;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_644> AgradCdfLogBetaBinomial_fv_644;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_645> AgradCdfLogBetaBinomial_fv_645;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_646> AgradCdfLogBetaBinomial_fv_646;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_647> AgradCdfLogBetaBinomial_fv_647;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_648> AgradCdfLogBetaBinomial_fv_648;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_649> AgradCdfLogBetaBinomial_fv_649;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_650> AgradCdfLogBetaBinomial_fv_650;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_651> AgradCdfLogBetaBinomial_fv_651;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_652> AgradCdfLogBetaBinomial_fv_652;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_653> AgradCdfLogBetaBinomial_fv_653;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_654> AgradCdfLogBetaBinomial_fv_654;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_655> AgradCdfLogBetaBinomial_fv_655;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_656> AgradCdfLogBetaBinomial_fv_656;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_657> AgradCdfLogBetaBinomial_fv_657;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_658> AgradCdfLogBetaBinomial_fv_658;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_659> AgradCdfLogBetaBinomial_fv_659;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_660> AgradCdfLogBetaBinomial_fv_660;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_661> AgradCdfLogBetaBinomial_fv_661;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_662> AgradCdfLogBetaBinomial_fv_662;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_663> AgradCdfLogBetaBinomial_fv_663;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_664> AgradCdfLogBetaBinomial_fv_664;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_665> AgradCdfLogBetaBinomial_fv_665;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_666> AgradCdfLogBetaBinomial_fv_666;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_667> AgradCdfLogBetaBinomial_fv_667;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_668> AgradCdfLogBetaBinomial_fv_668;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_669> AgradCdfLogBetaBinomial_fv_669;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_670> AgradCdfLogBetaBinomial_fv_670;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_671> AgradCdfLogBetaBinomial_fv_671;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_672> AgradCdfLogBetaBinomial_fv_672;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_673> AgradCdfLogBetaBinomial_fv_673;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_674> AgradCdfLogBetaBinomial_fv_674;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_675> AgradCdfLogBetaBinomial_fv_675;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_676> AgradCdfLogBetaBinomial_fv_676;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_677> AgradCdfLogBetaBinomial_fv_677;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_678> AgradCdfLogBetaBinomial_fv_678;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_679> AgradCdfLogBetaBinomial_fv_679;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_680> AgradCdfLogBetaBinomial_fv_680;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_681> AgradCdfLogBetaBinomial_fv_681;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_682> AgradCdfLogBetaBinomial_fv_682;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_683> AgradCdfLogBetaBinomial_fv_683;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_684> AgradCdfLogBetaBinomial_fv_684;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_685> AgradCdfLogBetaBinomial_fv_685;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_686> AgradCdfLogBetaBinomial_fv_686;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_687> AgradCdfLogBetaBinomial_fv_687;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_688> AgradCdfLogBetaBinomial_fv_688;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_689> AgradCdfLogBetaBinomial_fv_689;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_690> AgradCdfLogBetaBinomial_fv_690;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_691> AgradCdfLogBetaBinomial_fv_691;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_692> AgradCdfLogBetaBinomial_fv_692;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_693> AgradCdfLogBetaBinomial_fv_693;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_694> AgradCdfLogBetaBinomial_fv_694;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_695> AgradCdfLogBetaBinomial_fv_695;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_696> AgradCdfLogBetaBinomial_fv_696;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_697> AgradCdfLogBetaBinomial_fv_697;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_698> AgradCdfLogBetaBinomial_fv_698;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_699> AgradCdfLogBetaBinomial_fv_699;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_600, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_601, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_602, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_603, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_604, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_605, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_606, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_607, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_608, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_609, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_610, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_611, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_612, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_613, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_614, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_615, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_616, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_617, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_618, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_619, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_620, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_621, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_622, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_623, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_624, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_625, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_626, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_627, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_628, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_629, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_630, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_631, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_632, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_633, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_634, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_635, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_636, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_637, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_638, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_639, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_640, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_641, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_642, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_643, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_644, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_645, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_646, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_647, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_648, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_649, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_650, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_651, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_652, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_653, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_654, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_655, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_656, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_657, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_658, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_659, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_660, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_661, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_662, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_663, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_664, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_665, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_666, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_667, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_668, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_669, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_670, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_671, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_672, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_673, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_674, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_675, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_676, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_677, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_678, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_679, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_680, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_681, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_682, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_683, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_684, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_685, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_686, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_687, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_688, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_689, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_690, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_691, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_692, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_693, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_694, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_695, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_696, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_697, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_698, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_699, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_699);

