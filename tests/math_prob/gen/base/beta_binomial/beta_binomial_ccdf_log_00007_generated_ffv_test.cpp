#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty> type_ffv_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty> type_ffv_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_767;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_700> AgradCcdfLogBetaBinomial_ffv_700;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_701> AgradCcdfLogBetaBinomial_ffv_701;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_702> AgradCcdfLogBetaBinomial_ffv_702;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_703> AgradCcdfLogBetaBinomial_ffv_703;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_704> AgradCcdfLogBetaBinomial_ffv_704;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_705> AgradCcdfLogBetaBinomial_ffv_705;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_706> AgradCcdfLogBetaBinomial_ffv_706;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_707> AgradCcdfLogBetaBinomial_ffv_707;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_708> AgradCcdfLogBetaBinomial_ffv_708;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_709> AgradCcdfLogBetaBinomial_ffv_709;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_710> AgradCcdfLogBetaBinomial_ffv_710;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_711> AgradCcdfLogBetaBinomial_ffv_711;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_712> AgradCcdfLogBetaBinomial_ffv_712;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_713> AgradCcdfLogBetaBinomial_ffv_713;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_714> AgradCcdfLogBetaBinomial_ffv_714;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_715> AgradCcdfLogBetaBinomial_ffv_715;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_716> AgradCcdfLogBetaBinomial_ffv_716;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_717> AgradCcdfLogBetaBinomial_ffv_717;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_718> AgradCcdfLogBetaBinomial_ffv_718;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_719> AgradCcdfLogBetaBinomial_ffv_719;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_720> AgradCcdfLogBetaBinomial_ffv_720;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_721> AgradCcdfLogBetaBinomial_ffv_721;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_722> AgradCcdfLogBetaBinomial_ffv_722;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_723> AgradCcdfLogBetaBinomial_ffv_723;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_724> AgradCcdfLogBetaBinomial_ffv_724;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_725> AgradCcdfLogBetaBinomial_ffv_725;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_726> AgradCcdfLogBetaBinomial_ffv_726;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_727> AgradCcdfLogBetaBinomial_ffv_727;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_728> AgradCcdfLogBetaBinomial_ffv_728;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_729> AgradCcdfLogBetaBinomial_ffv_729;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_730> AgradCcdfLogBetaBinomial_ffv_730;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_731> AgradCcdfLogBetaBinomial_ffv_731;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_732> AgradCcdfLogBetaBinomial_ffv_732;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_733> AgradCcdfLogBetaBinomial_ffv_733;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_734> AgradCcdfLogBetaBinomial_ffv_734;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_735> AgradCcdfLogBetaBinomial_ffv_735;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_736> AgradCcdfLogBetaBinomial_ffv_736;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_737> AgradCcdfLogBetaBinomial_ffv_737;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_738> AgradCcdfLogBetaBinomial_ffv_738;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_739> AgradCcdfLogBetaBinomial_ffv_739;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_740> AgradCcdfLogBetaBinomial_ffv_740;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_741> AgradCcdfLogBetaBinomial_ffv_741;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_742> AgradCcdfLogBetaBinomial_ffv_742;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_743> AgradCcdfLogBetaBinomial_ffv_743;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_744> AgradCcdfLogBetaBinomial_ffv_744;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_745> AgradCcdfLogBetaBinomial_ffv_745;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_746> AgradCcdfLogBetaBinomial_ffv_746;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_747> AgradCcdfLogBetaBinomial_ffv_747;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_748> AgradCcdfLogBetaBinomial_ffv_748;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_749> AgradCcdfLogBetaBinomial_ffv_749;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_750> AgradCcdfLogBetaBinomial_ffv_750;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_751> AgradCcdfLogBetaBinomial_ffv_751;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_752> AgradCcdfLogBetaBinomial_ffv_752;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_753> AgradCcdfLogBetaBinomial_ffv_753;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_754> AgradCcdfLogBetaBinomial_ffv_754;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_755> AgradCcdfLogBetaBinomial_ffv_755;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_756> AgradCcdfLogBetaBinomial_ffv_756;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_757> AgradCcdfLogBetaBinomial_ffv_757;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_758> AgradCcdfLogBetaBinomial_ffv_758;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_759> AgradCcdfLogBetaBinomial_ffv_759;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_760> AgradCcdfLogBetaBinomial_ffv_760;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_761> AgradCcdfLogBetaBinomial_ffv_761;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_762> AgradCcdfLogBetaBinomial_ffv_762;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_763> AgradCcdfLogBetaBinomial_ffv_763;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_764> AgradCcdfLogBetaBinomial_ffv_764;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_765> AgradCcdfLogBetaBinomial_ffv_765;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_766> AgradCcdfLogBetaBinomial_ffv_766;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffv_767> AgradCcdfLogBetaBinomial_ffv_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_700, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_701, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_702, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_703, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_704, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_705, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_706, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_707, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_708, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_709, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_710, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_711, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_712, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_713, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_714, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_715, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_716, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_717, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_718, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_719, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_720, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_721, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_722, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_723, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_724, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_725, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_726, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_727, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_728, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_729, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_730, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_731, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_732, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_733, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_734, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_735, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_736, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_737, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_738, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_739, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_740, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_741, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_742, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_743, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_744, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_745, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_746, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_747, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_748, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_749, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_750, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_751, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_752, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_753, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_754, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_755, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_756, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_757, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_758, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_759, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_760, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_761, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_762, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_763, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_764, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_765, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_766, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffv_767, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffv_767);

