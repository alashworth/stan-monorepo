#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_700;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_701;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_702;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_703;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, double, empty, empty> type_v_704;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<double>, empty, empty> type_v_705;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_706;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_707;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, var, empty, empty> type_v_708;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<var>, empty, empty> type_v_709;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_710;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_711;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, double, empty, empty> type_v_712;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<double>, empty, empty> type_v_713;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_714;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_715;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, var, empty, empty> type_v_716;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<var>, empty, empty> type_v_717;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_718;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_719;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_720;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_721;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_722;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_723;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_724;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_725;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_726;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_727;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_728;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_729;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_730;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_731;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_732;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_733;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_734;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_735;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, double, empty, empty> type_v_736;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, std::vector<double>, empty, empty> type_v_737;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_738;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_739;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, var, empty, empty> type_v_740;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, std::vector<var>, empty, empty> type_v_741;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_742;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_743;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, double, empty, empty> type_v_744;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, std::vector<double>, empty, empty> type_v_745;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_746;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_747;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, var, empty, empty> type_v_748;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, std::vector<var>, empty, empty> type_v_749;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_750;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_751;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_752;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_753;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_754;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_755;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_756;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_757;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_758;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_759;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_760;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_761;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_762;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_763;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_764;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_765;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_766;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_767;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, double, empty, empty> type_v_768;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<double>, empty, empty> type_v_769;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_770;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_771;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, var, empty, empty> type_v_772;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<var>, empty, empty> type_v_773;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_774;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_775;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, double, empty, empty> type_v_776;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<double>, empty, empty> type_v_777;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_778;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_779;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, var, empty, empty> type_v_780;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<var>, empty, empty> type_v_781;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_782;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_783;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_784;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_785;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_786;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_787;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_788;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_789;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_790;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_791;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_792;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_793;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_794;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_795;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_796;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_797;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_798;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_799;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_700> AgradCdfLogBetaBinomial_v_700;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_701> AgradCdfLogBetaBinomial_v_701;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_702> AgradCdfLogBetaBinomial_v_702;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_703> AgradCdfLogBetaBinomial_v_703;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_704> AgradCdfLogBetaBinomial_v_704;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_705> AgradCdfLogBetaBinomial_v_705;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_706> AgradCdfLogBetaBinomial_v_706;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_707> AgradCdfLogBetaBinomial_v_707;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_708> AgradCdfLogBetaBinomial_v_708;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_709> AgradCdfLogBetaBinomial_v_709;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_710> AgradCdfLogBetaBinomial_v_710;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_711> AgradCdfLogBetaBinomial_v_711;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_712> AgradCdfLogBetaBinomial_v_712;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_713> AgradCdfLogBetaBinomial_v_713;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_714> AgradCdfLogBetaBinomial_v_714;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_715> AgradCdfLogBetaBinomial_v_715;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_716> AgradCdfLogBetaBinomial_v_716;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_717> AgradCdfLogBetaBinomial_v_717;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_718> AgradCdfLogBetaBinomial_v_718;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_719> AgradCdfLogBetaBinomial_v_719;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_720> AgradCdfLogBetaBinomial_v_720;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_721> AgradCdfLogBetaBinomial_v_721;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_722> AgradCdfLogBetaBinomial_v_722;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_723> AgradCdfLogBetaBinomial_v_723;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_724> AgradCdfLogBetaBinomial_v_724;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_725> AgradCdfLogBetaBinomial_v_725;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_726> AgradCdfLogBetaBinomial_v_726;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_727> AgradCdfLogBetaBinomial_v_727;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_728> AgradCdfLogBetaBinomial_v_728;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_729> AgradCdfLogBetaBinomial_v_729;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_730> AgradCdfLogBetaBinomial_v_730;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_731> AgradCdfLogBetaBinomial_v_731;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_732> AgradCdfLogBetaBinomial_v_732;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_733> AgradCdfLogBetaBinomial_v_733;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_734> AgradCdfLogBetaBinomial_v_734;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_735> AgradCdfLogBetaBinomial_v_735;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_736> AgradCdfLogBetaBinomial_v_736;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_737> AgradCdfLogBetaBinomial_v_737;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_738> AgradCdfLogBetaBinomial_v_738;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_739> AgradCdfLogBetaBinomial_v_739;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_740> AgradCdfLogBetaBinomial_v_740;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_741> AgradCdfLogBetaBinomial_v_741;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_742> AgradCdfLogBetaBinomial_v_742;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_743> AgradCdfLogBetaBinomial_v_743;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_744> AgradCdfLogBetaBinomial_v_744;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_745> AgradCdfLogBetaBinomial_v_745;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_746> AgradCdfLogBetaBinomial_v_746;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_747> AgradCdfLogBetaBinomial_v_747;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_748> AgradCdfLogBetaBinomial_v_748;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_749> AgradCdfLogBetaBinomial_v_749;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_750> AgradCdfLogBetaBinomial_v_750;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_751> AgradCdfLogBetaBinomial_v_751;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_752> AgradCdfLogBetaBinomial_v_752;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_753> AgradCdfLogBetaBinomial_v_753;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_754> AgradCdfLogBetaBinomial_v_754;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_755> AgradCdfLogBetaBinomial_v_755;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_756> AgradCdfLogBetaBinomial_v_756;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_757> AgradCdfLogBetaBinomial_v_757;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_758> AgradCdfLogBetaBinomial_v_758;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_759> AgradCdfLogBetaBinomial_v_759;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_760> AgradCdfLogBetaBinomial_v_760;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_761> AgradCdfLogBetaBinomial_v_761;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_762> AgradCdfLogBetaBinomial_v_762;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_763> AgradCdfLogBetaBinomial_v_763;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_764> AgradCdfLogBetaBinomial_v_764;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_765> AgradCdfLogBetaBinomial_v_765;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_766> AgradCdfLogBetaBinomial_v_766;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_767> AgradCdfLogBetaBinomial_v_767;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_768> AgradCdfLogBetaBinomial_v_768;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_769> AgradCdfLogBetaBinomial_v_769;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_770> AgradCdfLogBetaBinomial_v_770;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_771> AgradCdfLogBetaBinomial_v_771;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_772> AgradCdfLogBetaBinomial_v_772;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_773> AgradCdfLogBetaBinomial_v_773;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_774> AgradCdfLogBetaBinomial_v_774;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_775> AgradCdfLogBetaBinomial_v_775;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_776> AgradCdfLogBetaBinomial_v_776;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_777> AgradCdfLogBetaBinomial_v_777;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_778> AgradCdfLogBetaBinomial_v_778;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_779> AgradCdfLogBetaBinomial_v_779;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_780> AgradCdfLogBetaBinomial_v_780;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_781> AgradCdfLogBetaBinomial_v_781;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_782> AgradCdfLogBetaBinomial_v_782;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_783> AgradCdfLogBetaBinomial_v_783;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_784> AgradCdfLogBetaBinomial_v_784;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_785> AgradCdfLogBetaBinomial_v_785;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_786> AgradCdfLogBetaBinomial_v_786;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_787> AgradCdfLogBetaBinomial_v_787;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_788> AgradCdfLogBetaBinomial_v_788;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_789> AgradCdfLogBetaBinomial_v_789;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_790> AgradCdfLogBetaBinomial_v_790;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_791> AgradCdfLogBetaBinomial_v_791;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_792> AgradCdfLogBetaBinomial_v_792;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_793> AgradCdfLogBetaBinomial_v_793;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_794> AgradCdfLogBetaBinomial_v_794;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_795> AgradCdfLogBetaBinomial_v_795;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_796> AgradCdfLogBetaBinomial_v_796;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_797> AgradCdfLogBetaBinomial_v_797;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_798> AgradCdfLogBetaBinomial_v_798;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_799> AgradCdfLogBetaBinomial_v_799;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_700, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_701, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_702, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_703, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_704, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_705, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_706, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_707, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_708, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_709, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_710, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_711, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_712, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_713, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_714, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_715, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_716, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_717, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_718, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_719, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_720, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_721, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_722, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_723, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_724, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_725, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_726, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_727, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_728, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_729, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_730, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_731, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_732, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_733, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_734, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_735, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_736, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_737, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_738, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_739, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_740, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_741, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_742, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_743, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_744, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_745, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_746, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_747, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_748, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_749, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_750, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_751, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_752, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_753, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_754, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_755, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_756, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_757, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_758, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_759, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_760, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_761, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_762, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_763, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_764, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_765, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_766, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_767, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_767);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_768, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_768);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_769, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_769);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_770, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_770);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_771, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_771);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_772, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_772);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_773, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_773);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_774, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_774);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_775, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_775);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_776, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_776);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_777, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_777);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_778, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_778);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_779, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_779);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_780, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_780);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_781, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_781);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_782, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_782);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_783, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_783);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_784, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_784);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_785, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_785);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_786, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_786);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_787, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_787);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_788, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_788);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_789, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_789);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_790, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_790);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_791, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_791);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_792, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_792);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_793, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_793);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_794, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_794);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_795, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_795);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_796, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_796);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_797, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_797);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_798, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_798);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_799, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_799);

