#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_600;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_601;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_602;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_603;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_604;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_605;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_606;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_607;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, double, empty, empty> type_v_608;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, std::vector<double>, empty, empty> type_v_609;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_610;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_611;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, var, empty, empty> type_v_612;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, std::vector<var>, empty, empty> type_v_613;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_614;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_615;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, double, empty, empty> type_v_616;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, std::vector<double>, empty, empty> type_v_617;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_618;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_619;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, var, empty, empty> type_v_620;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, std::vector<var>, empty, empty> type_v_621;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_622;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_623;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_624;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_625;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_626;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_627;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_628;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_629;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_630;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_631;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_632;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_633;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_634;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_635;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_636;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_637;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_638;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_639;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, double, empty, empty> type_v_640;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<double>, empty, empty> type_v_641;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_642;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_643;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, var, empty, empty> type_v_644;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<var>, empty, empty> type_v_645;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_646;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_647;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, double, empty, empty> type_v_648;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<double>, empty, empty> type_v_649;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_650;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_651;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, var, empty, empty> type_v_652;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<var>, empty, empty> type_v_653;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_654;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_655;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_656;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_657;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_658;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_659;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_660;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_661;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_662;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_663;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_664;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_665;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_666;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_667;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_668;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_669;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_670;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_671;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, double, empty, empty> type_v_672;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, std::vector<double>, empty, empty> type_v_673;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_674;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_675;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, var, empty, empty> type_v_676;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, std::vector<var>, empty, empty> type_v_677;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_678;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_679;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, double, empty, empty> type_v_680;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, std::vector<double>, empty, empty> type_v_681;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_682;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_683;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, var, empty, empty> type_v_684;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, std::vector<var>, empty, empty> type_v_685;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_686;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_687;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_688;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_689;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_690;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_691;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_692;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_693;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_694;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_695;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_696;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_697;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_698;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_699;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_600> AgradCcdfLogBetaBinomial_v_600;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_601> AgradCcdfLogBetaBinomial_v_601;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_602> AgradCcdfLogBetaBinomial_v_602;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_603> AgradCcdfLogBetaBinomial_v_603;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_604> AgradCcdfLogBetaBinomial_v_604;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_605> AgradCcdfLogBetaBinomial_v_605;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_606> AgradCcdfLogBetaBinomial_v_606;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_607> AgradCcdfLogBetaBinomial_v_607;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_608> AgradCcdfLogBetaBinomial_v_608;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_609> AgradCcdfLogBetaBinomial_v_609;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_610> AgradCcdfLogBetaBinomial_v_610;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_611> AgradCcdfLogBetaBinomial_v_611;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_612> AgradCcdfLogBetaBinomial_v_612;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_613> AgradCcdfLogBetaBinomial_v_613;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_614> AgradCcdfLogBetaBinomial_v_614;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_615> AgradCcdfLogBetaBinomial_v_615;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_616> AgradCcdfLogBetaBinomial_v_616;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_617> AgradCcdfLogBetaBinomial_v_617;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_618> AgradCcdfLogBetaBinomial_v_618;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_619> AgradCcdfLogBetaBinomial_v_619;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_620> AgradCcdfLogBetaBinomial_v_620;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_621> AgradCcdfLogBetaBinomial_v_621;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_622> AgradCcdfLogBetaBinomial_v_622;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_623> AgradCcdfLogBetaBinomial_v_623;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_624> AgradCcdfLogBetaBinomial_v_624;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_625> AgradCcdfLogBetaBinomial_v_625;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_626> AgradCcdfLogBetaBinomial_v_626;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_627> AgradCcdfLogBetaBinomial_v_627;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_628> AgradCcdfLogBetaBinomial_v_628;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_629> AgradCcdfLogBetaBinomial_v_629;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_630> AgradCcdfLogBetaBinomial_v_630;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_631> AgradCcdfLogBetaBinomial_v_631;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_632> AgradCcdfLogBetaBinomial_v_632;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_633> AgradCcdfLogBetaBinomial_v_633;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_634> AgradCcdfLogBetaBinomial_v_634;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_635> AgradCcdfLogBetaBinomial_v_635;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_636> AgradCcdfLogBetaBinomial_v_636;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_637> AgradCcdfLogBetaBinomial_v_637;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_638> AgradCcdfLogBetaBinomial_v_638;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_639> AgradCcdfLogBetaBinomial_v_639;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_640> AgradCcdfLogBetaBinomial_v_640;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_641> AgradCcdfLogBetaBinomial_v_641;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_642> AgradCcdfLogBetaBinomial_v_642;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_643> AgradCcdfLogBetaBinomial_v_643;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_644> AgradCcdfLogBetaBinomial_v_644;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_645> AgradCcdfLogBetaBinomial_v_645;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_646> AgradCcdfLogBetaBinomial_v_646;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_647> AgradCcdfLogBetaBinomial_v_647;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_648> AgradCcdfLogBetaBinomial_v_648;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_649> AgradCcdfLogBetaBinomial_v_649;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_650> AgradCcdfLogBetaBinomial_v_650;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_651> AgradCcdfLogBetaBinomial_v_651;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_652> AgradCcdfLogBetaBinomial_v_652;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_653> AgradCcdfLogBetaBinomial_v_653;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_654> AgradCcdfLogBetaBinomial_v_654;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_655> AgradCcdfLogBetaBinomial_v_655;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_656> AgradCcdfLogBetaBinomial_v_656;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_657> AgradCcdfLogBetaBinomial_v_657;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_658> AgradCcdfLogBetaBinomial_v_658;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_659> AgradCcdfLogBetaBinomial_v_659;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_660> AgradCcdfLogBetaBinomial_v_660;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_661> AgradCcdfLogBetaBinomial_v_661;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_662> AgradCcdfLogBetaBinomial_v_662;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_663> AgradCcdfLogBetaBinomial_v_663;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_664> AgradCcdfLogBetaBinomial_v_664;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_665> AgradCcdfLogBetaBinomial_v_665;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_666> AgradCcdfLogBetaBinomial_v_666;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_667> AgradCcdfLogBetaBinomial_v_667;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_668> AgradCcdfLogBetaBinomial_v_668;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_669> AgradCcdfLogBetaBinomial_v_669;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_670> AgradCcdfLogBetaBinomial_v_670;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_671> AgradCcdfLogBetaBinomial_v_671;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_672> AgradCcdfLogBetaBinomial_v_672;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_673> AgradCcdfLogBetaBinomial_v_673;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_674> AgradCcdfLogBetaBinomial_v_674;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_675> AgradCcdfLogBetaBinomial_v_675;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_676> AgradCcdfLogBetaBinomial_v_676;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_677> AgradCcdfLogBetaBinomial_v_677;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_678> AgradCcdfLogBetaBinomial_v_678;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_679> AgradCcdfLogBetaBinomial_v_679;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_680> AgradCcdfLogBetaBinomial_v_680;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_681> AgradCcdfLogBetaBinomial_v_681;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_682> AgradCcdfLogBetaBinomial_v_682;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_683> AgradCcdfLogBetaBinomial_v_683;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_684> AgradCcdfLogBetaBinomial_v_684;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_685> AgradCcdfLogBetaBinomial_v_685;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_686> AgradCcdfLogBetaBinomial_v_686;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_687> AgradCcdfLogBetaBinomial_v_687;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_688> AgradCcdfLogBetaBinomial_v_688;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_689> AgradCcdfLogBetaBinomial_v_689;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_690> AgradCcdfLogBetaBinomial_v_690;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_691> AgradCcdfLogBetaBinomial_v_691;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_692> AgradCcdfLogBetaBinomial_v_692;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_693> AgradCcdfLogBetaBinomial_v_693;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_694> AgradCcdfLogBetaBinomial_v_694;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_695> AgradCcdfLogBetaBinomial_v_695;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_696> AgradCcdfLogBetaBinomial_v_696;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_697> AgradCcdfLogBetaBinomial_v_697;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_698> AgradCcdfLogBetaBinomial_v_698;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_699> AgradCcdfLogBetaBinomial_v_699;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_600, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_601, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_602, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_603, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_604, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_605, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_606, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_607, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_608, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_609, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_610, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_611, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_612, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_613, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_614, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_615, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_616, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_617, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_618, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_619, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_620, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_621, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_622, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_623, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_624, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_625, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_626, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_627, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_628, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_629, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_630, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_631, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_632, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_633, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_634, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_635, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_636, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_637, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_638, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_639, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_640, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_641, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_642, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_643, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_644, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_645, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_646, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_647, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_648, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_649, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_650, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_651, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_652, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_653, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_654, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_655, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_656, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_657, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_658, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_659, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_660, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_661, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_662, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_663, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_664, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_665, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_666, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_667, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_668, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_669, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_670, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_671, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_672, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_673, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_674, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_675, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_676, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_677, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_678, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_679, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_680, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_681, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_682, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_683, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_684, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_685, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_686, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_687, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_688, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_689, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_690, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_691, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_692, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_693, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_694, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_695, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_696, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_697, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_698, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_699, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_699);

