#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_699;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_767;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_600> AgradCcdfLogBetaBinomial_ffd_600;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_601> AgradCcdfLogBetaBinomial_ffd_601;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_602> AgradCcdfLogBetaBinomial_ffd_602;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_603> AgradCcdfLogBetaBinomial_ffd_603;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_604> AgradCcdfLogBetaBinomial_ffd_604;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_605> AgradCcdfLogBetaBinomial_ffd_605;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_606> AgradCcdfLogBetaBinomial_ffd_606;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_607> AgradCcdfLogBetaBinomial_ffd_607;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_608> AgradCcdfLogBetaBinomial_ffd_608;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_609> AgradCcdfLogBetaBinomial_ffd_609;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_610> AgradCcdfLogBetaBinomial_ffd_610;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_611> AgradCcdfLogBetaBinomial_ffd_611;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_612> AgradCcdfLogBetaBinomial_ffd_612;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_613> AgradCcdfLogBetaBinomial_ffd_613;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_614> AgradCcdfLogBetaBinomial_ffd_614;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_615> AgradCcdfLogBetaBinomial_ffd_615;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_616> AgradCcdfLogBetaBinomial_ffd_616;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_617> AgradCcdfLogBetaBinomial_ffd_617;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_618> AgradCcdfLogBetaBinomial_ffd_618;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_619> AgradCcdfLogBetaBinomial_ffd_619;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_620> AgradCcdfLogBetaBinomial_ffd_620;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_621> AgradCcdfLogBetaBinomial_ffd_621;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_622> AgradCcdfLogBetaBinomial_ffd_622;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_623> AgradCcdfLogBetaBinomial_ffd_623;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_624> AgradCcdfLogBetaBinomial_ffd_624;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_625> AgradCcdfLogBetaBinomial_ffd_625;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_626> AgradCcdfLogBetaBinomial_ffd_626;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_627> AgradCcdfLogBetaBinomial_ffd_627;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_628> AgradCcdfLogBetaBinomial_ffd_628;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_629> AgradCcdfLogBetaBinomial_ffd_629;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_630> AgradCcdfLogBetaBinomial_ffd_630;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_631> AgradCcdfLogBetaBinomial_ffd_631;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_632> AgradCcdfLogBetaBinomial_ffd_632;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_633> AgradCcdfLogBetaBinomial_ffd_633;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_634> AgradCcdfLogBetaBinomial_ffd_634;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_635> AgradCcdfLogBetaBinomial_ffd_635;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_636> AgradCcdfLogBetaBinomial_ffd_636;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_637> AgradCcdfLogBetaBinomial_ffd_637;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_638> AgradCcdfLogBetaBinomial_ffd_638;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_639> AgradCcdfLogBetaBinomial_ffd_639;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_640> AgradCcdfLogBetaBinomial_ffd_640;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_641> AgradCcdfLogBetaBinomial_ffd_641;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_642> AgradCcdfLogBetaBinomial_ffd_642;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_643> AgradCcdfLogBetaBinomial_ffd_643;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_644> AgradCcdfLogBetaBinomial_ffd_644;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_645> AgradCcdfLogBetaBinomial_ffd_645;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_646> AgradCcdfLogBetaBinomial_ffd_646;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_647> AgradCcdfLogBetaBinomial_ffd_647;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_648> AgradCcdfLogBetaBinomial_ffd_648;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_649> AgradCcdfLogBetaBinomial_ffd_649;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_650> AgradCcdfLogBetaBinomial_ffd_650;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_651> AgradCcdfLogBetaBinomial_ffd_651;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_652> AgradCcdfLogBetaBinomial_ffd_652;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_653> AgradCcdfLogBetaBinomial_ffd_653;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_654> AgradCcdfLogBetaBinomial_ffd_654;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_655> AgradCcdfLogBetaBinomial_ffd_655;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_656> AgradCcdfLogBetaBinomial_ffd_656;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_657> AgradCcdfLogBetaBinomial_ffd_657;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_658> AgradCcdfLogBetaBinomial_ffd_658;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_659> AgradCcdfLogBetaBinomial_ffd_659;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_660> AgradCcdfLogBetaBinomial_ffd_660;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_661> AgradCcdfLogBetaBinomial_ffd_661;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_662> AgradCcdfLogBetaBinomial_ffd_662;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_663> AgradCcdfLogBetaBinomial_ffd_663;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_664> AgradCcdfLogBetaBinomial_ffd_664;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_665> AgradCcdfLogBetaBinomial_ffd_665;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_666> AgradCcdfLogBetaBinomial_ffd_666;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_667> AgradCcdfLogBetaBinomial_ffd_667;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_668> AgradCcdfLogBetaBinomial_ffd_668;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_669> AgradCcdfLogBetaBinomial_ffd_669;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_670> AgradCcdfLogBetaBinomial_ffd_670;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_671> AgradCcdfLogBetaBinomial_ffd_671;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_672> AgradCcdfLogBetaBinomial_ffd_672;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_673> AgradCcdfLogBetaBinomial_ffd_673;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_674> AgradCcdfLogBetaBinomial_ffd_674;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_675> AgradCcdfLogBetaBinomial_ffd_675;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_676> AgradCcdfLogBetaBinomial_ffd_676;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_677> AgradCcdfLogBetaBinomial_ffd_677;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_678> AgradCcdfLogBetaBinomial_ffd_678;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_679> AgradCcdfLogBetaBinomial_ffd_679;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_680> AgradCcdfLogBetaBinomial_ffd_680;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_681> AgradCcdfLogBetaBinomial_ffd_681;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_682> AgradCcdfLogBetaBinomial_ffd_682;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_683> AgradCcdfLogBetaBinomial_ffd_683;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_684> AgradCcdfLogBetaBinomial_ffd_684;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_685> AgradCcdfLogBetaBinomial_ffd_685;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_686> AgradCcdfLogBetaBinomial_ffd_686;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_687> AgradCcdfLogBetaBinomial_ffd_687;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_688> AgradCcdfLogBetaBinomial_ffd_688;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_689> AgradCcdfLogBetaBinomial_ffd_689;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_690> AgradCcdfLogBetaBinomial_ffd_690;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_691> AgradCcdfLogBetaBinomial_ffd_691;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_692> AgradCcdfLogBetaBinomial_ffd_692;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_693> AgradCcdfLogBetaBinomial_ffd_693;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_694> AgradCcdfLogBetaBinomial_ffd_694;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_695> AgradCcdfLogBetaBinomial_ffd_695;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_696> AgradCcdfLogBetaBinomial_ffd_696;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_697> AgradCcdfLogBetaBinomial_ffd_697;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_698> AgradCcdfLogBetaBinomial_ffd_698;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_699> AgradCcdfLogBetaBinomial_ffd_699;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_700> AgradCcdfLogBetaBinomial_ffd_700;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_701> AgradCcdfLogBetaBinomial_ffd_701;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_702> AgradCcdfLogBetaBinomial_ffd_702;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_703> AgradCcdfLogBetaBinomial_ffd_703;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_704> AgradCcdfLogBetaBinomial_ffd_704;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_705> AgradCcdfLogBetaBinomial_ffd_705;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_706> AgradCcdfLogBetaBinomial_ffd_706;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_707> AgradCcdfLogBetaBinomial_ffd_707;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_708> AgradCcdfLogBetaBinomial_ffd_708;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_709> AgradCcdfLogBetaBinomial_ffd_709;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_710> AgradCcdfLogBetaBinomial_ffd_710;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_711> AgradCcdfLogBetaBinomial_ffd_711;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_712> AgradCcdfLogBetaBinomial_ffd_712;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_713> AgradCcdfLogBetaBinomial_ffd_713;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_714> AgradCcdfLogBetaBinomial_ffd_714;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_715> AgradCcdfLogBetaBinomial_ffd_715;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_716> AgradCcdfLogBetaBinomial_ffd_716;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_717> AgradCcdfLogBetaBinomial_ffd_717;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_718> AgradCcdfLogBetaBinomial_ffd_718;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_719> AgradCcdfLogBetaBinomial_ffd_719;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_720> AgradCcdfLogBetaBinomial_ffd_720;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_721> AgradCcdfLogBetaBinomial_ffd_721;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_722> AgradCcdfLogBetaBinomial_ffd_722;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_723> AgradCcdfLogBetaBinomial_ffd_723;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_724> AgradCcdfLogBetaBinomial_ffd_724;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_725> AgradCcdfLogBetaBinomial_ffd_725;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_726> AgradCcdfLogBetaBinomial_ffd_726;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_727> AgradCcdfLogBetaBinomial_ffd_727;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_728> AgradCcdfLogBetaBinomial_ffd_728;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_729> AgradCcdfLogBetaBinomial_ffd_729;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_730> AgradCcdfLogBetaBinomial_ffd_730;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_731> AgradCcdfLogBetaBinomial_ffd_731;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_732> AgradCcdfLogBetaBinomial_ffd_732;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_733> AgradCcdfLogBetaBinomial_ffd_733;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_734> AgradCcdfLogBetaBinomial_ffd_734;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_735> AgradCcdfLogBetaBinomial_ffd_735;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_736> AgradCcdfLogBetaBinomial_ffd_736;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_737> AgradCcdfLogBetaBinomial_ffd_737;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_738> AgradCcdfLogBetaBinomial_ffd_738;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_739> AgradCcdfLogBetaBinomial_ffd_739;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_740> AgradCcdfLogBetaBinomial_ffd_740;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_741> AgradCcdfLogBetaBinomial_ffd_741;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_742> AgradCcdfLogBetaBinomial_ffd_742;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_743> AgradCcdfLogBetaBinomial_ffd_743;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_744> AgradCcdfLogBetaBinomial_ffd_744;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_745> AgradCcdfLogBetaBinomial_ffd_745;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_746> AgradCcdfLogBetaBinomial_ffd_746;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_747> AgradCcdfLogBetaBinomial_ffd_747;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_748> AgradCcdfLogBetaBinomial_ffd_748;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_749> AgradCcdfLogBetaBinomial_ffd_749;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_750> AgradCcdfLogBetaBinomial_ffd_750;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_751> AgradCcdfLogBetaBinomial_ffd_751;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_752> AgradCcdfLogBetaBinomial_ffd_752;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_753> AgradCcdfLogBetaBinomial_ffd_753;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_754> AgradCcdfLogBetaBinomial_ffd_754;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_755> AgradCcdfLogBetaBinomial_ffd_755;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_756> AgradCcdfLogBetaBinomial_ffd_756;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_757> AgradCcdfLogBetaBinomial_ffd_757;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_758> AgradCcdfLogBetaBinomial_ffd_758;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_759> AgradCcdfLogBetaBinomial_ffd_759;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_760> AgradCcdfLogBetaBinomial_ffd_760;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_761> AgradCcdfLogBetaBinomial_ffd_761;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_762> AgradCcdfLogBetaBinomial_ffd_762;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_763> AgradCcdfLogBetaBinomial_ffd_763;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_764> AgradCcdfLogBetaBinomial_ffd_764;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_765> AgradCcdfLogBetaBinomial_ffd_765;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_766> AgradCcdfLogBetaBinomial_ffd_766;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_767> AgradCcdfLogBetaBinomial_ffd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_600, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_601, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_602, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_603, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_604, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_605, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_606, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_607, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_608, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_609, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_610, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_611, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_612, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_613, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_614, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_615, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_616, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_617, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_618, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_619, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_620, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_621, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_622, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_623, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_624, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_625, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_626, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_627, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_628, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_629, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_630, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_631, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_632, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_633, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_634, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_635, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_636, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_637, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_638, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_639, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_640, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_641, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_642, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_643, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_644, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_645, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_646, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_647, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_648, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_649, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_650, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_651, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_652, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_653, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_654, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_655, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_656, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_657, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_658, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_659, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_660, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_661, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_662, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_663, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_664, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_665, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_666, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_667, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_668, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_669, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_670, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_671, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_672, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_673, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_674, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_675, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_676, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_677, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_678, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_679, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_680, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_681, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_682, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_683, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_684, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_685, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_686, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_687, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_688, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_689, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_690, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_691, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_692, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_693, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_694, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_695, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_696, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_697, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_698, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_699, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_699);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_700, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_701, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_702, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_703, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_704, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_705, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_706, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_707, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_708, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_709, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_710, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_711, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_712, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_713, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_714, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_715, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_716, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_717, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_718, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_719, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_720, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_721, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_722, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_723, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_724, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_725, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_726, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_727, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_728, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_729, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_730, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_731, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_732, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_733, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_734, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_735, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_736, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_737, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_738, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_739, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_740, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_741, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_742, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_743, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_744, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_745, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_746, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_747, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_748, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_749, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_750, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_751, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_752, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_753, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_754, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_755, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_756, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_757, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_758, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_759, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_760, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_761, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_762, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_763, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_764, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_765, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_766, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_767, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_767);

