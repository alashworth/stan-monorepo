#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, double, empty, empty> type_v_800;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, std::vector<double>, empty, empty> type_v_801;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_802;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_803;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, var, empty, empty> type_v_804;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, std::vector<var>, empty, empty> type_v_805;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_806;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_807;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, double, empty, empty> type_v_808;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, std::vector<double>, empty, empty> type_v_809;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_810;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_811;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, var, empty, empty> type_v_812;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, std::vector<var>, empty, empty> type_v_813;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_814;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_815;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_816;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_817;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_818;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_819;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_820;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_821;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_822;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_823;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_824;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_825;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_826;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_827;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_828;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_829;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_830;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_831;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, double, empty, empty> type_v_832;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<double>, empty, empty> type_v_833;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_834;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_835;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, var, empty, empty> type_v_836;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<var>, empty, empty> type_v_837;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_838;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_839;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, double, empty, empty> type_v_840;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<double>, empty, empty> type_v_841;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_842;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_843;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, var, empty, empty> type_v_844;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<var>, empty, empty> type_v_845;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_846;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_847;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_848;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_849;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_850;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_851;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_852;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_853;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_854;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_855;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_856;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_857;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_858;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_859;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_860;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_861;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_862;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_863;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, double, empty, empty> type_v_864;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, std::vector<double>, empty, empty> type_v_865;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_866;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_867;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, var, empty, empty> type_v_868;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, std::vector<var>, empty, empty> type_v_869;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_870;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_871;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, double, empty, empty> type_v_872;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, std::vector<double>, empty, empty> type_v_873;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_874;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_875;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, var, empty, empty> type_v_876;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, std::vector<var>, empty, empty> type_v_877;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_878;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_879;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_880;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_881;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_882;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_883;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_884;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_885;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_886;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_887;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_888;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_889;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_890;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_891;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_892;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_893;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_894;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_895;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, double, empty, empty> type_v_896;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<double>, empty, empty> type_v_897;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_898;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_899;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_800> AgradCcdfLogBetaBinomial_v_800;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_801> AgradCcdfLogBetaBinomial_v_801;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_802> AgradCcdfLogBetaBinomial_v_802;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_803> AgradCcdfLogBetaBinomial_v_803;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_804> AgradCcdfLogBetaBinomial_v_804;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_805> AgradCcdfLogBetaBinomial_v_805;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_806> AgradCcdfLogBetaBinomial_v_806;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_807> AgradCcdfLogBetaBinomial_v_807;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_808> AgradCcdfLogBetaBinomial_v_808;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_809> AgradCcdfLogBetaBinomial_v_809;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_810> AgradCcdfLogBetaBinomial_v_810;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_811> AgradCcdfLogBetaBinomial_v_811;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_812> AgradCcdfLogBetaBinomial_v_812;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_813> AgradCcdfLogBetaBinomial_v_813;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_814> AgradCcdfLogBetaBinomial_v_814;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_815> AgradCcdfLogBetaBinomial_v_815;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_816> AgradCcdfLogBetaBinomial_v_816;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_817> AgradCcdfLogBetaBinomial_v_817;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_818> AgradCcdfLogBetaBinomial_v_818;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_819> AgradCcdfLogBetaBinomial_v_819;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_820> AgradCcdfLogBetaBinomial_v_820;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_821> AgradCcdfLogBetaBinomial_v_821;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_822> AgradCcdfLogBetaBinomial_v_822;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_823> AgradCcdfLogBetaBinomial_v_823;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_824> AgradCcdfLogBetaBinomial_v_824;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_825> AgradCcdfLogBetaBinomial_v_825;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_826> AgradCcdfLogBetaBinomial_v_826;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_827> AgradCcdfLogBetaBinomial_v_827;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_828> AgradCcdfLogBetaBinomial_v_828;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_829> AgradCcdfLogBetaBinomial_v_829;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_830> AgradCcdfLogBetaBinomial_v_830;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_831> AgradCcdfLogBetaBinomial_v_831;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_832> AgradCcdfLogBetaBinomial_v_832;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_833> AgradCcdfLogBetaBinomial_v_833;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_834> AgradCcdfLogBetaBinomial_v_834;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_835> AgradCcdfLogBetaBinomial_v_835;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_836> AgradCcdfLogBetaBinomial_v_836;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_837> AgradCcdfLogBetaBinomial_v_837;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_838> AgradCcdfLogBetaBinomial_v_838;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_839> AgradCcdfLogBetaBinomial_v_839;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_840> AgradCcdfLogBetaBinomial_v_840;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_841> AgradCcdfLogBetaBinomial_v_841;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_842> AgradCcdfLogBetaBinomial_v_842;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_843> AgradCcdfLogBetaBinomial_v_843;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_844> AgradCcdfLogBetaBinomial_v_844;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_845> AgradCcdfLogBetaBinomial_v_845;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_846> AgradCcdfLogBetaBinomial_v_846;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_847> AgradCcdfLogBetaBinomial_v_847;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_848> AgradCcdfLogBetaBinomial_v_848;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_849> AgradCcdfLogBetaBinomial_v_849;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_850> AgradCcdfLogBetaBinomial_v_850;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_851> AgradCcdfLogBetaBinomial_v_851;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_852> AgradCcdfLogBetaBinomial_v_852;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_853> AgradCcdfLogBetaBinomial_v_853;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_854> AgradCcdfLogBetaBinomial_v_854;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_855> AgradCcdfLogBetaBinomial_v_855;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_856> AgradCcdfLogBetaBinomial_v_856;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_857> AgradCcdfLogBetaBinomial_v_857;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_858> AgradCcdfLogBetaBinomial_v_858;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_859> AgradCcdfLogBetaBinomial_v_859;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_860> AgradCcdfLogBetaBinomial_v_860;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_861> AgradCcdfLogBetaBinomial_v_861;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_862> AgradCcdfLogBetaBinomial_v_862;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_863> AgradCcdfLogBetaBinomial_v_863;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_864> AgradCcdfLogBetaBinomial_v_864;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_865> AgradCcdfLogBetaBinomial_v_865;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_866> AgradCcdfLogBetaBinomial_v_866;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_867> AgradCcdfLogBetaBinomial_v_867;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_868> AgradCcdfLogBetaBinomial_v_868;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_869> AgradCcdfLogBetaBinomial_v_869;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_870> AgradCcdfLogBetaBinomial_v_870;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_871> AgradCcdfLogBetaBinomial_v_871;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_872> AgradCcdfLogBetaBinomial_v_872;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_873> AgradCcdfLogBetaBinomial_v_873;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_874> AgradCcdfLogBetaBinomial_v_874;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_875> AgradCcdfLogBetaBinomial_v_875;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_876> AgradCcdfLogBetaBinomial_v_876;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_877> AgradCcdfLogBetaBinomial_v_877;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_878> AgradCcdfLogBetaBinomial_v_878;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_879> AgradCcdfLogBetaBinomial_v_879;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_880> AgradCcdfLogBetaBinomial_v_880;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_881> AgradCcdfLogBetaBinomial_v_881;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_882> AgradCcdfLogBetaBinomial_v_882;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_883> AgradCcdfLogBetaBinomial_v_883;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_884> AgradCcdfLogBetaBinomial_v_884;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_885> AgradCcdfLogBetaBinomial_v_885;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_886> AgradCcdfLogBetaBinomial_v_886;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_887> AgradCcdfLogBetaBinomial_v_887;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_888> AgradCcdfLogBetaBinomial_v_888;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_889> AgradCcdfLogBetaBinomial_v_889;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_890> AgradCcdfLogBetaBinomial_v_890;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_891> AgradCcdfLogBetaBinomial_v_891;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_892> AgradCcdfLogBetaBinomial_v_892;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_893> AgradCcdfLogBetaBinomial_v_893;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_894> AgradCcdfLogBetaBinomial_v_894;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_895> AgradCcdfLogBetaBinomial_v_895;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_896> AgradCcdfLogBetaBinomial_v_896;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_897> AgradCcdfLogBetaBinomial_v_897;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_898> AgradCcdfLogBetaBinomial_v_898;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_899> AgradCcdfLogBetaBinomial_v_899;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_800, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_800);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_801, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_801);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_802, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_802);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_803, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_803);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_804, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_804);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_805, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_805);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_806, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_806);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_807, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_807);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_808, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_808);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_809, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_809);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_810, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_810);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_811, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_811);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_812, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_812);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_813, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_813);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_814, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_814);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_815, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_815);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_816, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_816);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_817, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_817);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_818, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_818);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_819, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_819);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_820, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_820);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_821, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_821);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_822, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_822);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_823, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_823);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_824, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_824);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_825, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_825);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_826, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_826);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_827, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_827);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_828, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_828);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_829, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_829);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_830, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_830);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_831, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_831);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_832, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_832);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_833, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_833);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_834, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_834);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_835, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_835);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_836, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_836);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_837, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_837);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_838, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_838);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_839, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_839);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_840, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_840);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_841, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_841);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_842, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_842);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_843, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_843);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_844, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_844);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_845, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_845);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_846, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_846);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_847, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_847);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_848, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_848);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_849, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_849);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_850, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_850);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_851, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_851);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_852, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_852);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_853, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_853);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_854, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_854);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_855, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_855);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_856, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_856);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_857, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_857);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_858, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_858);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_859, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_859);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_860, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_860);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_861, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_861);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_862, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_862);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_863, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_863);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_864, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_864);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_865, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_865);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_866, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_866);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_867, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_867);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_868, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_868);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_869, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_869);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_870, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_870);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_871, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_871);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_872, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_872);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_873, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_873);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_874, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_874);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_875, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_875);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_876, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_876);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_877, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_877);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_878, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_878);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_879, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_879);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_880, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_880);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_881, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_881);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_882, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_882);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_883, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_883);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_884, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_884);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_885, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_885);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_886, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_886);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_887, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_887);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_888, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_888);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_889, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_889);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_890, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_890);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_891, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_891);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_892, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_892);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_893, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_893);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_894, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_894);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_895, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_895);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_896, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_896);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_897, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_897);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_898, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_898);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_899, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_899);

