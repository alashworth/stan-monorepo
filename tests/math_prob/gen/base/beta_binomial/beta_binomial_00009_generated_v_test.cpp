#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, var, empty, empty> type_v_900;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<var>, empty, empty> type_v_901;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_902;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_903;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, double, empty, empty> type_v_904;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<double>, empty, empty> type_v_905;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_906;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_907;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, var, empty, empty> type_v_908;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<var>, empty, empty> type_v_909;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_910;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_911;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_912;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_913;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_914;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_915;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_916;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_917;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_918;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_919;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_920;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_921;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_922;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_923;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_924;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_925;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_926;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_927;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, double, empty, empty> type_v_928;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, std::vector<double>, empty, empty> type_v_929;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_930;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_931;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, var, empty, empty> type_v_932;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, std::vector<var>, empty, empty> type_v_933;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_934;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_935;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, double, empty, empty> type_v_936;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, std::vector<double>, empty, empty> type_v_937;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_938;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_939;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, var, empty, empty> type_v_940;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, std::vector<var>, empty, empty> type_v_941;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_942;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_943;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_944;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_945;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_946;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_947;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_948;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_949;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_950;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_951;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_952;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_953;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_954;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_955;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_956;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_957;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_958;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_959;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, double, empty, empty> type_v_960;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<double>, empty, empty> type_v_961;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_962;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_963;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, var, empty, empty> type_v_964;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<var>, empty, empty> type_v_965;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_966;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_967;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, double, empty, empty> type_v_968;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<double>, empty, empty> type_v_969;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_970;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_971;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, var, empty, empty> type_v_972;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<var>, empty, empty> type_v_973;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_974;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_975;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_976;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_977;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_978;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_979;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_980;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_981;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_982;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_983;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_984;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_985;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_986;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_987;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_988;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_989;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_990;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_991;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, double, empty, empty> type_v_992;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, std::vector<double>, empty, empty> type_v_993;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_994;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_995;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, var, empty, empty> type_v_996;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, std::vector<var>, empty, empty> type_v_997;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_998;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_999;

typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_900> AgradDistributionsBetaBinomial_v_900;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_901> AgradDistributionsBetaBinomial_v_901;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_902> AgradDistributionsBetaBinomial_v_902;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_903> AgradDistributionsBetaBinomial_v_903;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_904> AgradDistributionsBetaBinomial_v_904;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_905> AgradDistributionsBetaBinomial_v_905;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_906> AgradDistributionsBetaBinomial_v_906;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_907> AgradDistributionsBetaBinomial_v_907;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_908> AgradDistributionsBetaBinomial_v_908;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_909> AgradDistributionsBetaBinomial_v_909;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_910> AgradDistributionsBetaBinomial_v_910;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_911> AgradDistributionsBetaBinomial_v_911;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_912> AgradDistributionsBetaBinomial_v_912;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_913> AgradDistributionsBetaBinomial_v_913;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_914> AgradDistributionsBetaBinomial_v_914;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_915> AgradDistributionsBetaBinomial_v_915;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_916> AgradDistributionsBetaBinomial_v_916;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_917> AgradDistributionsBetaBinomial_v_917;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_918> AgradDistributionsBetaBinomial_v_918;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_919> AgradDistributionsBetaBinomial_v_919;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_920> AgradDistributionsBetaBinomial_v_920;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_921> AgradDistributionsBetaBinomial_v_921;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_922> AgradDistributionsBetaBinomial_v_922;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_923> AgradDistributionsBetaBinomial_v_923;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_924> AgradDistributionsBetaBinomial_v_924;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_925> AgradDistributionsBetaBinomial_v_925;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_926> AgradDistributionsBetaBinomial_v_926;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_927> AgradDistributionsBetaBinomial_v_927;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_928> AgradDistributionsBetaBinomial_v_928;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_929> AgradDistributionsBetaBinomial_v_929;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_930> AgradDistributionsBetaBinomial_v_930;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_931> AgradDistributionsBetaBinomial_v_931;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_932> AgradDistributionsBetaBinomial_v_932;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_933> AgradDistributionsBetaBinomial_v_933;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_934> AgradDistributionsBetaBinomial_v_934;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_935> AgradDistributionsBetaBinomial_v_935;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_936> AgradDistributionsBetaBinomial_v_936;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_937> AgradDistributionsBetaBinomial_v_937;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_938> AgradDistributionsBetaBinomial_v_938;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_939> AgradDistributionsBetaBinomial_v_939;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_940> AgradDistributionsBetaBinomial_v_940;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_941> AgradDistributionsBetaBinomial_v_941;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_942> AgradDistributionsBetaBinomial_v_942;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_943> AgradDistributionsBetaBinomial_v_943;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_944> AgradDistributionsBetaBinomial_v_944;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_945> AgradDistributionsBetaBinomial_v_945;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_946> AgradDistributionsBetaBinomial_v_946;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_947> AgradDistributionsBetaBinomial_v_947;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_948> AgradDistributionsBetaBinomial_v_948;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_949> AgradDistributionsBetaBinomial_v_949;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_950> AgradDistributionsBetaBinomial_v_950;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_951> AgradDistributionsBetaBinomial_v_951;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_952> AgradDistributionsBetaBinomial_v_952;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_953> AgradDistributionsBetaBinomial_v_953;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_954> AgradDistributionsBetaBinomial_v_954;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_955> AgradDistributionsBetaBinomial_v_955;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_956> AgradDistributionsBetaBinomial_v_956;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_957> AgradDistributionsBetaBinomial_v_957;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_958> AgradDistributionsBetaBinomial_v_958;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_959> AgradDistributionsBetaBinomial_v_959;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_960> AgradDistributionsBetaBinomial_v_960;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_961> AgradDistributionsBetaBinomial_v_961;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_962> AgradDistributionsBetaBinomial_v_962;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_963> AgradDistributionsBetaBinomial_v_963;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_964> AgradDistributionsBetaBinomial_v_964;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_965> AgradDistributionsBetaBinomial_v_965;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_966> AgradDistributionsBetaBinomial_v_966;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_967> AgradDistributionsBetaBinomial_v_967;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_968> AgradDistributionsBetaBinomial_v_968;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_969> AgradDistributionsBetaBinomial_v_969;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_970> AgradDistributionsBetaBinomial_v_970;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_971> AgradDistributionsBetaBinomial_v_971;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_972> AgradDistributionsBetaBinomial_v_972;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_973> AgradDistributionsBetaBinomial_v_973;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_974> AgradDistributionsBetaBinomial_v_974;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_975> AgradDistributionsBetaBinomial_v_975;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_976> AgradDistributionsBetaBinomial_v_976;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_977> AgradDistributionsBetaBinomial_v_977;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_978> AgradDistributionsBetaBinomial_v_978;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_979> AgradDistributionsBetaBinomial_v_979;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_980> AgradDistributionsBetaBinomial_v_980;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_981> AgradDistributionsBetaBinomial_v_981;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_982> AgradDistributionsBetaBinomial_v_982;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_983> AgradDistributionsBetaBinomial_v_983;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_984> AgradDistributionsBetaBinomial_v_984;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_985> AgradDistributionsBetaBinomial_v_985;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_986> AgradDistributionsBetaBinomial_v_986;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_987> AgradDistributionsBetaBinomial_v_987;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_988> AgradDistributionsBetaBinomial_v_988;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_989> AgradDistributionsBetaBinomial_v_989;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_990> AgradDistributionsBetaBinomial_v_990;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_991> AgradDistributionsBetaBinomial_v_991;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_992> AgradDistributionsBetaBinomial_v_992;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_993> AgradDistributionsBetaBinomial_v_993;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_994> AgradDistributionsBetaBinomial_v_994;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_995> AgradDistributionsBetaBinomial_v_995;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_996> AgradDistributionsBetaBinomial_v_996;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_997> AgradDistributionsBetaBinomial_v_997;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_998> AgradDistributionsBetaBinomial_v_998;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_v_999> AgradDistributionsBetaBinomial_v_999;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_900, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_900);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_901, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_901);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_902, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_902);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_903, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_903);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_904, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_904);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_905, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_905);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_906, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_906);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_907, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_907);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_908, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_908);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_909, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_909);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_910, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_910);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_911, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_911);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_912, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_912);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_913, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_913);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_914, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_914);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_915, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_915);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_916, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_916);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_917, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_917);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_918, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_918);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_919, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_919);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_920, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_920);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_921, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_921);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_922, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_922);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_923, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_923);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_924, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_924);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_925, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_925);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_926, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_926);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_927, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_927);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_928, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_928);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_929, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_929);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_930, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_930);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_931, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_931);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_932, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_932);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_933, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_933);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_934, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_934);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_935, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_935);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_936, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_936);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_937, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_937);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_938, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_938);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_939, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_939);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_940, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_940);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_941, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_941);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_942, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_942);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_943, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_943);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_944, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_944);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_945, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_945);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_946, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_946);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_947, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_947);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_948, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_948);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_949, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_949);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_950, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_950);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_951, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_951);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_952, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_952);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_953, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_953);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_954, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_954);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_955, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_955);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_956, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_956);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_957, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_957);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_958, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_958);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_959, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_959);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_960, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_960);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_961, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_961);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_962, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_962);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_963, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_963);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_964, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_964);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_965, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_965);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_966, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_966);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_967, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_967);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_968, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_968);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_969, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_969);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_970, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_970);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_971, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_971);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_972, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_972);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_973, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_973);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_974, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_974);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_975, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_975);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_976, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_976);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_977, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_977);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_978, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_978);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_979, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_979);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_980, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_980);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_981, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_981);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_982, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_982);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_983, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_983);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_984, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_984);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_985, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_985);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_986, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_986);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_987, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_987);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_988, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_988);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_989, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_989);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_990, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_990);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_991, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_991);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_992, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_992);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_993, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_993);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_994, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_994);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_995, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_995);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_996, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_996);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_997, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_997);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_998, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_998);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_v_999, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_v_999);

