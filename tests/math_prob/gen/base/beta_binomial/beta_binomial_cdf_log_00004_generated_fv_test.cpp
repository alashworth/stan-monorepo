#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, double, empty, empty> type_fv_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, std::vector<double>, empty, empty> type_fv_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, fvar<var>, empty, empty> type_fv_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, double, empty, empty> type_fv_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<var>, empty, empty> type_fv_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<var>>, empty, empty> type_fv_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<var>, empty, empty> type_fv_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, double, empty, empty> type_fv_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, std::vector<double>, empty, empty> type_fv_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, fvar<var>, empty, empty> type_fv_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, double, empty, empty> type_fv_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<var>, empty, empty> type_fv_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<var>>, empty, empty> type_fv_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<var>, empty, empty> type_fv_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, double, empty, empty> type_fv_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<double>, empty, empty> type_fv_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_499;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_400> AgradCdfLogBetaBinomial_fv_400;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_401> AgradCdfLogBetaBinomial_fv_401;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_402> AgradCdfLogBetaBinomial_fv_402;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_403> AgradCdfLogBetaBinomial_fv_403;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_404> AgradCdfLogBetaBinomial_fv_404;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_405> AgradCdfLogBetaBinomial_fv_405;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_406> AgradCdfLogBetaBinomial_fv_406;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_407> AgradCdfLogBetaBinomial_fv_407;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_408> AgradCdfLogBetaBinomial_fv_408;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_409> AgradCdfLogBetaBinomial_fv_409;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_410> AgradCdfLogBetaBinomial_fv_410;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_411> AgradCdfLogBetaBinomial_fv_411;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_412> AgradCdfLogBetaBinomial_fv_412;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_413> AgradCdfLogBetaBinomial_fv_413;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_414> AgradCdfLogBetaBinomial_fv_414;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_415> AgradCdfLogBetaBinomial_fv_415;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_416> AgradCdfLogBetaBinomial_fv_416;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_417> AgradCdfLogBetaBinomial_fv_417;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_418> AgradCdfLogBetaBinomial_fv_418;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_419> AgradCdfLogBetaBinomial_fv_419;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_420> AgradCdfLogBetaBinomial_fv_420;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_421> AgradCdfLogBetaBinomial_fv_421;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_422> AgradCdfLogBetaBinomial_fv_422;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_423> AgradCdfLogBetaBinomial_fv_423;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_424> AgradCdfLogBetaBinomial_fv_424;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_425> AgradCdfLogBetaBinomial_fv_425;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_426> AgradCdfLogBetaBinomial_fv_426;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_427> AgradCdfLogBetaBinomial_fv_427;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_428> AgradCdfLogBetaBinomial_fv_428;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_429> AgradCdfLogBetaBinomial_fv_429;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_430> AgradCdfLogBetaBinomial_fv_430;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_431> AgradCdfLogBetaBinomial_fv_431;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_432> AgradCdfLogBetaBinomial_fv_432;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_433> AgradCdfLogBetaBinomial_fv_433;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_434> AgradCdfLogBetaBinomial_fv_434;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_435> AgradCdfLogBetaBinomial_fv_435;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_436> AgradCdfLogBetaBinomial_fv_436;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_437> AgradCdfLogBetaBinomial_fv_437;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_438> AgradCdfLogBetaBinomial_fv_438;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_439> AgradCdfLogBetaBinomial_fv_439;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_440> AgradCdfLogBetaBinomial_fv_440;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_441> AgradCdfLogBetaBinomial_fv_441;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_442> AgradCdfLogBetaBinomial_fv_442;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_443> AgradCdfLogBetaBinomial_fv_443;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_444> AgradCdfLogBetaBinomial_fv_444;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_445> AgradCdfLogBetaBinomial_fv_445;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_446> AgradCdfLogBetaBinomial_fv_446;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_447> AgradCdfLogBetaBinomial_fv_447;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_448> AgradCdfLogBetaBinomial_fv_448;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_449> AgradCdfLogBetaBinomial_fv_449;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_450> AgradCdfLogBetaBinomial_fv_450;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_451> AgradCdfLogBetaBinomial_fv_451;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_452> AgradCdfLogBetaBinomial_fv_452;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_453> AgradCdfLogBetaBinomial_fv_453;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_454> AgradCdfLogBetaBinomial_fv_454;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_455> AgradCdfLogBetaBinomial_fv_455;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_456> AgradCdfLogBetaBinomial_fv_456;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_457> AgradCdfLogBetaBinomial_fv_457;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_458> AgradCdfLogBetaBinomial_fv_458;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_459> AgradCdfLogBetaBinomial_fv_459;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_460> AgradCdfLogBetaBinomial_fv_460;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_461> AgradCdfLogBetaBinomial_fv_461;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_462> AgradCdfLogBetaBinomial_fv_462;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_463> AgradCdfLogBetaBinomial_fv_463;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_464> AgradCdfLogBetaBinomial_fv_464;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_465> AgradCdfLogBetaBinomial_fv_465;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_466> AgradCdfLogBetaBinomial_fv_466;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_467> AgradCdfLogBetaBinomial_fv_467;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_468> AgradCdfLogBetaBinomial_fv_468;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_469> AgradCdfLogBetaBinomial_fv_469;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_470> AgradCdfLogBetaBinomial_fv_470;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_471> AgradCdfLogBetaBinomial_fv_471;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_472> AgradCdfLogBetaBinomial_fv_472;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_473> AgradCdfLogBetaBinomial_fv_473;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_474> AgradCdfLogBetaBinomial_fv_474;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_475> AgradCdfLogBetaBinomial_fv_475;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_476> AgradCdfLogBetaBinomial_fv_476;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_477> AgradCdfLogBetaBinomial_fv_477;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_478> AgradCdfLogBetaBinomial_fv_478;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_479> AgradCdfLogBetaBinomial_fv_479;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_480> AgradCdfLogBetaBinomial_fv_480;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_481> AgradCdfLogBetaBinomial_fv_481;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_482> AgradCdfLogBetaBinomial_fv_482;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_483> AgradCdfLogBetaBinomial_fv_483;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_484> AgradCdfLogBetaBinomial_fv_484;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_485> AgradCdfLogBetaBinomial_fv_485;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_486> AgradCdfLogBetaBinomial_fv_486;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_487> AgradCdfLogBetaBinomial_fv_487;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_488> AgradCdfLogBetaBinomial_fv_488;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_489> AgradCdfLogBetaBinomial_fv_489;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_490> AgradCdfLogBetaBinomial_fv_490;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_491> AgradCdfLogBetaBinomial_fv_491;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_492> AgradCdfLogBetaBinomial_fv_492;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_493> AgradCdfLogBetaBinomial_fv_493;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_494> AgradCdfLogBetaBinomial_fv_494;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_495> AgradCdfLogBetaBinomial_fv_495;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_496> AgradCdfLogBetaBinomial_fv_496;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_497> AgradCdfLogBetaBinomial_fv_497;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_498> AgradCdfLogBetaBinomial_fv_498;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fv_499> AgradCdfLogBetaBinomial_fv_499;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_400, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_401, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_402, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_403, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_404, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_405, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_406, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_407, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_408, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_409, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_410, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_411, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_412, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_413, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_414, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_415, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_416, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_417, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_418, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_419, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_420, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_421, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_422, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_423, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_424, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_425, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_426, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_427, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_428, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_429, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_430, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_431, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_432, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_433, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_434, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_435, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_436, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_437, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_438, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_439, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_440, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_441, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_442, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_443, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_444, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_445, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_446, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_447, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_448, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_449, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_450, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_451, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_452, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_453, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_454, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_455, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_456, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_457, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_458, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_459, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_460, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_461, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_462, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_463, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_464, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_465, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_466, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_467, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_468, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_469, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_470, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_471, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_472, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_473, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_474, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_475, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_476, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_477, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_478, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_479, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_480, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_481, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_482, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_483, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_484, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_485, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_486, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_487, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_488, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_489, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_490, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_491, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_492, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_493, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_494, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_495, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_496, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_497, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_498, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fv_499, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fv_499);

