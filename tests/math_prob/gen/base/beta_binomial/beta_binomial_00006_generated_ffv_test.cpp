#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<fvar<var> >, empty, empty> type_ffv_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, double, empty, empty> type_ffv_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<var> >, empty, empty> type_ffv_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, double, empty, empty> type_ffv_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_699;

typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_600> AgradDistributionsBetaBinomial_ffv_600;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_601> AgradDistributionsBetaBinomial_ffv_601;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_602> AgradDistributionsBetaBinomial_ffv_602;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_603> AgradDistributionsBetaBinomial_ffv_603;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_604> AgradDistributionsBetaBinomial_ffv_604;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_605> AgradDistributionsBetaBinomial_ffv_605;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_606> AgradDistributionsBetaBinomial_ffv_606;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_607> AgradDistributionsBetaBinomial_ffv_607;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_608> AgradDistributionsBetaBinomial_ffv_608;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_609> AgradDistributionsBetaBinomial_ffv_609;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_610> AgradDistributionsBetaBinomial_ffv_610;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_611> AgradDistributionsBetaBinomial_ffv_611;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_612> AgradDistributionsBetaBinomial_ffv_612;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_613> AgradDistributionsBetaBinomial_ffv_613;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_614> AgradDistributionsBetaBinomial_ffv_614;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_615> AgradDistributionsBetaBinomial_ffv_615;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_616> AgradDistributionsBetaBinomial_ffv_616;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_617> AgradDistributionsBetaBinomial_ffv_617;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_618> AgradDistributionsBetaBinomial_ffv_618;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_619> AgradDistributionsBetaBinomial_ffv_619;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_620> AgradDistributionsBetaBinomial_ffv_620;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_621> AgradDistributionsBetaBinomial_ffv_621;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_622> AgradDistributionsBetaBinomial_ffv_622;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_623> AgradDistributionsBetaBinomial_ffv_623;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_624> AgradDistributionsBetaBinomial_ffv_624;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_625> AgradDistributionsBetaBinomial_ffv_625;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_626> AgradDistributionsBetaBinomial_ffv_626;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_627> AgradDistributionsBetaBinomial_ffv_627;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_628> AgradDistributionsBetaBinomial_ffv_628;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_629> AgradDistributionsBetaBinomial_ffv_629;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_630> AgradDistributionsBetaBinomial_ffv_630;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_631> AgradDistributionsBetaBinomial_ffv_631;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_632> AgradDistributionsBetaBinomial_ffv_632;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_633> AgradDistributionsBetaBinomial_ffv_633;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_634> AgradDistributionsBetaBinomial_ffv_634;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_635> AgradDistributionsBetaBinomial_ffv_635;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_636> AgradDistributionsBetaBinomial_ffv_636;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_637> AgradDistributionsBetaBinomial_ffv_637;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_638> AgradDistributionsBetaBinomial_ffv_638;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_639> AgradDistributionsBetaBinomial_ffv_639;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_640> AgradDistributionsBetaBinomial_ffv_640;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_641> AgradDistributionsBetaBinomial_ffv_641;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_642> AgradDistributionsBetaBinomial_ffv_642;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_643> AgradDistributionsBetaBinomial_ffv_643;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_644> AgradDistributionsBetaBinomial_ffv_644;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_645> AgradDistributionsBetaBinomial_ffv_645;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_646> AgradDistributionsBetaBinomial_ffv_646;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_647> AgradDistributionsBetaBinomial_ffv_647;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_648> AgradDistributionsBetaBinomial_ffv_648;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_649> AgradDistributionsBetaBinomial_ffv_649;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_650> AgradDistributionsBetaBinomial_ffv_650;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_651> AgradDistributionsBetaBinomial_ffv_651;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_652> AgradDistributionsBetaBinomial_ffv_652;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_653> AgradDistributionsBetaBinomial_ffv_653;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_654> AgradDistributionsBetaBinomial_ffv_654;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_655> AgradDistributionsBetaBinomial_ffv_655;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_656> AgradDistributionsBetaBinomial_ffv_656;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_657> AgradDistributionsBetaBinomial_ffv_657;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_658> AgradDistributionsBetaBinomial_ffv_658;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_659> AgradDistributionsBetaBinomial_ffv_659;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_660> AgradDistributionsBetaBinomial_ffv_660;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_661> AgradDistributionsBetaBinomial_ffv_661;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_662> AgradDistributionsBetaBinomial_ffv_662;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_663> AgradDistributionsBetaBinomial_ffv_663;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_664> AgradDistributionsBetaBinomial_ffv_664;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_665> AgradDistributionsBetaBinomial_ffv_665;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_666> AgradDistributionsBetaBinomial_ffv_666;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_667> AgradDistributionsBetaBinomial_ffv_667;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_668> AgradDistributionsBetaBinomial_ffv_668;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_669> AgradDistributionsBetaBinomial_ffv_669;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_670> AgradDistributionsBetaBinomial_ffv_670;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_671> AgradDistributionsBetaBinomial_ffv_671;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_672> AgradDistributionsBetaBinomial_ffv_672;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_673> AgradDistributionsBetaBinomial_ffv_673;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_674> AgradDistributionsBetaBinomial_ffv_674;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_675> AgradDistributionsBetaBinomial_ffv_675;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_676> AgradDistributionsBetaBinomial_ffv_676;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_677> AgradDistributionsBetaBinomial_ffv_677;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_678> AgradDistributionsBetaBinomial_ffv_678;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_679> AgradDistributionsBetaBinomial_ffv_679;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_680> AgradDistributionsBetaBinomial_ffv_680;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_681> AgradDistributionsBetaBinomial_ffv_681;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_682> AgradDistributionsBetaBinomial_ffv_682;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_683> AgradDistributionsBetaBinomial_ffv_683;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_684> AgradDistributionsBetaBinomial_ffv_684;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_685> AgradDistributionsBetaBinomial_ffv_685;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_686> AgradDistributionsBetaBinomial_ffv_686;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_687> AgradDistributionsBetaBinomial_ffv_687;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_688> AgradDistributionsBetaBinomial_ffv_688;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_689> AgradDistributionsBetaBinomial_ffv_689;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_690> AgradDistributionsBetaBinomial_ffv_690;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_691> AgradDistributionsBetaBinomial_ffv_691;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_692> AgradDistributionsBetaBinomial_ffv_692;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_693> AgradDistributionsBetaBinomial_ffv_693;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_694> AgradDistributionsBetaBinomial_ffv_694;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_695> AgradDistributionsBetaBinomial_ffv_695;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_696> AgradDistributionsBetaBinomial_ffv_696;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_697> AgradDistributionsBetaBinomial_ffv_697;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_698> AgradDistributionsBetaBinomial_ffv_698;
typedef boost::mpl::vector<AgradDistributionsBetaBinomial, type_ffv_699> AgradDistributionsBetaBinomial_ffv_699;

INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_600, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_601, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_602, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_603, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_604, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_605, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_606, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_607, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_608, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_609, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_610, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_611, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_612, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_613, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_614, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_615, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_616, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_617, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_618, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_619, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_620, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_621, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_622, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_623, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_624, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_625, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_626, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_627, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_628, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_629, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_630, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_631, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_632, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_633, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_634, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_635, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_636, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_637, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_638, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_639, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_640, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_641, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_642, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_643, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_644, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_645, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_646, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_647, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_648, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_649, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_650, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_651, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_652, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_653, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_654, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_655, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_656, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_657, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_658, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_659, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_660, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_661, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_662, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_663, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_664, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_665, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_666, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_667, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_668, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_669, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_670, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_671, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_672, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_673, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_674, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_675, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_676, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_677, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_678, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_679, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_680, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_681, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_682, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_683, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_684, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_685, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_686, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_687, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_688, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_689, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_690, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_691, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_692, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_693, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_694, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_695, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_696, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_697, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_698, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradDistributionsBetaBinomial_ffv_699, AgradDistributionTestFixture, AgradDistributionsBetaBinomial_ffv_699);

