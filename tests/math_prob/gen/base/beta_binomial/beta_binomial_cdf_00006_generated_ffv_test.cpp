#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<fvar<var> >, empty, empty> type_ffv_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, double, empty, empty> type_ffv_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<var> >, empty, empty> type_ffv_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, double, empty, empty> type_ffv_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_699;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_600> AgradCdfBetaBinomial_ffv_600;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_601> AgradCdfBetaBinomial_ffv_601;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_602> AgradCdfBetaBinomial_ffv_602;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_603> AgradCdfBetaBinomial_ffv_603;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_604> AgradCdfBetaBinomial_ffv_604;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_605> AgradCdfBetaBinomial_ffv_605;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_606> AgradCdfBetaBinomial_ffv_606;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_607> AgradCdfBetaBinomial_ffv_607;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_608> AgradCdfBetaBinomial_ffv_608;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_609> AgradCdfBetaBinomial_ffv_609;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_610> AgradCdfBetaBinomial_ffv_610;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_611> AgradCdfBetaBinomial_ffv_611;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_612> AgradCdfBetaBinomial_ffv_612;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_613> AgradCdfBetaBinomial_ffv_613;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_614> AgradCdfBetaBinomial_ffv_614;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_615> AgradCdfBetaBinomial_ffv_615;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_616> AgradCdfBetaBinomial_ffv_616;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_617> AgradCdfBetaBinomial_ffv_617;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_618> AgradCdfBetaBinomial_ffv_618;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_619> AgradCdfBetaBinomial_ffv_619;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_620> AgradCdfBetaBinomial_ffv_620;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_621> AgradCdfBetaBinomial_ffv_621;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_622> AgradCdfBetaBinomial_ffv_622;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_623> AgradCdfBetaBinomial_ffv_623;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_624> AgradCdfBetaBinomial_ffv_624;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_625> AgradCdfBetaBinomial_ffv_625;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_626> AgradCdfBetaBinomial_ffv_626;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_627> AgradCdfBetaBinomial_ffv_627;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_628> AgradCdfBetaBinomial_ffv_628;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_629> AgradCdfBetaBinomial_ffv_629;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_630> AgradCdfBetaBinomial_ffv_630;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_631> AgradCdfBetaBinomial_ffv_631;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_632> AgradCdfBetaBinomial_ffv_632;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_633> AgradCdfBetaBinomial_ffv_633;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_634> AgradCdfBetaBinomial_ffv_634;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_635> AgradCdfBetaBinomial_ffv_635;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_636> AgradCdfBetaBinomial_ffv_636;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_637> AgradCdfBetaBinomial_ffv_637;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_638> AgradCdfBetaBinomial_ffv_638;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_639> AgradCdfBetaBinomial_ffv_639;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_640> AgradCdfBetaBinomial_ffv_640;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_641> AgradCdfBetaBinomial_ffv_641;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_642> AgradCdfBetaBinomial_ffv_642;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_643> AgradCdfBetaBinomial_ffv_643;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_644> AgradCdfBetaBinomial_ffv_644;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_645> AgradCdfBetaBinomial_ffv_645;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_646> AgradCdfBetaBinomial_ffv_646;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_647> AgradCdfBetaBinomial_ffv_647;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_648> AgradCdfBetaBinomial_ffv_648;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_649> AgradCdfBetaBinomial_ffv_649;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_650> AgradCdfBetaBinomial_ffv_650;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_651> AgradCdfBetaBinomial_ffv_651;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_652> AgradCdfBetaBinomial_ffv_652;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_653> AgradCdfBetaBinomial_ffv_653;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_654> AgradCdfBetaBinomial_ffv_654;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_655> AgradCdfBetaBinomial_ffv_655;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_656> AgradCdfBetaBinomial_ffv_656;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_657> AgradCdfBetaBinomial_ffv_657;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_658> AgradCdfBetaBinomial_ffv_658;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_659> AgradCdfBetaBinomial_ffv_659;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_660> AgradCdfBetaBinomial_ffv_660;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_661> AgradCdfBetaBinomial_ffv_661;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_662> AgradCdfBetaBinomial_ffv_662;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_663> AgradCdfBetaBinomial_ffv_663;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_664> AgradCdfBetaBinomial_ffv_664;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_665> AgradCdfBetaBinomial_ffv_665;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_666> AgradCdfBetaBinomial_ffv_666;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_667> AgradCdfBetaBinomial_ffv_667;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_668> AgradCdfBetaBinomial_ffv_668;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_669> AgradCdfBetaBinomial_ffv_669;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_670> AgradCdfBetaBinomial_ffv_670;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_671> AgradCdfBetaBinomial_ffv_671;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_672> AgradCdfBetaBinomial_ffv_672;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_673> AgradCdfBetaBinomial_ffv_673;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_674> AgradCdfBetaBinomial_ffv_674;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_675> AgradCdfBetaBinomial_ffv_675;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_676> AgradCdfBetaBinomial_ffv_676;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_677> AgradCdfBetaBinomial_ffv_677;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_678> AgradCdfBetaBinomial_ffv_678;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_679> AgradCdfBetaBinomial_ffv_679;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_680> AgradCdfBetaBinomial_ffv_680;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_681> AgradCdfBetaBinomial_ffv_681;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_682> AgradCdfBetaBinomial_ffv_682;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_683> AgradCdfBetaBinomial_ffv_683;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_684> AgradCdfBetaBinomial_ffv_684;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_685> AgradCdfBetaBinomial_ffv_685;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_686> AgradCdfBetaBinomial_ffv_686;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_687> AgradCdfBetaBinomial_ffv_687;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_688> AgradCdfBetaBinomial_ffv_688;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_689> AgradCdfBetaBinomial_ffv_689;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_690> AgradCdfBetaBinomial_ffv_690;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_691> AgradCdfBetaBinomial_ffv_691;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_692> AgradCdfBetaBinomial_ffv_692;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_693> AgradCdfBetaBinomial_ffv_693;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_694> AgradCdfBetaBinomial_ffv_694;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_695> AgradCdfBetaBinomial_ffv_695;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_696> AgradCdfBetaBinomial_ffv_696;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_697> AgradCdfBetaBinomial_ffv_697;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_698> AgradCdfBetaBinomial_ffv_698;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_699> AgradCdfBetaBinomial_ffv_699;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_600, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_601, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_602, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_603, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_604, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_605, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_606, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_607, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_608, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_609, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_610, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_611, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_612, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_613, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_614, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_615, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_616, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_617, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_618, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_619, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_620, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_621, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_622, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_623, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_624, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_625, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_626, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_627, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_628, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_629, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_630, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_631, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_632, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_633, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_634, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_635, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_636, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_637, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_638, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_639, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_640, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_641, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_642, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_643, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_644, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_645, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_646, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_647, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_648, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_649, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_650, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_651, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_652, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_653, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_654, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_655, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_656, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_657, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_658, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_659, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_660, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_661, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_662, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_663, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_664, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_665, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_666, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_667, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_668, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_669, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_670, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_671, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_672, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_673, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_674, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_675, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_676, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_677, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_678, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_679, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_680, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_681, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_682, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_683, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_684, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_685, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_686, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_687, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_688, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_689, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_690, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_691, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_692, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_693, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_694, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_695, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_696, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_697, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_698, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_699, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_699);

