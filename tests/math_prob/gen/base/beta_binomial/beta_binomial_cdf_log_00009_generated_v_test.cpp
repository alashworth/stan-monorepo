#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, var, empty, empty> type_v_900;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<var>, empty, empty> type_v_901;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_902;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_903;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, double, empty, empty> type_v_904;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<double>, empty, empty> type_v_905;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_906;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_907;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, var, empty, empty> type_v_908;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<var>, empty, empty> type_v_909;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_910;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_911;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_912;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_913;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_914;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_915;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_916;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_917;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_918;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_919;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_920;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_921;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_922;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_923;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_924;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_925;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_926;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_927;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, double, empty, empty> type_v_928;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, std::vector<double>, empty, empty> type_v_929;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_930;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_931;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, var, empty, empty> type_v_932;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, std::vector<var>, empty, empty> type_v_933;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_934;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_935;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, double, empty, empty> type_v_936;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, std::vector<double>, empty, empty> type_v_937;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_938;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_939;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, var, empty, empty> type_v_940;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, std::vector<var>, empty, empty> type_v_941;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_942;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_943;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_944;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_945;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_946;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_947;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_948;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_949;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_950;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_951;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_952;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_953;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_954;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_955;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_956;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_957;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_958;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_959;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, double, empty, empty> type_v_960;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<double>, empty, empty> type_v_961;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_962;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_963;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, var, empty, empty> type_v_964;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<var>, empty, empty> type_v_965;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_966;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_967;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, double, empty, empty> type_v_968;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<double>, empty, empty> type_v_969;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_970;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_971;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, var, empty, empty> type_v_972;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<var>, empty, empty> type_v_973;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_974;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_975;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_976;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_977;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_978;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_979;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_980;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_981;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_982;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_983;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_984;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_985;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_986;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_987;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_988;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_989;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_990;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_991;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, double, empty, empty> type_v_992;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, std::vector<double>, empty, empty> type_v_993;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_994;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_995;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, var, empty, empty> type_v_996;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, std::vector<var>, empty, empty> type_v_997;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_998;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_999;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_900> AgradCdfLogBetaBinomial_v_900;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_901> AgradCdfLogBetaBinomial_v_901;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_902> AgradCdfLogBetaBinomial_v_902;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_903> AgradCdfLogBetaBinomial_v_903;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_904> AgradCdfLogBetaBinomial_v_904;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_905> AgradCdfLogBetaBinomial_v_905;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_906> AgradCdfLogBetaBinomial_v_906;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_907> AgradCdfLogBetaBinomial_v_907;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_908> AgradCdfLogBetaBinomial_v_908;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_909> AgradCdfLogBetaBinomial_v_909;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_910> AgradCdfLogBetaBinomial_v_910;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_911> AgradCdfLogBetaBinomial_v_911;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_912> AgradCdfLogBetaBinomial_v_912;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_913> AgradCdfLogBetaBinomial_v_913;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_914> AgradCdfLogBetaBinomial_v_914;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_915> AgradCdfLogBetaBinomial_v_915;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_916> AgradCdfLogBetaBinomial_v_916;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_917> AgradCdfLogBetaBinomial_v_917;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_918> AgradCdfLogBetaBinomial_v_918;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_919> AgradCdfLogBetaBinomial_v_919;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_920> AgradCdfLogBetaBinomial_v_920;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_921> AgradCdfLogBetaBinomial_v_921;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_922> AgradCdfLogBetaBinomial_v_922;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_923> AgradCdfLogBetaBinomial_v_923;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_924> AgradCdfLogBetaBinomial_v_924;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_925> AgradCdfLogBetaBinomial_v_925;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_926> AgradCdfLogBetaBinomial_v_926;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_927> AgradCdfLogBetaBinomial_v_927;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_928> AgradCdfLogBetaBinomial_v_928;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_929> AgradCdfLogBetaBinomial_v_929;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_930> AgradCdfLogBetaBinomial_v_930;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_931> AgradCdfLogBetaBinomial_v_931;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_932> AgradCdfLogBetaBinomial_v_932;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_933> AgradCdfLogBetaBinomial_v_933;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_934> AgradCdfLogBetaBinomial_v_934;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_935> AgradCdfLogBetaBinomial_v_935;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_936> AgradCdfLogBetaBinomial_v_936;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_937> AgradCdfLogBetaBinomial_v_937;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_938> AgradCdfLogBetaBinomial_v_938;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_939> AgradCdfLogBetaBinomial_v_939;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_940> AgradCdfLogBetaBinomial_v_940;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_941> AgradCdfLogBetaBinomial_v_941;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_942> AgradCdfLogBetaBinomial_v_942;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_943> AgradCdfLogBetaBinomial_v_943;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_944> AgradCdfLogBetaBinomial_v_944;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_945> AgradCdfLogBetaBinomial_v_945;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_946> AgradCdfLogBetaBinomial_v_946;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_947> AgradCdfLogBetaBinomial_v_947;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_948> AgradCdfLogBetaBinomial_v_948;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_949> AgradCdfLogBetaBinomial_v_949;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_950> AgradCdfLogBetaBinomial_v_950;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_951> AgradCdfLogBetaBinomial_v_951;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_952> AgradCdfLogBetaBinomial_v_952;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_953> AgradCdfLogBetaBinomial_v_953;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_954> AgradCdfLogBetaBinomial_v_954;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_955> AgradCdfLogBetaBinomial_v_955;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_956> AgradCdfLogBetaBinomial_v_956;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_957> AgradCdfLogBetaBinomial_v_957;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_958> AgradCdfLogBetaBinomial_v_958;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_959> AgradCdfLogBetaBinomial_v_959;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_960> AgradCdfLogBetaBinomial_v_960;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_961> AgradCdfLogBetaBinomial_v_961;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_962> AgradCdfLogBetaBinomial_v_962;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_963> AgradCdfLogBetaBinomial_v_963;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_964> AgradCdfLogBetaBinomial_v_964;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_965> AgradCdfLogBetaBinomial_v_965;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_966> AgradCdfLogBetaBinomial_v_966;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_967> AgradCdfLogBetaBinomial_v_967;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_968> AgradCdfLogBetaBinomial_v_968;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_969> AgradCdfLogBetaBinomial_v_969;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_970> AgradCdfLogBetaBinomial_v_970;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_971> AgradCdfLogBetaBinomial_v_971;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_972> AgradCdfLogBetaBinomial_v_972;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_973> AgradCdfLogBetaBinomial_v_973;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_974> AgradCdfLogBetaBinomial_v_974;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_975> AgradCdfLogBetaBinomial_v_975;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_976> AgradCdfLogBetaBinomial_v_976;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_977> AgradCdfLogBetaBinomial_v_977;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_978> AgradCdfLogBetaBinomial_v_978;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_979> AgradCdfLogBetaBinomial_v_979;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_980> AgradCdfLogBetaBinomial_v_980;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_981> AgradCdfLogBetaBinomial_v_981;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_982> AgradCdfLogBetaBinomial_v_982;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_983> AgradCdfLogBetaBinomial_v_983;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_984> AgradCdfLogBetaBinomial_v_984;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_985> AgradCdfLogBetaBinomial_v_985;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_986> AgradCdfLogBetaBinomial_v_986;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_987> AgradCdfLogBetaBinomial_v_987;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_988> AgradCdfLogBetaBinomial_v_988;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_989> AgradCdfLogBetaBinomial_v_989;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_990> AgradCdfLogBetaBinomial_v_990;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_991> AgradCdfLogBetaBinomial_v_991;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_992> AgradCdfLogBetaBinomial_v_992;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_993> AgradCdfLogBetaBinomial_v_993;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_994> AgradCdfLogBetaBinomial_v_994;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_995> AgradCdfLogBetaBinomial_v_995;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_996> AgradCdfLogBetaBinomial_v_996;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_997> AgradCdfLogBetaBinomial_v_997;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_998> AgradCdfLogBetaBinomial_v_998;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_999> AgradCdfLogBetaBinomial_v_999;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_900, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_900);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_901, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_901);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_902, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_902);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_903, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_903);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_904, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_904);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_905, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_905);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_906, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_906);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_907, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_907);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_908, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_908);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_909, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_909);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_910, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_910);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_911, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_911);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_912, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_912);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_913, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_913);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_914, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_914);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_915, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_915);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_916, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_916);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_917, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_917);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_918, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_918);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_919, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_919);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_920, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_920);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_921, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_921);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_922, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_922);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_923, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_923);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_924, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_924);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_925, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_925);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_926, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_926);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_927, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_927);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_928, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_928);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_929, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_929);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_930, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_930);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_931, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_931);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_932, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_932);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_933, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_933);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_934, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_934);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_935, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_935);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_936, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_936);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_937, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_937);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_938, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_938);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_939, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_939);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_940, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_940);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_941, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_941);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_942, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_942);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_943, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_943);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_944, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_944);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_945, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_945);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_946, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_946);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_947, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_947);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_948, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_948);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_949, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_949);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_950, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_950);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_951, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_951);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_952, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_952);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_953, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_953);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_954, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_954);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_955, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_955);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_956, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_956);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_957, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_957);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_958, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_958);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_959, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_959);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_960, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_960);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_961, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_961);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_962, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_962);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_963, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_963);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_964, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_964);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_965, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_965);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_966, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_966);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_967, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_967);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_968, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_968);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_969, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_969);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_970, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_970);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_971, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_971);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_972, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_972);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_973, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_973);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_974, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_974);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_975, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_975);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_976, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_976);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_977, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_977);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_978, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_978);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_979, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_979);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_980, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_980);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_981, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_981);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_982, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_982);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_983, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_983);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_984, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_984);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_985, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_985);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_986, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_986);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_987, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_987);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_988, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_988);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_989, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_989);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_990, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_990);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_991, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_991);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_992, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_992);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_993, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_993);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_994, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_994);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_995, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_995);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_996, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_996);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_997, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_997);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_998, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_998);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_999, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_999);

