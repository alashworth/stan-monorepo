#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<double> >, empty, empty> type_ffd_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty> type_ffd_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<fvar<double> >, empty, empty> type_ffd_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_599;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_500> AgradCdfBetaBinomial_ffd_500;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_501> AgradCdfBetaBinomial_ffd_501;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_502> AgradCdfBetaBinomial_ffd_502;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_503> AgradCdfBetaBinomial_ffd_503;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_504> AgradCdfBetaBinomial_ffd_504;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_505> AgradCdfBetaBinomial_ffd_505;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_506> AgradCdfBetaBinomial_ffd_506;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_507> AgradCdfBetaBinomial_ffd_507;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_508> AgradCdfBetaBinomial_ffd_508;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_509> AgradCdfBetaBinomial_ffd_509;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_510> AgradCdfBetaBinomial_ffd_510;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_511> AgradCdfBetaBinomial_ffd_511;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_512> AgradCdfBetaBinomial_ffd_512;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_513> AgradCdfBetaBinomial_ffd_513;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_514> AgradCdfBetaBinomial_ffd_514;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_515> AgradCdfBetaBinomial_ffd_515;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_516> AgradCdfBetaBinomial_ffd_516;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_517> AgradCdfBetaBinomial_ffd_517;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_518> AgradCdfBetaBinomial_ffd_518;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_519> AgradCdfBetaBinomial_ffd_519;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_520> AgradCdfBetaBinomial_ffd_520;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_521> AgradCdfBetaBinomial_ffd_521;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_522> AgradCdfBetaBinomial_ffd_522;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_523> AgradCdfBetaBinomial_ffd_523;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_524> AgradCdfBetaBinomial_ffd_524;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_525> AgradCdfBetaBinomial_ffd_525;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_526> AgradCdfBetaBinomial_ffd_526;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_527> AgradCdfBetaBinomial_ffd_527;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_528> AgradCdfBetaBinomial_ffd_528;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_529> AgradCdfBetaBinomial_ffd_529;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_530> AgradCdfBetaBinomial_ffd_530;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_531> AgradCdfBetaBinomial_ffd_531;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_532> AgradCdfBetaBinomial_ffd_532;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_533> AgradCdfBetaBinomial_ffd_533;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_534> AgradCdfBetaBinomial_ffd_534;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_535> AgradCdfBetaBinomial_ffd_535;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_536> AgradCdfBetaBinomial_ffd_536;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_537> AgradCdfBetaBinomial_ffd_537;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_538> AgradCdfBetaBinomial_ffd_538;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_539> AgradCdfBetaBinomial_ffd_539;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_540> AgradCdfBetaBinomial_ffd_540;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_541> AgradCdfBetaBinomial_ffd_541;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_542> AgradCdfBetaBinomial_ffd_542;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_543> AgradCdfBetaBinomial_ffd_543;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_544> AgradCdfBetaBinomial_ffd_544;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_545> AgradCdfBetaBinomial_ffd_545;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_546> AgradCdfBetaBinomial_ffd_546;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_547> AgradCdfBetaBinomial_ffd_547;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_548> AgradCdfBetaBinomial_ffd_548;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_549> AgradCdfBetaBinomial_ffd_549;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_550> AgradCdfBetaBinomial_ffd_550;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_551> AgradCdfBetaBinomial_ffd_551;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_552> AgradCdfBetaBinomial_ffd_552;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_553> AgradCdfBetaBinomial_ffd_553;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_554> AgradCdfBetaBinomial_ffd_554;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_555> AgradCdfBetaBinomial_ffd_555;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_556> AgradCdfBetaBinomial_ffd_556;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_557> AgradCdfBetaBinomial_ffd_557;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_558> AgradCdfBetaBinomial_ffd_558;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_559> AgradCdfBetaBinomial_ffd_559;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_560> AgradCdfBetaBinomial_ffd_560;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_561> AgradCdfBetaBinomial_ffd_561;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_562> AgradCdfBetaBinomial_ffd_562;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_563> AgradCdfBetaBinomial_ffd_563;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_564> AgradCdfBetaBinomial_ffd_564;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_565> AgradCdfBetaBinomial_ffd_565;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_566> AgradCdfBetaBinomial_ffd_566;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_567> AgradCdfBetaBinomial_ffd_567;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_568> AgradCdfBetaBinomial_ffd_568;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_569> AgradCdfBetaBinomial_ffd_569;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_570> AgradCdfBetaBinomial_ffd_570;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_571> AgradCdfBetaBinomial_ffd_571;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_572> AgradCdfBetaBinomial_ffd_572;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_573> AgradCdfBetaBinomial_ffd_573;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_574> AgradCdfBetaBinomial_ffd_574;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_575> AgradCdfBetaBinomial_ffd_575;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_576> AgradCdfBetaBinomial_ffd_576;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_577> AgradCdfBetaBinomial_ffd_577;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_578> AgradCdfBetaBinomial_ffd_578;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_579> AgradCdfBetaBinomial_ffd_579;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_580> AgradCdfBetaBinomial_ffd_580;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_581> AgradCdfBetaBinomial_ffd_581;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_582> AgradCdfBetaBinomial_ffd_582;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_583> AgradCdfBetaBinomial_ffd_583;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_584> AgradCdfBetaBinomial_ffd_584;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_585> AgradCdfBetaBinomial_ffd_585;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_586> AgradCdfBetaBinomial_ffd_586;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_587> AgradCdfBetaBinomial_ffd_587;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_588> AgradCdfBetaBinomial_ffd_588;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_589> AgradCdfBetaBinomial_ffd_589;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_590> AgradCdfBetaBinomial_ffd_590;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_591> AgradCdfBetaBinomial_ffd_591;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_592> AgradCdfBetaBinomial_ffd_592;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_593> AgradCdfBetaBinomial_ffd_593;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_594> AgradCdfBetaBinomial_ffd_594;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_595> AgradCdfBetaBinomial_ffd_595;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_596> AgradCdfBetaBinomial_ffd_596;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_597> AgradCdfBetaBinomial_ffd_597;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_598> AgradCdfBetaBinomial_ffd_598;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffd_599> AgradCdfBetaBinomial_ffd_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_500, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_501, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_502, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_503, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_504, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_505, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_506, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_507, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_508, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_509, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_510, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_511, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_512, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_513, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_514, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_515, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_516, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_517, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_518, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_519, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_520, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_521, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_522, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_523, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_524, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_525, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_526, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_527, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_528, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_529, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_530, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_531, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_532, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_533, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_534, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_535, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_536, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_537, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_538, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_539, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_540, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_541, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_542, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_543, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_544, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_545, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_546, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_547, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_548, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_549, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_550, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_551, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_552, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_553, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_554, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_555, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_556, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_557, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_558, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_559, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_560, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_561, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_562, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_563, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_564, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_565, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_566, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_567, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_568, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_569, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_570, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_571, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_572, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_573, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_574, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_575, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_576, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_577, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_578, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_579, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_580, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_581, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_582, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_583, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_584, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_585, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_586, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_587, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_588, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_589, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_590, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_591, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_592, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_593, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_594, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_595, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_596, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_597, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_598, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffd_599, AgradCdfTestFixture, AgradCdfBetaBinomial_ffd_599);

