#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, double, empty, empty> type_fd_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<double>, empty, empty> type_fd_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<double>>, empty, empty> type_fd_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<double>, empty, empty> type_fd_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, double, empty, empty> type_fd_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, std::vector<double>, empty, empty> type_fd_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, fvar<double>, empty, empty> type_fd_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, double, empty, empty> type_fd_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<double>, empty, empty> type_fd_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<double>>, empty, empty> type_fd_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<double>, empty, empty> type_fd_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, double, empty, empty> type_fd_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<double>, empty, empty> type_fd_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, fvar<double>, empty, empty> type_fd_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, double, empty, empty> type_fd_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_699;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty> type_fd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty> type_fd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty> type_fd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty> type_fd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty> type_fd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty> type_fd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty> type_fd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_767;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_600> AgradCcdfLogBetaBinomial_fd_600;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_601> AgradCcdfLogBetaBinomial_fd_601;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_602> AgradCcdfLogBetaBinomial_fd_602;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_603> AgradCcdfLogBetaBinomial_fd_603;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_604> AgradCcdfLogBetaBinomial_fd_604;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_605> AgradCcdfLogBetaBinomial_fd_605;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_606> AgradCcdfLogBetaBinomial_fd_606;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_607> AgradCcdfLogBetaBinomial_fd_607;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_608> AgradCcdfLogBetaBinomial_fd_608;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_609> AgradCcdfLogBetaBinomial_fd_609;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_610> AgradCcdfLogBetaBinomial_fd_610;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_611> AgradCcdfLogBetaBinomial_fd_611;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_612> AgradCcdfLogBetaBinomial_fd_612;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_613> AgradCcdfLogBetaBinomial_fd_613;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_614> AgradCcdfLogBetaBinomial_fd_614;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_615> AgradCcdfLogBetaBinomial_fd_615;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_616> AgradCcdfLogBetaBinomial_fd_616;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_617> AgradCcdfLogBetaBinomial_fd_617;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_618> AgradCcdfLogBetaBinomial_fd_618;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_619> AgradCcdfLogBetaBinomial_fd_619;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_620> AgradCcdfLogBetaBinomial_fd_620;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_621> AgradCcdfLogBetaBinomial_fd_621;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_622> AgradCcdfLogBetaBinomial_fd_622;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_623> AgradCcdfLogBetaBinomial_fd_623;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_624> AgradCcdfLogBetaBinomial_fd_624;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_625> AgradCcdfLogBetaBinomial_fd_625;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_626> AgradCcdfLogBetaBinomial_fd_626;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_627> AgradCcdfLogBetaBinomial_fd_627;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_628> AgradCcdfLogBetaBinomial_fd_628;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_629> AgradCcdfLogBetaBinomial_fd_629;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_630> AgradCcdfLogBetaBinomial_fd_630;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_631> AgradCcdfLogBetaBinomial_fd_631;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_632> AgradCcdfLogBetaBinomial_fd_632;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_633> AgradCcdfLogBetaBinomial_fd_633;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_634> AgradCcdfLogBetaBinomial_fd_634;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_635> AgradCcdfLogBetaBinomial_fd_635;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_636> AgradCcdfLogBetaBinomial_fd_636;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_637> AgradCcdfLogBetaBinomial_fd_637;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_638> AgradCcdfLogBetaBinomial_fd_638;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_639> AgradCcdfLogBetaBinomial_fd_639;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_640> AgradCcdfLogBetaBinomial_fd_640;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_641> AgradCcdfLogBetaBinomial_fd_641;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_642> AgradCcdfLogBetaBinomial_fd_642;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_643> AgradCcdfLogBetaBinomial_fd_643;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_644> AgradCcdfLogBetaBinomial_fd_644;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_645> AgradCcdfLogBetaBinomial_fd_645;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_646> AgradCcdfLogBetaBinomial_fd_646;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_647> AgradCcdfLogBetaBinomial_fd_647;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_648> AgradCcdfLogBetaBinomial_fd_648;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_649> AgradCcdfLogBetaBinomial_fd_649;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_650> AgradCcdfLogBetaBinomial_fd_650;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_651> AgradCcdfLogBetaBinomial_fd_651;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_652> AgradCcdfLogBetaBinomial_fd_652;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_653> AgradCcdfLogBetaBinomial_fd_653;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_654> AgradCcdfLogBetaBinomial_fd_654;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_655> AgradCcdfLogBetaBinomial_fd_655;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_656> AgradCcdfLogBetaBinomial_fd_656;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_657> AgradCcdfLogBetaBinomial_fd_657;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_658> AgradCcdfLogBetaBinomial_fd_658;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_659> AgradCcdfLogBetaBinomial_fd_659;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_660> AgradCcdfLogBetaBinomial_fd_660;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_661> AgradCcdfLogBetaBinomial_fd_661;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_662> AgradCcdfLogBetaBinomial_fd_662;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_663> AgradCcdfLogBetaBinomial_fd_663;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_664> AgradCcdfLogBetaBinomial_fd_664;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_665> AgradCcdfLogBetaBinomial_fd_665;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_666> AgradCcdfLogBetaBinomial_fd_666;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_667> AgradCcdfLogBetaBinomial_fd_667;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_668> AgradCcdfLogBetaBinomial_fd_668;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_669> AgradCcdfLogBetaBinomial_fd_669;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_670> AgradCcdfLogBetaBinomial_fd_670;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_671> AgradCcdfLogBetaBinomial_fd_671;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_672> AgradCcdfLogBetaBinomial_fd_672;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_673> AgradCcdfLogBetaBinomial_fd_673;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_674> AgradCcdfLogBetaBinomial_fd_674;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_675> AgradCcdfLogBetaBinomial_fd_675;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_676> AgradCcdfLogBetaBinomial_fd_676;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_677> AgradCcdfLogBetaBinomial_fd_677;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_678> AgradCcdfLogBetaBinomial_fd_678;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_679> AgradCcdfLogBetaBinomial_fd_679;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_680> AgradCcdfLogBetaBinomial_fd_680;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_681> AgradCcdfLogBetaBinomial_fd_681;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_682> AgradCcdfLogBetaBinomial_fd_682;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_683> AgradCcdfLogBetaBinomial_fd_683;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_684> AgradCcdfLogBetaBinomial_fd_684;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_685> AgradCcdfLogBetaBinomial_fd_685;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_686> AgradCcdfLogBetaBinomial_fd_686;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_687> AgradCcdfLogBetaBinomial_fd_687;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_688> AgradCcdfLogBetaBinomial_fd_688;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_689> AgradCcdfLogBetaBinomial_fd_689;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_690> AgradCcdfLogBetaBinomial_fd_690;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_691> AgradCcdfLogBetaBinomial_fd_691;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_692> AgradCcdfLogBetaBinomial_fd_692;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_693> AgradCcdfLogBetaBinomial_fd_693;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_694> AgradCcdfLogBetaBinomial_fd_694;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_695> AgradCcdfLogBetaBinomial_fd_695;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_696> AgradCcdfLogBetaBinomial_fd_696;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_697> AgradCcdfLogBetaBinomial_fd_697;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_698> AgradCcdfLogBetaBinomial_fd_698;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_699> AgradCcdfLogBetaBinomial_fd_699;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_700> AgradCcdfLogBetaBinomial_fd_700;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_701> AgradCcdfLogBetaBinomial_fd_701;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_702> AgradCcdfLogBetaBinomial_fd_702;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_703> AgradCcdfLogBetaBinomial_fd_703;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_704> AgradCcdfLogBetaBinomial_fd_704;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_705> AgradCcdfLogBetaBinomial_fd_705;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_706> AgradCcdfLogBetaBinomial_fd_706;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_707> AgradCcdfLogBetaBinomial_fd_707;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_708> AgradCcdfLogBetaBinomial_fd_708;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_709> AgradCcdfLogBetaBinomial_fd_709;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_710> AgradCcdfLogBetaBinomial_fd_710;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_711> AgradCcdfLogBetaBinomial_fd_711;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_712> AgradCcdfLogBetaBinomial_fd_712;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_713> AgradCcdfLogBetaBinomial_fd_713;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_714> AgradCcdfLogBetaBinomial_fd_714;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_715> AgradCcdfLogBetaBinomial_fd_715;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_716> AgradCcdfLogBetaBinomial_fd_716;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_717> AgradCcdfLogBetaBinomial_fd_717;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_718> AgradCcdfLogBetaBinomial_fd_718;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_719> AgradCcdfLogBetaBinomial_fd_719;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_720> AgradCcdfLogBetaBinomial_fd_720;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_721> AgradCcdfLogBetaBinomial_fd_721;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_722> AgradCcdfLogBetaBinomial_fd_722;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_723> AgradCcdfLogBetaBinomial_fd_723;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_724> AgradCcdfLogBetaBinomial_fd_724;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_725> AgradCcdfLogBetaBinomial_fd_725;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_726> AgradCcdfLogBetaBinomial_fd_726;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_727> AgradCcdfLogBetaBinomial_fd_727;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_728> AgradCcdfLogBetaBinomial_fd_728;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_729> AgradCcdfLogBetaBinomial_fd_729;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_730> AgradCcdfLogBetaBinomial_fd_730;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_731> AgradCcdfLogBetaBinomial_fd_731;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_732> AgradCcdfLogBetaBinomial_fd_732;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_733> AgradCcdfLogBetaBinomial_fd_733;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_734> AgradCcdfLogBetaBinomial_fd_734;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_735> AgradCcdfLogBetaBinomial_fd_735;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_736> AgradCcdfLogBetaBinomial_fd_736;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_737> AgradCcdfLogBetaBinomial_fd_737;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_738> AgradCcdfLogBetaBinomial_fd_738;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_739> AgradCcdfLogBetaBinomial_fd_739;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_740> AgradCcdfLogBetaBinomial_fd_740;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_741> AgradCcdfLogBetaBinomial_fd_741;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_742> AgradCcdfLogBetaBinomial_fd_742;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_743> AgradCcdfLogBetaBinomial_fd_743;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_744> AgradCcdfLogBetaBinomial_fd_744;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_745> AgradCcdfLogBetaBinomial_fd_745;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_746> AgradCcdfLogBetaBinomial_fd_746;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_747> AgradCcdfLogBetaBinomial_fd_747;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_748> AgradCcdfLogBetaBinomial_fd_748;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_749> AgradCcdfLogBetaBinomial_fd_749;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_750> AgradCcdfLogBetaBinomial_fd_750;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_751> AgradCcdfLogBetaBinomial_fd_751;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_752> AgradCcdfLogBetaBinomial_fd_752;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_753> AgradCcdfLogBetaBinomial_fd_753;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_754> AgradCcdfLogBetaBinomial_fd_754;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_755> AgradCcdfLogBetaBinomial_fd_755;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_756> AgradCcdfLogBetaBinomial_fd_756;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_757> AgradCcdfLogBetaBinomial_fd_757;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_758> AgradCcdfLogBetaBinomial_fd_758;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_759> AgradCcdfLogBetaBinomial_fd_759;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_760> AgradCcdfLogBetaBinomial_fd_760;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_761> AgradCcdfLogBetaBinomial_fd_761;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_762> AgradCcdfLogBetaBinomial_fd_762;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_763> AgradCcdfLogBetaBinomial_fd_763;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_764> AgradCcdfLogBetaBinomial_fd_764;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_765> AgradCcdfLogBetaBinomial_fd_765;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_766> AgradCcdfLogBetaBinomial_fd_766;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_767> AgradCcdfLogBetaBinomial_fd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_600, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_601, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_602, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_603, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_604, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_605, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_606, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_607, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_608, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_609, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_610, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_611, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_612, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_613, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_614, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_615, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_616, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_617, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_618, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_619, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_620, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_621, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_622, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_623, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_624, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_625, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_626, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_627, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_628, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_629, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_630, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_631, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_632, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_633, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_634, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_635, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_636, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_637, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_638, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_639, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_640, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_641, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_642, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_643, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_644, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_645, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_646, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_647, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_648, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_649, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_650, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_651, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_652, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_653, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_654, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_655, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_656, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_657, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_658, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_659, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_660, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_661, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_662, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_663, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_664, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_665, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_666, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_667, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_668, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_669, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_670, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_671, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_672, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_673, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_674, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_675, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_676, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_677, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_678, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_679, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_680, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_681, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_682, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_683, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_684, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_685, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_686, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_687, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_688, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_689, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_690, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_691, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_692, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_693, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_694, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_695, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_696, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_697, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_698, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_699, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_699);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_700, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_701, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_702, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_703, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_704, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_705, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_706, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_707, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_708, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_709, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_710, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_711, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_712, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_713, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_714, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_715, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_716, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_717, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_718, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_719, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_720, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_721, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_722, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_723, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_724, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_725, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_726, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_727, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_728, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_729, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_730, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_731, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_732, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_733, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_734, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_735, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_736, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_737, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_738, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_739, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_740, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_741, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_742, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_743, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_744, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_745, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_746, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_747, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_748, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_749, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_750, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_751, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_752, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_753, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_754, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_755, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_756, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_757, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_758, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_759, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_760, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_761, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_762, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_763, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_764, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_765, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_766, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_767, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_767);

