#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, double, empty, empty> type_v_800;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, std::vector<double>, empty, empty> type_v_801;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_802;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_803;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, var, empty, empty> type_v_804;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, std::vector<var>, empty, empty> type_v_805;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_806;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_807;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, double, empty, empty> type_v_808;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, std::vector<double>, empty, empty> type_v_809;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_810;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_811;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, var, empty, empty> type_v_812;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, std::vector<var>, empty, empty> type_v_813;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_814;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_815;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_816;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_817;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_818;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_819;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_820;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_821;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_822;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_823;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_824;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_825;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_826;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_827;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_828;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_829;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_830;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_831;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, double, empty, empty> type_v_832;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<double>, empty, empty> type_v_833;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_834;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_835;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, var, empty, empty> type_v_836;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<var>, empty, empty> type_v_837;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_838;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_839;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, double, empty, empty> type_v_840;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<double>, empty, empty> type_v_841;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_842;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_843;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, var, empty, empty> type_v_844;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<var>, empty, empty> type_v_845;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_846;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_847;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_848;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_849;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_850;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_851;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_852;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_853;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_854;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_855;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_856;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_857;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_858;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_859;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_860;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_861;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_862;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_863;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, double, empty, empty> type_v_864;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, std::vector<double>, empty, empty> type_v_865;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_866;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_867;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, var, empty, empty> type_v_868;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, std::vector<var>, empty, empty> type_v_869;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_870;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_871;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, double, empty, empty> type_v_872;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, std::vector<double>, empty, empty> type_v_873;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_874;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_875;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, var, empty, empty> type_v_876;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, std::vector<var>, empty, empty> type_v_877;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_878;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_879;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_880;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_881;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_882;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_883;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_884;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_885;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_886;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_887;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_888;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_889;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_890;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_891;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_892;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_893;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_894;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_895;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, double, empty, empty> type_v_896;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<double>, empty, empty> type_v_897;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_898;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_899;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_800> AgradCdfLogBetaBinomial_v_800;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_801> AgradCdfLogBetaBinomial_v_801;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_802> AgradCdfLogBetaBinomial_v_802;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_803> AgradCdfLogBetaBinomial_v_803;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_804> AgradCdfLogBetaBinomial_v_804;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_805> AgradCdfLogBetaBinomial_v_805;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_806> AgradCdfLogBetaBinomial_v_806;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_807> AgradCdfLogBetaBinomial_v_807;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_808> AgradCdfLogBetaBinomial_v_808;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_809> AgradCdfLogBetaBinomial_v_809;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_810> AgradCdfLogBetaBinomial_v_810;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_811> AgradCdfLogBetaBinomial_v_811;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_812> AgradCdfLogBetaBinomial_v_812;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_813> AgradCdfLogBetaBinomial_v_813;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_814> AgradCdfLogBetaBinomial_v_814;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_815> AgradCdfLogBetaBinomial_v_815;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_816> AgradCdfLogBetaBinomial_v_816;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_817> AgradCdfLogBetaBinomial_v_817;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_818> AgradCdfLogBetaBinomial_v_818;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_819> AgradCdfLogBetaBinomial_v_819;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_820> AgradCdfLogBetaBinomial_v_820;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_821> AgradCdfLogBetaBinomial_v_821;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_822> AgradCdfLogBetaBinomial_v_822;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_823> AgradCdfLogBetaBinomial_v_823;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_824> AgradCdfLogBetaBinomial_v_824;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_825> AgradCdfLogBetaBinomial_v_825;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_826> AgradCdfLogBetaBinomial_v_826;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_827> AgradCdfLogBetaBinomial_v_827;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_828> AgradCdfLogBetaBinomial_v_828;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_829> AgradCdfLogBetaBinomial_v_829;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_830> AgradCdfLogBetaBinomial_v_830;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_831> AgradCdfLogBetaBinomial_v_831;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_832> AgradCdfLogBetaBinomial_v_832;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_833> AgradCdfLogBetaBinomial_v_833;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_834> AgradCdfLogBetaBinomial_v_834;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_835> AgradCdfLogBetaBinomial_v_835;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_836> AgradCdfLogBetaBinomial_v_836;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_837> AgradCdfLogBetaBinomial_v_837;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_838> AgradCdfLogBetaBinomial_v_838;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_839> AgradCdfLogBetaBinomial_v_839;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_840> AgradCdfLogBetaBinomial_v_840;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_841> AgradCdfLogBetaBinomial_v_841;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_842> AgradCdfLogBetaBinomial_v_842;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_843> AgradCdfLogBetaBinomial_v_843;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_844> AgradCdfLogBetaBinomial_v_844;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_845> AgradCdfLogBetaBinomial_v_845;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_846> AgradCdfLogBetaBinomial_v_846;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_847> AgradCdfLogBetaBinomial_v_847;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_848> AgradCdfLogBetaBinomial_v_848;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_849> AgradCdfLogBetaBinomial_v_849;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_850> AgradCdfLogBetaBinomial_v_850;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_851> AgradCdfLogBetaBinomial_v_851;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_852> AgradCdfLogBetaBinomial_v_852;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_853> AgradCdfLogBetaBinomial_v_853;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_854> AgradCdfLogBetaBinomial_v_854;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_855> AgradCdfLogBetaBinomial_v_855;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_856> AgradCdfLogBetaBinomial_v_856;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_857> AgradCdfLogBetaBinomial_v_857;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_858> AgradCdfLogBetaBinomial_v_858;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_859> AgradCdfLogBetaBinomial_v_859;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_860> AgradCdfLogBetaBinomial_v_860;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_861> AgradCdfLogBetaBinomial_v_861;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_862> AgradCdfLogBetaBinomial_v_862;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_863> AgradCdfLogBetaBinomial_v_863;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_864> AgradCdfLogBetaBinomial_v_864;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_865> AgradCdfLogBetaBinomial_v_865;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_866> AgradCdfLogBetaBinomial_v_866;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_867> AgradCdfLogBetaBinomial_v_867;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_868> AgradCdfLogBetaBinomial_v_868;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_869> AgradCdfLogBetaBinomial_v_869;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_870> AgradCdfLogBetaBinomial_v_870;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_871> AgradCdfLogBetaBinomial_v_871;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_872> AgradCdfLogBetaBinomial_v_872;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_873> AgradCdfLogBetaBinomial_v_873;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_874> AgradCdfLogBetaBinomial_v_874;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_875> AgradCdfLogBetaBinomial_v_875;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_876> AgradCdfLogBetaBinomial_v_876;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_877> AgradCdfLogBetaBinomial_v_877;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_878> AgradCdfLogBetaBinomial_v_878;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_879> AgradCdfLogBetaBinomial_v_879;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_880> AgradCdfLogBetaBinomial_v_880;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_881> AgradCdfLogBetaBinomial_v_881;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_882> AgradCdfLogBetaBinomial_v_882;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_883> AgradCdfLogBetaBinomial_v_883;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_884> AgradCdfLogBetaBinomial_v_884;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_885> AgradCdfLogBetaBinomial_v_885;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_886> AgradCdfLogBetaBinomial_v_886;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_887> AgradCdfLogBetaBinomial_v_887;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_888> AgradCdfLogBetaBinomial_v_888;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_889> AgradCdfLogBetaBinomial_v_889;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_890> AgradCdfLogBetaBinomial_v_890;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_891> AgradCdfLogBetaBinomial_v_891;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_892> AgradCdfLogBetaBinomial_v_892;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_893> AgradCdfLogBetaBinomial_v_893;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_894> AgradCdfLogBetaBinomial_v_894;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_895> AgradCdfLogBetaBinomial_v_895;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_896> AgradCdfLogBetaBinomial_v_896;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_897> AgradCdfLogBetaBinomial_v_897;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_898> AgradCdfLogBetaBinomial_v_898;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_v_899> AgradCdfLogBetaBinomial_v_899;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_800, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_800);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_801, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_801);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_802, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_802);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_803, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_803);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_804, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_804);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_805, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_805);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_806, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_806);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_807, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_807);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_808, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_808);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_809, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_809);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_810, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_810);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_811, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_811);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_812, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_812);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_813, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_813);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_814, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_814);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_815, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_815);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_816, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_816);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_817, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_817);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_818, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_818);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_819, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_819);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_820, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_820);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_821, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_821);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_822, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_822);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_823, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_823);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_824, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_824);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_825, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_825);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_826, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_826);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_827, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_827);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_828, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_828);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_829, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_829);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_830, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_830);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_831, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_831);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_832, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_832);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_833, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_833);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_834, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_834);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_835, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_835);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_836, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_836);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_837, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_837);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_838, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_838);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_839, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_839);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_840, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_840);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_841, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_841);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_842, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_842);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_843, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_843);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_844, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_844);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_845, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_845);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_846, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_846);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_847, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_847);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_848, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_848);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_849, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_849);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_850, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_850);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_851, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_851);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_852, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_852);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_853, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_853);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_854, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_854);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_855, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_855);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_856, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_856);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_857, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_857);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_858, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_858);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_859, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_859);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_860, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_860);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_861, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_861);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_862, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_862);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_863, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_863);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_864, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_864);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_865, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_865);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_866, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_866);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_867, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_867);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_868, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_868);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_869, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_869);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_870, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_870);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_871, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_871);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_872, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_872);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_873, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_873);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_874, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_874);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_875, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_875);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_876, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_876);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_877, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_877);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_878, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_878);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_879, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_879);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_880, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_880);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_881, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_881);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_882, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_882);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_883, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_883);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_884, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_884);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_885, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_885);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_886, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_886);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_887, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_887);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_888, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_888);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_889, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_889);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_890, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_890);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_891, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_891);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_892, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_892);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_893, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_893);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_894, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_894);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_895, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_895);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_896, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_896);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_897, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_897);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_898, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_898);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_v_899, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_v_899);

