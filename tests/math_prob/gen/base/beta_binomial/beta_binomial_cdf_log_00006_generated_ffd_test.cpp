#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_699;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_600> AgradCdfLogBetaBinomial_ffd_600;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_601> AgradCdfLogBetaBinomial_ffd_601;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_602> AgradCdfLogBetaBinomial_ffd_602;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_603> AgradCdfLogBetaBinomial_ffd_603;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_604> AgradCdfLogBetaBinomial_ffd_604;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_605> AgradCdfLogBetaBinomial_ffd_605;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_606> AgradCdfLogBetaBinomial_ffd_606;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_607> AgradCdfLogBetaBinomial_ffd_607;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_608> AgradCdfLogBetaBinomial_ffd_608;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_609> AgradCdfLogBetaBinomial_ffd_609;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_610> AgradCdfLogBetaBinomial_ffd_610;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_611> AgradCdfLogBetaBinomial_ffd_611;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_612> AgradCdfLogBetaBinomial_ffd_612;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_613> AgradCdfLogBetaBinomial_ffd_613;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_614> AgradCdfLogBetaBinomial_ffd_614;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_615> AgradCdfLogBetaBinomial_ffd_615;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_616> AgradCdfLogBetaBinomial_ffd_616;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_617> AgradCdfLogBetaBinomial_ffd_617;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_618> AgradCdfLogBetaBinomial_ffd_618;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_619> AgradCdfLogBetaBinomial_ffd_619;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_620> AgradCdfLogBetaBinomial_ffd_620;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_621> AgradCdfLogBetaBinomial_ffd_621;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_622> AgradCdfLogBetaBinomial_ffd_622;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_623> AgradCdfLogBetaBinomial_ffd_623;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_624> AgradCdfLogBetaBinomial_ffd_624;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_625> AgradCdfLogBetaBinomial_ffd_625;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_626> AgradCdfLogBetaBinomial_ffd_626;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_627> AgradCdfLogBetaBinomial_ffd_627;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_628> AgradCdfLogBetaBinomial_ffd_628;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_629> AgradCdfLogBetaBinomial_ffd_629;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_630> AgradCdfLogBetaBinomial_ffd_630;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_631> AgradCdfLogBetaBinomial_ffd_631;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_632> AgradCdfLogBetaBinomial_ffd_632;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_633> AgradCdfLogBetaBinomial_ffd_633;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_634> AgradCdfLogBetaBinomial_ffd_634;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_635> AgradCdfLogBetaBinomial_ffd_635;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_636> AgradCdfLogBetaBinomial_ffd_636;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_637> AgradCdfLogBetaBinomial_ffd_637;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_638> AgradCdfLogBetaBinomial_ffd_638;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_639> AgradCdfLogBetaBinomial_ffd_639;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_640> AgradCdfLogBetaBinomial_ffd_640;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_641> AgradCdfLogBetaBinomial_ffd_641;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_642> AgradCdfLogBetaBinomial_ffd_642;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_643> AgradCdfLogBetaBinomial_ffd_643;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_644> AgradCdfLogBetaBinomial_ffd_644;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_645> AgradCdfLogBetaBinomial_ffd_645;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_646> AgradCdfLogBetaBinomial_ffd_646;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_647> AgradCdfLogBetaBinomial_ffd_647;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_648> AgradCdfLogBetaBinomial_ffd_648;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_649> AgradCdfLogBetaBinomial_ffd_649;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_650> AgradCdfLogBetaBinomial_ffd_650;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_651> AgradCdfLogBetaBinomial_ffd_651;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_652> AgradCdfLogBetaBinomial_ffd_652;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_653> AgradCdfLogBetaBinomial_ffd_653;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_654> AgradCdfLogBetaBinomial_ffd_654;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_655> AgradCdfLogBetaBinomial_ffd_655;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_656> AgradCdfLogBetaBinomial_ffd_656;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_657> AgradCdfLogBetaBinomial_ffd_657;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_658> AgradCdfLogBetaBinomial_ffd_658;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_659> AgradCdfLogBetaBinomial_ffd_659;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_660> AgradCdfLogBetaBinomial_ffd_660;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_661> AgradCdfLogBetaBinomial_ffd_661;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_662> AgradCdfLogBetaBinomial_ffd_662;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_663> AgradCdfLogBetaBinomial_ffd_663;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_664> AgradCdfLogBetaBinomial_ffd_664;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_665> AgradCdfLogBetaBinomial_ffd_665;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_666> AgradCdfLogBetaBinomial_ffd_666;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_667> AgradCdfLogBetaBinomial_ffd_667;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_668> AgradCdfLogBetaBinomial_ffd_668;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_669> AgradCdfLogBetaBinomial_ffd_669;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_670> AgradCdfLogBetaBinomial_ffd_670;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_671> AgradCdfLogBetaBinomial_ffd_671;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_672> AgradCdfLogBetaBinomial_ffd_672;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_673> AgradCdfLogBetaBinomial_ffd_673;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_674> AgradCdfLogBetaBinomial_ffd_674;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_675> AgradCdfLogBetaBinomial_ffd_675;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_676> AgradCdfLogBetaBinomial_ffd_676;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_677> AgradCdfLogBetaBinomial_ffd_677;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_678> AgradCdfLogBetaBinomial_ffd_678;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_679> AgradCdfLogBetaBinomial_ffd_679;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_680> AgradCdfLogBetaBinomial_ffd_680;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_681> AgradCdfLogBetaBinomial_ffd_681;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_682> AgradCdfLogBetaBinomial_ffd_682;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_683> AgradCdfLogBetaBinomial_ffd_683;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_684> AgradCdfLogBetaBinomial_ffd_684;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_685> AgradCdfLogBetaBinomial_ffd_685;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_686> AgradCdfLogBetaBinomial_ffd_686;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_687> AgradCdfLogBetaBinomial_ffd_687;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_688> AgradCdfLogBetaBinomial_ffd_688;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_689> AgradCdfLogBetaBinomial_ffd_689;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_690> AgradCdfLogBetaBinomial_ffd_690;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_691> AgradCdfLogBetaBinomial_ffd_691;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_692> AgradCdfLogBetaBinomial_ffd_692;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_693> AgradCdfLogBetaBinomial_ffd_693;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_694> AgradCdfLogBetaBinomial_ffd_694;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_695> AgradCdfLogBetaBinomial_ffd_695;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_696> AgradCdfLogBetaBinomial_ffd_696;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_697> AgradCdfLogBetaBinomial_ffd_697;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_698> AgradCdfLogBetaBinomial_ffd_698;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffd_699> AgradCdfLogBetaBinomial_ffd_699;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_600, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_601, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_602, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_603, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_604, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_605, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_606, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_607, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_608, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_609, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_610, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_611, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_612, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_613, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_614, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_615, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_616, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_617, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_618, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_619, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_620, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_621, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_622, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_623, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_624, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_625, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_626, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_627, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_628, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_629, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_630, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_631, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_632, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_633, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_634, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_635, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_636, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_637, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_638, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_639, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_640, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_641, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_642, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_643, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_644, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_645, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_646, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_647, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_648, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_649, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_650, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_651, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_652, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_653, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_654, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_655, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_656, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_657, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_658, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_659, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_660, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_661, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_662, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_663, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_664, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_665, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_666, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_667, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_668, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_669, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_670, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_671, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_672, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_673, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_674, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_675, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_676, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_677, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_678, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_679, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_680, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_681, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_682, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_683, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_684, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_685, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_686, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_687, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_688, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_689, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_690, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_691, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_692, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_693, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_694, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_695, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_696, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_697, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_698, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffd_699, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffd_699);

