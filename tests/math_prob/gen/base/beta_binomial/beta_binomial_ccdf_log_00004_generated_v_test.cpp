#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, double, empty, empty> type_v_800;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, std::vector<double>, empty, empty> type_v_801;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_802;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_803;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, var, empty, empty> type_v_804;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, std::vector<var>, empty, empty> type_v_805;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_806;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_807;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, double, empty, empty> type_v_808;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, std::vector<double>, empty, empty> type_v_809;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_810;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_811;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, var, empty, empty> type_v_812;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, std::vector<var>, empty, empty> type_v_813;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_814;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_815;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_816;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_817;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_818;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_819;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_820;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_821;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_822;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_823;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_824;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_825;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_826;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_827;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_828;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_829;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_830;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_831;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, double, empty, empty> type_v_832;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<double>, empty, empty> type_v_833;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_834;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_835;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, var, empty, empty> type_v_836;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<var>, empty, empty> type_v_837;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_838;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_839;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, double, empty, empty> type_v_840;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<double>, empty, empty> type_v_841;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_842;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_843;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, var, empty, empty> type_v_844;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<var>, empty, empty> type_v_845;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_846;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_847;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_848;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_849;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_850;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_851;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_852;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_853;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_854;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_855;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_856;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_857;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_858;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_859;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_860;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_861;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_862;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_863;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, double, empty, empty> type_v_864;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, std::vector<double>, empty, empty> type_v_865;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_866;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_867;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, var, empty, empty> type_v_868;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, std::vector<var>, empty, empty> type_v_869;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_870;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_871;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, double, empty, empty> type_v_872;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, std::vector<double>, empty, empty> type_v_873;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_874;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_875;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, var, empty, empty> type_v_876;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, std::vector<var>, empty, empty> type_v_877;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_878;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_879;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_880;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_881;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_882;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_883;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_884;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_885;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_886;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_887;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_888;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_889;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_890;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_891;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_892;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_893;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_894;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_895;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, double, empty, empty> type_v_896;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<double>, empty, empty> type_v_897;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_898;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_899;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, var, empty, empty> type_v_900;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<var>, empty, empty> type_v_901;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_902;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_903;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, double, empty, empty> type_v_904;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<double>, empty, empty> type_v_905;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_906;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_907;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, var, empty, empty> type_v_908;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<var>, empty, empty> type_v_909;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_910;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_911;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_912;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_913;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_914;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_915;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_916;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_917;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_918;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_919;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_920;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_921;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_922;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_923;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_924;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_925;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_926;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_927;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, double, empty, empty> type_v_928;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, std::vector<double>, empty, empty> type_v_929;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_930;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_931;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, var, empty, empty> type_v_932;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, std::vector<var>, empty, empty> type_v_933;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_934;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_935;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, double, empty, empty> type_v_936;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, std::vector<double>, empty, empty> type_v_937;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_938;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_939;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, var, empty, empty> type_v_940;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, std::vector<var>, empty, empty> type_v_941;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_942;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<var>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_943;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, double, empty, empty> type_v_944;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_945;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_946;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_947;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, var, empty, empty> type_v_948;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_949;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_950;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_951;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, double, empty, empty> type_v_952;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_953;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_954;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_955;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, var, empty, empty> type_v_956;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_957;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_958;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_959;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, double, empty, empty> type_v_960;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<double>, empty, empty> type_v_961;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_962;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_963;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, var, empty, empty> type_v_964;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<var>, empty, empty> type_v_965;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_966;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_967;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, double, empty, empty> type_v_968;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<double>, empty, empty> type_v_969;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_970;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_971;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, var, empty, empty> type_v_972;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<var>, empty, empty> type_v_973;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_974;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_975;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty> type_v_976;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_v_977;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_978;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_979;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, var, empty, empty> type_v_980;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<var>, empty, empty> type_v_981;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_982;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_983;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty> type_v_984;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_v_985;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_986;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_987;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, var, empty, empty> type_v_988;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<var>, empty, empty> type_v_989;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_990;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_991;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, double, empty, empty> type_v_992;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, std::vector<double>, empty, empty> type_v_993;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_v_994;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_v_995;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, var, empty, empty> type_v_996;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, std::vector<var>, empty, empty> type_v_997;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<var, Eigen::Dynamic, 1>, empty, empty> type_v_998;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, var, Eigen::Matrix<var, 1, Eigen::Dynamic>, empty, empty> type_v_999;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_800> AgradCcdfLogBetaBinomial_v_800;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_801> AgradCcdfLogBetaBinomial_v_801;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_802> AgradCcdfLogBetaBinomial_v_802;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_803> AgradCcdfLogBetaBinomial_v_803;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_804> AgradCcdfLogBetaBinomial_v_804;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_805> AgradCcdfLogBetaBinomial_v_805;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_806> AgradCcdfLogBetaBinomial_v_806;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_807> AgradCcdfLogBetaBinomial_v_807;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_808> AgradCcdfLogBetaBinomial_v_808;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_809> AgradCcdfLogBetaBinomial_v_809;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_810> AgradCcdfLogBetaBinomial_v_810;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_811> AgradCcdfLogBetaBinomial_v_811;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_812> AgradCcdfLogBetaBinomial_v_812;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_813> AgradCcdfLogBetaBinomial_v_813;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_814> AgradCcdfLogBetaBinomial_v_814;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_815> AgradCcdfLogBetaBinomial_v_815;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_816> AgradCcdfLogBetaBinomial_v_816;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_817> AgradCcdfLogBetaBinomial_v_817;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_818> AgradCcdfLogBetaBinomial_v_818;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_819> AgradCcdfLogBetaBinomial_v_819;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_820> AgradCcdfLogBetaBinomial_v_820;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_821> AgradCcdfLogBetaBinomial_v_821;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_822> AgradCcdfLogBetaBinomial_v_822;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_823> AgradCcdfLogBetaBinomial_v_823;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_824> AgradCcdfLogBetaBinomial_v_824;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_825> AgradCcdfLogBetaBinomial_v_825;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_826> AgradCcdfLogBetaBinomial_v_826;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_827> AgradCcdfLogBetaBinomial_v_827;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_828> AgradCcdfLogBetaBinomial_v_828;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_829> AgradCcdfLogBetaBinomial_v_829;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_830> AgradCcdfLogBetaBinomial_v_830;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_831> AgradCcdfLogBetaBinomial_v_831;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_832> AgradCcdfLogBetaBinomial_v_832;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_833> AgradCcdfLogBetaBinomial_v_833;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_834> AgradCcdfLogBetaBinomial_v_834;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_835> AgradCcdfLogBetaBinomial_v_835;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_836> AgradCcdfLogBetaBinomial_v_836;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_837> AgradCcdfLogBetaBinomial_v_837;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_838> AgradCcdfLogBetaBinomial_v_838;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_839> AgradCcdfLogBetaBinomial_v_839;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_840> AgradCcdfLogBetaBinomial_v_840;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_841> AgradCcdfLogBetaBinomial_v_841;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_842> AgradCcdfLogBetaBinomial_v_842;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_843> AgradCcdfLogBetaBinomial_v_843;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_844> AgradCcdfLogBetaBinomial_v_844;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_845> AgradCcdfLogBetaBinomial_v_845;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_846> AgradCcdfLogBetaBinomial_v_846;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_847> AgradCcdfLogBetaBinomial_v_847;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_848> AgradCcdfLogBetaBinomial_v_848;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_849> AgradCcdfLogBetaBinomial_v_849;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_850> AgradCcdfLogBetaBinomial_v_850;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_851> AgradCcdfLogBetaBinomial_v_851;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_852> AgradCcdfLogBetaBinomial_v_852;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_853> AgradCcdfLogBetaBinomial_v_853;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_854> AgradCcdfLogBetaBinomial_v_854;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_855> AgradCcdfLogBetaBinomial_v_855;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_856> AgradCcdfLogBetaBinomial_v_856;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_857> AgradCcdfLogBetaBinomial_v_857;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_858> AgradCcdfLogBetaBinomial_v_858;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_859> AgradCcdfLogBetaBinomial_v_859;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_860> AgradCcdfLogBetaBinomial_v_860;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_861> AgradCcdfLogBetaBinomial_v_861;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_862> AgradCcdfLogBetaBinomial_v_862;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_863> AgradCcdfLogBetaBinomial_v_863;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_864> AgradCcdfLogBetaBinomial_v_864;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_865> AgradCcdfLogBetaBinomial_v_865;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_866> AgradCcdfLogBetaBinomial_v_866;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_867> AgradCcdfLogBetaBinomial_v_867;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_868> AgradCcdfLogBetaBinomial_v_868;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_869> AgradCcdfLogBetaBinomial_v_869;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_870> AgradCcdfLogBetaBinomial_v_870;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_871> AgradCcdfLogBetaBinomial_v_871;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_872> AgradCcdfLogBetaBinomial_v_872;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_873> AgradCcdfLogBetaBinomial_v_873;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_874> AgradCcdfLogBetaBinomial_v_874;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_875> AgradCcdfLogBetaBinomial_v_875;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_876> AgradCcdfLogBetaBinomial_v_876;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_877> AgradCcdfLogBetaBinomial_v_877;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_878> AgradCcdfLogBetaBinomial_v_878;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_879> AgradCcdfLogBetaBinomial_v_879;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_880> AgradCcdfLogBetaBinomial_v_880;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_881> AgradCcdfLogBetaBinomial_v_881;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_882> AgradCcdfLogBetaBinomial_v_882;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_883> AgradCcdfLogBetaBinomial_v_883;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_884> AgradCcdfLogBetaBinomial_v_884;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_885> AgradCcdfLogBetaBinomial_v_885;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_886> AgradCcdfLogBetaBinomial_v_886;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_887> AgradCcdfLogBetaBinomial_v_887;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_888> AgradCcdfLogBetaBinomial_v_888;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_889> AgradCcdfLogBetaBinomial_v_889;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_890> AgradCcdfLogBetaBinomial_v_890;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_891> AgradCcdfLogBetaBinomial_v_891;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_892> AgradCcdfLogBetaBinomial_v_892;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_893> AgradCcdfLogBetaBinomial_v_893;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_894> AgradCcdfLogBetaBinomial_v_894;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_895> AgradCcdfLogBetaBinomial_v_895;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_896> AgradCcdfLogBetaBinomial_v_896;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_897> AgradCcdfLogBetaBinomial_v_897;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_898> AgradCcdfLogBetaBinomial_v_898;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_899> AgradCcdfLogBetaBinomial_v_899;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_900> AgradCcdfLogBetaBinomial_v_900;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_901> AgradCcdfLogBetaBinomial_v_901;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_902> AgradCcdfLogBetaBinomial_v_902;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_903> AgradCcdfLogBetaBinomial_v_903;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_904> AgradCcdfLogBetaBinomial_v_904;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_905> AgradCcdfLogBetaBinomial_v_905;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_906> AgradCcdfLogBetaBinomial_v_906;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_907> AgradCcdfLogBetaBinomial_v_907;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_908> AgradCcdfLogBetaBinomial_v_908;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_909> AgradCcdfLogBetaBinomial_v_909;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_910> AgradCcdfLogBetaBinomial_v_910;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_911> AgradCcdfLogBetaBinomial_v_911;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_912> AgradCcdfLogBetaBinomial_v_912;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_913> AgradCcdfLogBetaBinomial_v_913;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_914> AgradCcdfLogBetaBinomial_v_914;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_915> AgradCcdfLogBetaBinomial_v_915;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_916> AgradCcdfLogBetaBinomial_v_916;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_917> AgradCcdfLogBetaBinomial_v_917;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_918> AgradCcdfLogBetaBinomial_v_918;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_919> AgradCcdfLogBetaBinomial_v_919;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_920> AgradCcdfLogBetaBinomial_v_920;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_921> AgradCcdfLogBetaBinomial_v_921;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_922> AgradCcdfLogBetaBinomial_v_922;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_923> AgradCcdfLogBetaBinomial_v_923;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_924> AgradCcdfLogBetaBinomial_v_924;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_925> AgradCcdfLogBetaBinomial_v_925;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_926> AgradCcdfLogBetaBinomial_v_926;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_927> AgradCcdfLogBetaBinomial_v_927;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_928> AgradCcdfLogBetaBinomial_v_928;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_929> AgradCcdfLogBetaBinomial_v_929;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_930> AgradCcdfLogBetaBinomial_v_930;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_931> AgradCcdfLogBetaBinomial_v_931;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_932> AgradCcdfLogBetaBinomial_v_932;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_933> AgradCcdfLogBetaBinomial_v_933;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_934> AgradCcdfLogBetaBinomial_v_934;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_935> AgradCcdfLogBetaBinomial_v_935;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_936> AgradCcdfLogBetaBinomial_v_936;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_937> AgradCcdfLogBetaBinomial_v_937;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_938> AgradCcdfLogBetaBinomial_v_938;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_939> AgradCcdfLogBetaBinomial_v_939;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_940> AgradCcdfLogBetaBinomial_v_940;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_941> AgradCcdfLogBetaBinomial_v_941;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_942> AgradCcdfLogBetaBinomial_v_942;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_943> AgradCcdfLogBetaBinomial_v_943;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_944> AgradCcdfLogBetaBinomial_v_944;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_945> AgradCcdfLogBetaBinomial_v_945;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_946> AgradCcdfLogBetaBinomial_v_946;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_947> AgradCcdfLogBetaBinomial_v_947;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_948> AgradCcdfLogBetaBinomial_v_948;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_949> AgradCcdfLogBetaBinomial_v_949;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_950> AgradCcdfLogBetaBinomial_v_950;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_951> AgradCcdfLogBetaBinomial_v_951;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_952> AgradCcdfLogBetaBinomial_v_952;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_953> AgradCcdfLogBetaBinomial_v_953;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_954> AgradCcdfLogBetaBinomial_v_954;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_955> AgradCcdfLogBetaBinomial_v_955;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_956> AgradCcdfLogBetaBinomial_v_956;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_957> AgradCcdfLogBetaBinomial_v_957;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_958> AgradCcdfLogBetaBinomial_v_958;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_959> AgradCcdfLogBetaBinomial_v_959;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_960> AgradCcdfLogBetaBinomial_v_960;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_961> AgradCcdfLogBetaBinomial_v_961;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_962> AgradCcdfLogBetaBinomial_v_962;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_963> AgradCcdfLogBetaBinomial_v_963;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_964> AgradCcdfLogBetaBinomial_v_964;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_965> AgradCcdfLogBetaBinomial_v_965;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_966> AgradCcdfLogBetaBinomial_v_966;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_967> AgradCcdfLogBetaBinomial_v_967;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_968> AgradCcdfLogBetaBinomial_v_968;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_969> AgradCcdfLogBetaBinomial_v_969;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_970> AgradCcdfLogBetaBinomial_v_970;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_971> AgradCcdfLogBetaBinomial_v_971;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_972> AgradCcdfLogBetaBinomial_v_972;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_973> AgradCcdfLogBetaBinomial_v_973;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_974> AgradCcdfLogBetaBinomial_v_974;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_975> AgradCcdfLogBetaBinomial_v_975;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_976> AgradCcdfLogBetaBinomial_v_976;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_977> AgradCcdfLogBetaBinomial_v_977;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_978> AgradCcdfLogBetaBinomial_v_978;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_979> AgradCcdfLogBetaBinomial_v_979;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_980> AgradCcdfLogBetaBinomial_v_980;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_981> AgradCcdfLogBetaBinomial_v_981;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_982> AgradCcdfLogBetaBinomial_v_982;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_983> AgradCcdfLogBetaBinomial_v_983;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_984> AgradCcdfLogBetaBinomial_v_984;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_985> AgradCcdfLogBetaBinomial_v_985;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_986> AgradCcdfLogBetaBinomial_v_986;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_987> AgradCcdfLogBetaBinomial_v_987;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_988> AgradCcdfLogBetaBinomial_v_988;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_989> AgradCcdfLogBetaBinomial_v_989;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_990> AgradCcdfLogBetaBinomial_v_990;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_991> AgradCcdfLogBetaBinomial_v_991;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_992> AgradCcdfLogBetaBinomial_v_992;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_993> AgradCcdfLogBetaBinomial_v_993;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_994> AgradCcdfLogBetaBinomial_v_994;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_995> AgradCcdfLogBetaBinomial_v_995;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_996> AgradCcdfLogBetaBinomial_v_996;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_997> AgradCcdfLogBetaBinomial_v_997;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_998> AgradCcdfLogBetaBinomial_v_998;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_v_999> AgradCcdfLogBetaBinomial_v_999;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_800, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_800);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_801, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_801);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_802, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_802);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_803, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_803);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_804, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_804);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_805, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_805);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_806, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_806);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_807, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_807);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_808, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_808);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_809, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_809);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_810, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_810);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_811, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_811);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_812, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_812);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_813, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_813);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_814, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_814);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_815, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_815);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_816, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_816);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_817, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_817);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_818, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_818);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_819, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_819);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_820, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_820);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_821, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_821);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_822, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_822);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_823, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_823);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_824, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_824);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_825, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_825);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_826, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_826);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_827, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_827);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_828, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_828);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_829, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_829);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_830, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_830);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_831, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_831);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_832, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_832);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_833, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_833);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_834, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_834);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_835, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_835);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_836, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_836);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_837, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_837);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_838, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_838);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_839, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_839);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_840, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_840);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_841, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_841);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_842, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_842);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_843, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_843);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_844, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_844);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_845, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_845);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_846, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_846);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_847, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_847);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_848, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_848);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_849, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_849);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_850, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_850);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_851, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_851);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_852, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_852);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_853, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_853);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_854, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_854);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_855, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_855);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_856, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_856);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_857, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_857);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_858, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_858);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_859, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_859);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_860, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_860);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_861, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_861);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_862, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_862);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_863, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_863);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_864, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_864);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_865, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_865);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_866, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_866);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_867, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_867);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_868, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_868);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_869, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_869);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_870, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_870);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_871, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_871);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_872, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_872);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_873, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_873);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_874, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_874);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_875, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_875);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_876, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_876);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_877, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_877);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_878, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_878);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_879, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_879);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_880, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_880);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_881, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_881);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_882, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_882);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_883, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_883);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_884, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_884);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_885, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_885);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_886, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_886);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_887, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_887);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_888, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_888);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_889, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_889);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_890, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_890);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_891, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_891);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_892, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_892);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_893, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_893);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_894, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_894);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_895, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_895);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_896, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_896);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_897, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_897);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_898, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_898);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_899, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_899);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_900, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_900);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_901, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_901);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_902, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_902);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_903, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_903);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_904, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_904);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_905, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_905);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_906, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_906);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_907, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_907);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_908, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_908);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_909, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_909);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_910, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_910);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_911, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_911);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_912, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_912);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_913, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_913);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_914, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_914);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_915, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_915);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_916, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_916);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_917, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_917);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_918, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_918);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_919, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_919);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_920, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_920);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_921, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_921);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_922, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_922);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_923, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_923);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_924, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_924);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_925, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_925);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_926, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_926);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_927, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_927);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_928, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_928);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_929, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_929);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_930, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_930);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_931, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_931);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_932, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_932);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_933, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_933);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_934, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_934);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_935, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_935);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_936, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_936);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_937, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_937);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_938, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_938);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_939, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_939);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_940, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_940);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_941, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_941);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_942, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_942);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_943, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_943);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_944, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_944);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_945, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_945);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_946, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_946);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_947, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_947);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_948, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_948);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_949, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_949);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_950, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_950);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_951, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_951);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_952, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_952);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_953, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_953);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_954, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_954);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_955, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_955);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_956, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_956);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_957, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_957);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_958, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_958);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_959, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_959);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_960, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_960);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_961, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_961);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_962, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_962);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_963, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_963);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_964, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_964);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_965, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_965);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_966, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_966);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_967, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_967);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_968, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_968);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_969, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_969);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_970, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_970);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_971, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_971);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_972, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_972);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_973, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_973);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_974, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_974);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_975, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_975);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_976, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_976);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_977, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_977);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_978, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_978);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_979, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_979);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_980, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_980);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_981, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_981);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_982, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_982);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_983, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_983);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_984, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_984);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_985, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_985);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_986, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_986);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_987, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_987);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_988, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_988);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_989, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_989);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_990, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_990);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_991, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_991);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_992, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_992);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_993, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_993);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_994, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_994);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_995, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_995);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_996, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_996);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_997, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_997);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_998, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_998);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_v_999, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_v_999);

