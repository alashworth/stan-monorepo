#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty> type_ffv_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty> type_ffv_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<fvar<var> >, empty, empty> type_ffv_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, double, empty, empty> type_ffv_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_599;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_500> AgradCdfBetaBinomial_ffv_500;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_501> AgradCdfBetaBinomial_ffv_501;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_502> AgradCdfBetaBinomial_ffv_502;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_503> AgradCdfBetaBinomial_ffv_503;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_504> AgradCdfBetaBinomial_ffv_504;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_505> AgradCdfBetaBinomial_ffv_505;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_506> AgradCdfBetaBinomial_ffv_506;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_507> AgradCdfBetaBinomial_ffv_507;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_508> AgradCdfBetaBinomial_ffv_508;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_509> AgradCdfBetaBinomial_ffv_509;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_510> AgradCdfBetaBinomial_ffv_510;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_511> AgradCdfBetaBinomial_ffv_511;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_512> AgradCdfBetaBinomial_ffv_512;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_513> AgradCdfBetaBinomial_ffv_513;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_514> AgradCdfBetaBinomial_ffv_514;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_515> AgradCdfBetaBinomial_ffv_515;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_516> AgradCdfBetaBinomial_ffv_516;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_517> AgradCdfBetaBinomial_ffv_517;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_518> AgradCdfBetaBinomial_ffv_518;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_519> AgradCdfBetaBinomial_ffv_519;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_520> AgradCdfBetaBinomial_ffv_520;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_521> AgradCdfBetaBinomial_ffv_521;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_522> AgradCdfBetaBinomial_ffv_522;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_523> AgradCdfBetaBinomial_ffv_523;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_524> AgradCdfBetaBinomial_ffv_524;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_525> AgradCdfBetaBinomial_ffv_525;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_526> AgradCdfBetaBinomial_ffv_526;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_527> AgradCdfBetaBinomial_ffv_527;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_528> AgradCdfBetaBinomial_ffv_528;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_529> AgradCdfBetaBinomial_ffv_529;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_530> AgradCdfBetaBinomial_ffv_530;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_531> AgradCdfBetaBinomial_ffv_531;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_532> AgradCdfBetaBinomial_ffv_532;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_533> AgradCdfBetaBinomial_ffv_533;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_534> AgradCdfBetaBinomial_ffv_534;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_535> AgradCdfBetaBinomial_ffv_535;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_536> AgradCdfBetaBinomial_ffv_536;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_537> AgradCdfBetaBinomial_ffv_537;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_538> AgradCdfBetaBinomial_ffv_538;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_539> AgradCdfBetaBinomial_ffv_539;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_540> AgradCdfBetaBinomial_ffv_540;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_541> AgradCdfBetaBinomial_ffv_541;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_542> AgradCdfBetaBinomial_ffv_542;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_543> AgradCdfBetaBinomial_ffv_543;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_544> AgradCdfBetaBinomial_ffv_544;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_545> AgradCdfBetaBinomial_ffv_545;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_546> AgradCdfBetaBinomial_ffv_546;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_547> AgradCdfBetaBinomial_ffv_547;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_548> AgradCdfBetaBinomial_ffv_548;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_549> AgradCdfBetaBinomial_ffv_549;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_550> AgradCdfBetaBinomial_ffv_550;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_551> AgradCdfBetaBinomial_ffv_551;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_552> AgradCdfBetaBinomial_ffv_552;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_553> AgradCdfBetaBinomial_ffv_553;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_554> AgradCdfBetaBinomial_ffv_554;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_555> AgradCdfBetaBinomial_ffv_555;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_556> AgradCdfBetaBinomial_ffv_556;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_557> AgradCdfBetaBinomial_ffv_557;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_558> AgradCdfBetaBinomial_ffv_558;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_559> AgradCdfBetaBinomial_ffv_559;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_560> AgradCdfBetaBinomial_ffv_560;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_561> AgradCdfBetaBinomial_ffv_561;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_562> AgradCdfBetaBinomial_ffv_562;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_563> AgradCdfBetaBinomial_ffv_563;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_564> AgradCdfBetaBinomial_ffv_564;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_565> AgradCdfBetaBinomial_ffv_565;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_566> AgradCdfBetaBinomial_ffv_566;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_567> AgradCdfBetaBinomial_ffv_567;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_568> AgradCdfBetaBinomial_ffv_568;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_569> AgradCdfBetaBinomial_ffv_569;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_570> AgradCdfBetaBinomial_ffv_570;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_571> AgradCdfBetaBinomial_ffv_571;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_572> AgradCdfBetaBinomial_ffv_572;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_573> AgradCdfBetaBinomial_ffv_573;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_574> AgradCdfBetaBinomial_ffv_574;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_575> AgradCdfBetaBinomial_ffv_575;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_576> AgradCdfBetaBinomial_ffv_576;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_577> AgradCdfBetaBinomial_ffv_577;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_578> AgradCdfBetaBinomial_ffv_578;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_579> AgradCdfBetaBinomial_ffv_579;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_580> AgradCdfBetaBinomial_ffv_580;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_581> AgradCdfBetaBinomial_ffv_581;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_582> AgradCdfBetaBinomial_ffv_582;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_583> AgradCdfBetaBinomial_ffv_583;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_584> AgradCdfBetaBinomial_ffv_584;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_585> AgradCdfBetaBinomial_ffv_585;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_586> AgradCdfBetaBinomial_ffv_586;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_587> AgradCdfBetaBinomial_ffv_587;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_588> AgradCdfBetaBinomial_ffv_588;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_589> AgradCdfBetaBinomial_ffv_589;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_590> AgradCdfBetaBinomial_ffv_590;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_591> AgradCdfBetaBinomial_ffv_591;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_592> AgradCdfBetaBinomial_ffv_592;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_593> AgradCdfBetaBinomial_ffv_593;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_594> AgradCdfBetaBinomial_ffv_594;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_595> AgradCdfBetaBinomial_ffv_595;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_596> AgradCdfBetaBinomial_ffv_596;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_597> AgradCdfBetaBinomial_ffv_597;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_598> AgradCdfBetaBinomial_ffv_598;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_599> AgradCdfBetaBinomial_ffv_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_500, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_501, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_502, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_503, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_504, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_505, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_506, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_507, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_508, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_509, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_510, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_511, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_512, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_513, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_514, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_515, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_516, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_517, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_518, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_519, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_520, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_521, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_522, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_523, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_524, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_525, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_526, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_527, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_528, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_529, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_530, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_531, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_532, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_533, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_534, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_535, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_536, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_537, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_538, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_539, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_540, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_541, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_542, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_543, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_544, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_545, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_546, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_547, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_548, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_549, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_550, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_551, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_552, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_553, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_554, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_555, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_556, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_557, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_558, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_559, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_560, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_561, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_562, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_563, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_564, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_565, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_566, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_567, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_568, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_569, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_570, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_571, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_572, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_573, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_574, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_575, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_576, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_577, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_578, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_579, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_580, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_581, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_582, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_583, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_584, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_585, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_586, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_587, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_588, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_589, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_590, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_591, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_592, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_593, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_594, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_595, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_596, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_597, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_598, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_599, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_599);

