#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, fvar<double>, empty, empty> type_fd_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, double, empty, empty> type_fd_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty> type_fd_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty> type_fd_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty> type_fd_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty> type_fd_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty> type_fd_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty> type_fd_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty> type_fd_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<double>, empty, empty> type_fd_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<double>>, empty, empty> type_fd_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<double>, empty, empty> type_fd_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, double, empty, empty> type_fd_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, std::vector<double>, empty, empty> type_fd_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, fvar<double>, empty, empty> type_fd_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_599;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_500> AgradCcdfLogBetaBinomial_fd_500;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_501> AgradCcdfLogBetaBinomial_fd_501;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_502> AgradCcdfLogBetaBinomial_fd_502;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_503> AgradCcdfLogBetaBinomial_fd_503;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_504> AgradCcdfLogBetaBinomial_fd_504;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_505> AgradCcdfLogBetaBinomial_fd_505;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_506> AgradCcdfLogBetaBinomial_fd_506;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_507> AgradCcdfLogBetaBinomial_fd_507;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_508> AgradCcdfLogBetaBinomial_fd_508;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_509> AgradCcdfLogBetaBinomial_fd_509;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_510> AgradCcdfLogBetaBinomial_fd_510;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_511> AgradCcdfLogBetaBinomial_fd_511;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_512> AgradCcdfLogBetaBinomial_fd_512;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_513> AgradCcdfLogBetaBinomial_fd_513;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_514> AgradCcdfLogBetaBinomial_fd_514;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_515> AgradCcdfLogBetaBinomial_fd_515;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_516> AgradCcdfLogBetaBinomial_fd_516;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_517> AgradCcdfLogBetaBinomial_fd_517;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_518> AgradCcdfLogBetaBinomial_fd_518;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_519> AgradCcdfLogBetaBinomial_fd_519;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_520> AgradCcdfLogBetaBinomial_fd_520;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_521> AgradCcdfLogBetaBinomial_fd_521;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_522> AgradCcdfLogBetaBinomial_fd_522;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_523> AgradCcdfLogBetaBinomial_fd_523;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_524> AgradCcdfLogBetaBinomial_fd_524;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_525> AgradCcdfLogBetaBinomial_fd_525;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_526> AgradCcdfLogBetaBinomial_fd_526;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_527> AgradCcdfLogBetaBinomial_fd_527;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_528> AgradCcdfLogBetaBinomial_fd_528;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_529> AgradCcdfLogBetaBinomial_fd_529;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_530> AgradCcdfLogBetaBinomial_fd_530;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_531> AgradCcdfLogBetaBinomial_fd_531;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_532> AgradCcdfLogBetaBinomial_fd_532;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_533> AgradCcdfLogBetaBinomial_fd_533;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_534> AgradCcdfLogBetaBinomial_fd_534;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_535> AgradCcdfLogBetaBinomial_fd_535;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_536> AgradCcdfLogBetaBinomial_fd_536;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_537> AgradCcdfLogBetaBinomial_fd_537;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_538> AgradCcdfLogBetaBinomial_fd_538;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_539> AgradCcdfLogBetaBinomial_fd_539;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_540> AgradCcdfLogBetaBinomial_fd_540;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_541> AgradCcdfLogBetaBinomial_fd_541;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_542> AgradCcdfLogBetaBinomial_fd_542;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_543> AgradCcdfLogBetaBinomial_fd_543;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_544> AgradCcdfLogBetaBinomial_fd_544;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_545> AgradCcdfLogBetaBinomial_fd_545;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_546> AgradCcdfLogBetaBinomial_fd_546;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_547> AgradCcdfLogBetaBinomial_fd_547;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_548> AgradCcdfLogBetaBinomial_fd_548;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_549> AgradCcdfLogBetaBinomial_fd_549;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_550> AgradCcdfLogBetaBinomial_fd_550;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_551> AgradCcdfLogBetaBinomial_fd_551;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_552> AgradCcdfLogBetaBinomial_fd_552;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_553> AgradCcdfLogBetaBinomial_fd_553;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_554> AgradCcdfLogBetaBinomial_fd_554;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_555> AgradCcdfLogBetaBinomial_fd_555;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_556> AgradCcdfLogBetaBinomial_fd_556;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_557> AgradCcdfLogBetaBinomial_fd_557;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_558> AgradCcdfLogBetaBinomial_fd_558;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_559> AgradCcdfLogBetaBinomial_fd_559;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_560> AgradCcdfLogBetaBinomial_fd_560;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_561> AgradCcdfLogBetaBinomial_fd_561;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_562> AgradCcdfLogBetaBinomial_fd_562;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_563> AgradCcdfLogBetaBinomial_fd_563;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_564> AgradCcdfLogBetaBinomial_fd_564;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_565> AgradCcdfLogBetaBinomial_fd_565;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_566> AgradCcdfLogBetaBinomial_fd_566;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_567> AgradCcdfLogBetaBinomial_fd_567;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_568> AgradCcdfLogBetaBinomial_fd_568;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_569> AgradCcdfLogBetaBinomial_fd_569;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_570> AgradCcdfLogBetaBinomial_fd_570;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_571> AgradCcdfLogBetaBinomial_fd_571;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_572> AgradCcdfLogBetaBinomial_fd_572;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_573> AgradCcdfLogBetaBinomial_fd_573;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_574> AgradCcdfLogBetaBinomial_fd_574;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_575> AgradCcdfLogBetaBinomial_fd_575;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_576> AgradCcdfLogBetaBinomial_fd_576;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_577> AgradCcdfLogBetaBinomial_fd_577;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_578> AgradCcdfLogBetaBinomial_fd_578;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_579> AgradCcdfLogBetaBinomial_fd_579;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_580> AgradCcdfLogBetaBinomial_fd_580;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_581> AgradCcdfLogBetaBinomial_fd_581;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_582> AgradCcdfLogBetaBinomial_fd_582;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_583> AgradCcdfLogBetaBinomial_fd_583;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_584> AgradCcdfLogBetaBinomial_fd_584;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_585> AgradCcdfLogBetaBinomial_fd_585;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_586> AgradCcdfLogBetaBinomial_fd_586;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_587> AgradCcdfLogBetaBinomial_fd_587;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_588> AgradCcdfLogBetaBinomial_fd_588;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_589> AgradCcdfLogBetaBinomial_fd_589;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_590> AgradCcdfLogBetaBinomial_fd_590;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_591> AgradCcdfLogBetaBinomial_fd_591;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_592> AgradCcdfLogBetaBinomial_fd_592;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_593> AgradCcdfLogBetaBinomial_fd_593;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_594> AgradCcdfLogBetaBinomial_fd_594;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_595> AgradCcdfLogBetaBinomial_fd_595;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_596> AgradCcdfLogBetaBinomial_fd_596;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_597> AgradCcdfLogBetaBinomial_fd_597;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_598> AgradCcdfLogBetaBinomial_fd_598;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fd_599> AgradCcdfLogBetaBinomial_fd_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_500, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_501, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_502, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_503, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_504, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_505, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_506, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_507, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_508, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_509, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_510, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_511, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_512, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_513, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_514, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_515, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_516, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_517, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_518, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_519, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_520, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_521, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_522, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_523, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_524, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_525, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_526, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_527, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_528, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_529, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_530, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_531, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_532, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_533, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_534, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_535, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_536, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_537, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_538, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_539, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_540, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_541, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_542, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_543, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_544, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_545, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_546, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_547, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_548, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_549, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_550, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_551, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_552, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_553, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_554, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_555, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_556, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_557, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_558, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_559, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_560, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_561, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_562, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_563, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_564, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_565, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_566, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_567, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_568, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_569, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_570, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_571, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_572, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_573, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_574, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_575, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_576, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_577, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_578, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_579, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_580, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_581, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_582, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_583, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_584, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_585, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_586, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_587, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_588, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_589, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_590, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_591, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_592, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_593, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_594, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_595, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_596, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_597, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_598, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fd_599, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fd_599);

