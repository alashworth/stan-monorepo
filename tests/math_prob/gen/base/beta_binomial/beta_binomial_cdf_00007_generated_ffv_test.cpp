#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty> type_ffv_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty> type_ffv_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_767;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_700> AgradCdfBetaBinomial_ffv_700;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_701> AgradCdfBetaBinomial_ffv_701;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_702> AgradCdfBetaBinomial_ffv_702;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_703> AgradCdfBetaBinomial_ffv_703;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_704> AgradCdfBetaBinomial_ffv_704;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_705> AgradCdfBetaBinomial_ffv_705;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_706> AgradCdfBetaBinomial_ffv_706;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_707> AgradCdfBetaBinomial_ffv_707;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_708> AgradCdfBetaBinomial_ffv_708;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_709> AgradCdfBetaBinomial_ffv_709;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_710> AgradCdfBetaBinomial_ffv_710;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_711> AgradCdfBetaBinomial_ffv_711;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_712> AgradCdfBetaBinomial_ffv_712;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_713> AgradCdfBetaBinomial_ffv_713;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_714> AgradCdfBetaBinomial_ffv_714;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_715> AgradCdfBetaBinomial_ffv_715;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_716> AgradCdfBetaBinomial_ffv_716;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_717> AgradCdfBetaBinomial_ffv_717;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_718> AgradCdfBetaBinomial_ffv_718;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_719> AgradCdfBetaBinomial_ffv_719;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_720> AgradCdfBetaBinomial_ffv_720;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_721> AgradCdfBetaBinomial_ffv_721;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_722> AgradCdfBetaBinomial_ffv_722;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_723> AgradCdfBetaBinomial_ffv_723;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_724> AgradCdfBetaBinomial_ffv_724;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_725> AgradCdfBetaBinomial_ffv_725;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_726> AgradCdfBetaBinomial_ffv_726;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_727> AgradCdfBetaBinomial_ffv_727;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_728> AgradCdfBetaBinomial_ffv_728;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_729> AgradCdfBetaBinomial_ffv_729;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_730> AgradCdfBetaBinomial_ffv_730;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_731> AgradCdfBetaBinomial_ffv_731;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_732> AgradCdfBetaBinomial_ffv_732;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_733> AgradCdfBetaBinomial_ffv_733;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_734> AgradCdfBetaBinomial_ffv_734;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_735> AgradCdfBetaBinomial_ffv_735;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_736> AgradCdfBetaBinomial_ffv_736;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_737> AgradCdfBetaBinomial_ffv_737;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_738> AgradCdfBetaBinomial_ffv_738;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_739> AgradCdfBetaBinomial_ffv_739;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_740> AgradCdfBetaBinomial_ffv_740;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_741> AgradCdfBetaBinomial_ffv_741;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_742> AgradCdfBetaBinomial_ffv_742;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_743> AgradCdfBetaBinomial_ffv_743;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_744> AgradCdfBetaBinomial_ffv_744;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_745> AgradCdfBetaBinomial_ffv_745;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_746> AgradCdfBetaBinomial_ffv_746;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_747> AgradCdfBetaBinomial_ffv_747;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_748> AgradCdfBetaBinomial_ffv_748;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_749> AgradCdfBetaBinomial_ffv_749;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_750> AgradCdfBetaBinomial_ffv_750;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_751> AgradCdfBetaBinomial_ffv_751;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_752> AgradCdfBetaBinomial_ffv_752;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_753> AgradCdfBetaBinomial_ffv_753;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_754> AgradCdfBetaBinomial_ffv_754;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_755> AgradCdfBetaBinomial_ffv_755;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_756> AgradCdfBetaBinomial_ffv_756;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_757> AgradCdfBetaBinomial_ffv_757;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_758> AgradCdfBetaBinomial_ffv_758;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_759> AgradCdfBetaBinomial_ffv_759;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_760> AgradCdfBetaBinomial_ffv_760;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_761> AgradCdfBetaBinomial_ffv_761;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_762> AgradCdfBetaBinomial_ffv_762;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_763> AgradCdfBetaBinomial_ffv_763;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_764> AgradCdfBetaBinomial_ffv_764;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_765> AgradCdfBetaBinomial_ffv_765;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_766> AgradCdfBetaBinomial_ffv_766;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_ffv_767> AgradCdfBetaBinomial_ffv_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_700, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_701, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_702, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_703, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_704, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_705, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_706, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_707, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_708, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_709, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_710, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_711, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_712, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_713, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_714, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_715, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_716, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_717, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_718, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_719, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_720, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_721, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_722, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_723, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_724, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_725, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_726, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_727, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_728, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_729, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_730, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_731, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_732, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_733, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_734, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_735, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_736, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_737, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_738, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_739, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_740, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_741, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_742, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_743, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_744, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_745, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_746, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_747, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_748, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_749, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_750, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_751, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_752, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_753, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_754, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_755, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_756, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_757, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_758, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_759, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_760, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_761, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_762, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_763, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_764, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_765, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_766, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_ffv_767, AgradCdfTestFixture, AgradCdfBetaBinomial_ffv_767);

