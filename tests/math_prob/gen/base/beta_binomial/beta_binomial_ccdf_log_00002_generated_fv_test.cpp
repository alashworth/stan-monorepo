#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, double, empty, empty> type_fv_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, std::vector<double>, empty, empty> type_fv_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, fvar<var>, empty, empty> type_fv_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, double, empty, empty> type_fv_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<var>, empty, empty> type_fv_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<var>>, empty, empty> type_fv_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<var>, empty, empty> type_fv_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, double, empty, empty> type_fv_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, std::vector<double>, empty, empty> type_fv_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, fvar<var>, empty, empty> type_fv_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, double, empty, empty> type_fv_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<var>, empty, empty> type_fv_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<var>>, empty, empty> type_fv_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<var>, empty, empty> type_fv_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, double, empty, empty> type_fv_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<double>, empty, empty> type_fv_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_499;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, fvar<var>, empty, empty> type_fv_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, double, empty, empty> type_fv_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<var>, empty, empty> type_fv_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<var>>, empty, empty> type_fv_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<var>, empty, empty> type_fv_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, double, empty, empty> type_fv_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<double>, empty, empty> type_fv_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, fvar<var>, empty, empty> type_fv_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, double, empty, empty> type_fv_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<var>, empty, empty> type_fv_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<var>>, empty, empty> type_fv_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<var>, empty, empty> type_fv_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, double, empty, empty> type_fv_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, std::vector<double>, empty, empty> type_fv_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, fvar<var>, empty, empty> type_fv_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_599;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_400> AgradCcdfLogBetaBinomial_fv_400;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_401> AgradCcdfLogBetaBinomial_fv_401;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_402> AgradCcdfLogBetaBinomial_fv_402;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_403> AgradCcdfLogBetaBinomial_fv_403;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_404> AgradCcdfLogBetaBinomial_fv_404;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_405> AgradCcdfLogBetaBinomial_fv_405;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_406> AgradCcdfLogBetaBinomial_fv_406;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_407> AgradCcdfLogBetaBinomial_fv_407;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_408> AgradCcdfLogBetaBinomial_fv_408;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_409> AgradCcdfLogBetaBinomial_fv_409;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_410> AgradCcdfLogBetaBinomial_fv_410;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_411> AgradCcdfLogBetaBinomial_fv_411;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_412> AgradCcdfLogBetaBinomial_fv_412;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_413> AgradCcdfLogBetaBinomial_fv_413;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_414> AgradCcdfLogBetaBinomial_fv_414;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_415> AgradCcdfLogBetaBinomial_fv_415;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_416> AgradCcdfLogBetaBinomial_fv_416;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_417> AgradCcdfLogBetaBinomial_fv_417;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_418> AgradCcdfLogBetaBinomial_fv_418;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_419> AgradCcdfLogBetaBinomial_fv_419;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_420> AgradCcdfLogBetaBinomial_fv_420;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_421> AgradCcdfLogBetaBinomial_fv_421;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_422> AgradCcdfLogBetaBinomial_fv_422;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_423> AgradCcdfLogBetaBinomial_fv_423;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_424> AgradCcdfLogBetaBinomial_fv_424;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_425> AgradCcdfLogBetaBinomial_fv_425;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_426> AgradCcdfLogBetaBinomial_fv_426;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_427> AgradCcdfLogBetaBinomial_fv_427;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_428> AgradCcdfLogBetaBinomial_fv_428;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_429> AgradCcdfLogBetaBinomial_fv_429;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_430> AgradCcdfLogBetaBinomial_fv_430;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_431> AgradCcdfLogBetaBinomial_fv_431;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_432> AgradCcdfLogBetaBinomial_fv_432;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_433> AgradCcdfLogBetaBinomial_fv_433;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_434> AgradCcdfLogBetaBinomial_fv_434;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_435> AgradCcdfLogBetaBinomial_fv_435;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_436> AgradCcdfLogBetaBinomial_fv_436;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_437> AgradCcdfLogBetaBinomial_fv_437;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_438> AgradCcdfLogBetaBinomial_fv_438;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_439> AgradCcdfLogBetaBinomial_fv_439;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_440> AgradCcdfLogBetaBinomial_fv_440;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_441> AgradCcdfLogBetaBinomial_fv_441;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_442> AgradCcdfLogBetaBinomial_fv_442;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_443> AgradCcdfLogBetaBinomial_fv_443;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_444> AgradCcdfLogBetaBinomial_fv_444;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_445> AgradCcdfLogBetaBinomial_fv_445;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_446> AgradCcdfLogBetaBinomial_fv_446;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_447> AgradCcdfLogBetaBinomial_fv_447;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_448> AgradCcdfLogBetaBinomial_fv_448;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_449> AgradCcdfLogBetaBinomial_fv_449;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_450> AgradCcdfLogBetaBinomial_fv_450;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_451> AgradCcdfLogBetaBinomial_fv_451;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_452> AgradCcdfLogBetaBinomial_fv_452;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_453> AgradCcdfLogBetaBinomial_fv_453;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_454> AgradCcdfLogBetaBinomial_fv_454;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_455> AgradCcdfLogBetaBinomial_fv_455;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_456> AgradCcdfLogBetaBinomial_fv_456;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_457> AgradCcdfLogBetaBinomial_fv_457;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_458> AgradCcdfLogBetaBinomial_fv_458;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_459> AgradCcdfLogBetaBinomial_fv_459;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_460> AgradCcdfLogBetaBinomial_fv_460;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_461> AgradCcdfLogBetaBinomial_fv_461;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_462> AgradCcdfLogBetaBinomial_fv_462;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_463> AgradCcdfLogBetaBinomial_fv_463;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_464> AgradCcdfLogBetaBinomial_fv_464;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_465> AgradCcdfLogBetaBinomial_fv_465;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_466> AgradCcdfLogBetaBinomial_fv_466;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_467> AgradCcdfLogBetaBinomial_fv_467;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_468> AgradCcdfLogBetaBinomial_fv_468;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_469> AgradCcdfLogBetaBinomial_fv_469;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_470> AgradCcdfLogBetaBinomial_fv_470;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_471> AgradCcdfLogBetaBinomial_fv_471;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_472> AgradCcdfLogBetaBinomial_fv_472;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_473> AgradCcdfLogBetaBinomial_fv_473;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_474> AgradCcdfLogBetaBinomial_fv_474;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_475> AgradCcdfLogBetaBinomial_fv_475;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_476> AgradCcdfLogBetaBinomial_fv_476;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_477> AgradCcdfLogBetaBinomial_fv_477;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_478> AgradCcdfLogBetaBinomial_fv_478;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_479> AgradCcdfLogBetaBinomial_fv_479;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_480> AgradCcdfLogBetaBinomial_fv_480;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_481> AgradCcdfLogBetaBinomial_fv_481;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_482> AgradCcdfLogBetaBinomial_fv_482;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_483> AgradCcdfLogBetaBinomial_fv_483;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_484> AgradCcdfLogBetaBinomial_fv_484;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_485> AgradCcdfLogBetaBinomial_fv_485;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_486> AgradCcdfLogBetaBinomial_fv_486;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_487> AgradCcdfLogBetaBinomial_fv_487;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_488> AgradCcdfLogBetaBinomial_fv_488;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_489> AgradCcdfLogBetaBinomial_fv_489;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_490> AgradCcdfLogBetaBinomial_fv_490;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_491> AgradCcdfLogBetaBinomial_fv_491;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_492> AgradCcdfLogBetaBinomial_fv_492;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_493> AgradCcdfLogBetaBinomial_fv_493;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_494> AgradCcdfLogBetaBinomial_fv_494;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_495> AgradCcdfLogBetaBinomial_fv_495;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_496> AgradCcdfLogBetaBinomial_fv_496;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_497> AgradCcdfLogBetaBinomial_fv_497;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_498> AgradCcdfLogBetaBinomial_fv_498;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_499> AgradCcdfLogBetaBinomial_fv_499;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_500> AgradCcdfLogBetaBinomial_fv_500;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_501> AgradCcdfLogBetaBinomial_fv_501;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_502> AgradCcdfLogBetaBinomial_fv_502;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_503> AgradCcdfLogBetaBinomial_fv_503;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_504> AgradCcdfLogBetaBinomial_fv_504;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_505> AgradCcdfLogBetaBinomial_fv_505;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_506> AgradCcdfLogBetaBinomial_fv_506;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_507> AgradCcdfLogBetaBinomial_fv_507;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_508> AgradCcdfLogBetaBinomial_fv_508;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_509> AgradCcdfLogBetaBinomial_fv_509;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_510> AgradCcdfLogBetaBinomial_fv_510;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_511> AgradCcdfLogBetaBinomial_fv_511;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_512> AgradCcdfLogBetaBinomial_fv_512;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_513> AgradCcdfLogBetaBinomial_fv_513;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_514> AgradCcdfLogBetaBinomial_fv_514;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_515> AgradCcdfLogBetaBinomial_fv_515;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_516> AgradCcdfLogBetaBinomial_fv_516;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_517> AgradCcdfLogBetaBinomial_fv_517;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_518> AgradCcdfLogBetaBinomial_fv_518;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_519> AgradCcdfLogBetaBinomial_fv_519;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_520> AgradCcdfLogBetaBinomial_fv_520;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_521> AgradCcdfLogBetaBinomial_fv_521;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_522> AgradCcdfLogBetaBinomial_fv_522;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_523> AgradCcdfLogBetaBinomial_fv_523;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_524> AgradCcdfLogBetaBinomial_fv_524;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_525> AgradCcdfLogBetaBinomial_fv_525;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_526> AgradCcdfLogBetaBinomial_fv_526;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_527> AgradCcdfLogBetaBinomial_fv_527;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_528> AgradCcdfLogBetaBinomial_fv_528;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_529> AgradCcdfLogBetaBinomial_fv_529;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_530> AgradCcdfLogBetaBinomial_fv_530;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_531> AgradCcdfLogBetaBinomial_fv_531;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_532> AgradCcdfLogBetaBinomial_fv_532;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_533> AgradCcdfLogBetaBinomial_fv_533;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_534> AgradCcdfLogBetaBinomial_fv_534;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_535> AgradCcdfLogBetaBinomial_fv_535;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_536> AgradCcdfLogBetaBinomial_fv_536;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_537> AgradCcdfLogBetaBinomial_fv_537;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_538> AgradCcdfLogBetaBinomial_fv_538;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_539> AgradCcdfLogBetaBinomial_fv_539;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_540> AgradCcdfLogBetaBinomial_fv_540;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_541> AgradCcdfLogBetaBinomial_fv_541;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_542> AgradCcdfLogBetaBinomial_fv_542;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_543> AgradCcdfLogBetaBinomial_fv_543;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_544> AgradCcdfLogBetaBinomial_fv_544;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_545> AgradCcdfLogBetaBinomial_fv_545;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_546> AgradCcdfLogBetaBinomial_fv_546;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_547> AgradCcdfLogBetaBinomial_fv_547;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_548> AgradCcdfLogBetaBinomial_fv_548;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_549> AgradCcdfLogBetaBinomial_fv_549;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_550> AgradCcdfLogBetaBinomial_fv_550;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_551> AgradCcdfLogBetaBinomial_fv_551;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_552> AgradCcdfLogBetaBinomial_fv_552;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_553> AgradCcdfLogBetaBinomial_fv_553;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_554> AgradCcdfLogBetaBinomial_fv_554;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_555> AgradCcdfLogBetaBinomial_fv_555;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_556> AgradCcdfLogBetaBinomial_fv_556;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_557> AgradCcdfLogBetaBinomial_fv_557;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_558> AgradCcdfLogBetaBinomial_fv_558;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_559> AgradCcdfLogBetaBinomial_fv_559;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_560> AgradCcdfLogBetaBinomial_fv_560;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_561> AgradCcdfLogBetaBinomial_fv_561;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_562> AgradCcdfLogBetaBinomial_fv_562;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_563> AgradCcdfLogBetaBinomial_fv_563;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_564> AgradCcdfLogBetaBinomial_fv_564;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_565> AgradCcdfLogBetaBinomial_fv_565;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_566> AgradCcdfLogBetaBinomial_fv_566;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_567> AgradCcdfLogBetaBinomial_fv_567;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_568> AgradCcdfLogBetaBinomial_fv_568;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_569> AgradCcdfLogBetaBinomial_fv_569;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_570> AgradCcdfLogBetaBinomial_fv_570;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_571> AgradCcdfLogBetaBinomial_fv_571;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_572> AgradCcdfLogBetaBinomial_fv_572;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_573> AgradCcdfLogBetaBinomial_fv_573;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_574> AgradCcdfLogBetaBinomial_fv_574;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_575> AgradCcdfLogBetaBinomial_fv_575;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_576> AgradCcdfLogBetaBinomial_fv_576;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_577> AgradCcdfLogBetaBinomial_fv_577;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_578> AgradCcdfLogBetaBinomial_fv_578;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_579> AgradCcdfLogBetaBinomial_fv_579;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_580> AgradCcdfLogBetaBinomial_fv_580;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_581> AgradCcdfLogBetaBinomial_fv_581;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_582> AgradCcdfLogBetaBinomial_fv_582;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_583> AgradCcdfLogBetaBinomial_fv_583;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_584> AgradCcdfLogBetaBinomial_fv_584;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_585> AgradCcdfLogBetaBinomial_fv_585;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_586> AgradCcdfLogBetaBinomial_fv_586;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_587> AgradCcdfLogBetaBinomial_fv_587;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_588> AgradCcdfLogBetaBinomial_fv_588;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_589> AgradCcdfLogBetaBinomial_fv_589;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_590> AgradCcdfLogBetaBinomial_fv_590;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_591> AgradCcdfLogBetaBinomial_fv_591;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_592> AgradCcdfLogBetaBinomial_fv_592;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_593> AgradCcdfLogBetaBinomial_fv_593;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_594> AgradCcdfLogBetaBinomial_fv_594;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_595> AgradCcdfLogBetaBinomial_fv_595;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_596> AgradCcdfLogBetaBinomial_fv_596;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_597> AgradCcdfLogBetaBinomial_fv_597;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_598> AgradCcdfLogBetaBinomial_fv_598;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_fv_599> AgradCcdfLogBetaBinomial_fv_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_400, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_401, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_402, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_403, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_404, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_405, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_406, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_407, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_408, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_409, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_410, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_411, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_412, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_413, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_414, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_415, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_416, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_417, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_418, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_419, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_420, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_421, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_422, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_423, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_424, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_425, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_426, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_427, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_428, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_429, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_430, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_431, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_432, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_433, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_434, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_435, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_436, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_437, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_438, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_439, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_440, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_441, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_442, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_443, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_444, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_445, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_446, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_447, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_448, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_449, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_450, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_451, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_452, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_453, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_454, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_455, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_456, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_457, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_458, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_459, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_460, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_461, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_462, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_463, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_464, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_465, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_466, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_467, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_468, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_469, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_470, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_471, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_472, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_473, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_474, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_475, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_476, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_477, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_478, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_479, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_480, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_481, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_482, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_483, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_484, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_485, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_486, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_487, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_488, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_489, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_490, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_491, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_492, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_493, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_494, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_495, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_496, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_497, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_498, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_499, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_499);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_500, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_501, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_502, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_503, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_504, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_505, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_506, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_507, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_508, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_509, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_510, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_511, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_512, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_513, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_514, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_515, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_516, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_517, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_518, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_519, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_520, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_521, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_522, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_523, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_524, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_525, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_526, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_527, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_528, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_529, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_530, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_531, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_532, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_533, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_534, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_535, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_536, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_537, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_538, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_539, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_540, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_541, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_542, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_543, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_544, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_545, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_546, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_547, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_548, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_549, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_550, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_551, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_552, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_553, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_554, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_555, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_556, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_557, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_558, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_559, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_560, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_561, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_562, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_563, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_564, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_565, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_566, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_567, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_568, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_569, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_570, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_571, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_572, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_573, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_574, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_575, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_576, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_577, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_578, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_579, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_580, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_581, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_582, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_583, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_584, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_585, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_586, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_587, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_588, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_589, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_590, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_591, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_592, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_593, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_594, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_595, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_596, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_597, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_598, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_fv_599, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_fv_599);

