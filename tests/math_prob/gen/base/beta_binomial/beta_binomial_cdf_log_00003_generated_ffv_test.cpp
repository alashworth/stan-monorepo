#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_600;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_601;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_602;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_603;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_604;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_605;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_606;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_607;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_608;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_609;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_610;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_611;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_612;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_613;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_614;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_615;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_616;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_617;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_618;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_619;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_620;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_621;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_622;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_623;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, fvar<fvar<var> >, empty, empty> type_ffv_624;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_625;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_626;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_627;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_628;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_629;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_630;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_631;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_632;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_633;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_634;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_635;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_636;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_637;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_638;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_639;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, double, empty, empty> type_ffv_640;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_641;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_642;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_643;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_644;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_645;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_646;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_647;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_648;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_649;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_650;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_651;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_652;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_653;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_654;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_655;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_656;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_657;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_658;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_659;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_660;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_661;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_662;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_663;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_664;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_665;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_666;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_667;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_668;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_669;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_670;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<int>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_671;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<var> >, empty, empty> type_ffv_672;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_673;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_674;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_675;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_676;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_677;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_678;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_679;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_680;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_681;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_682;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_683;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_684;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_685;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_686;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_687;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, double, empty, empty> type_ffv_688;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_689;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_690;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_691;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_692;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_693;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_694;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_695;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_696;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_697;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_698;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_699;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty> type_ffv_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty> type_ffv_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty> type_ffv_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty> type_ffv_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty> type_ffv_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty> type_ffv_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty> type_ffv_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty> type_ffv_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffv_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffv_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty> type_ffv_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffv_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffv_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffv_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffv_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty> type_ffv_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty> type_ffv_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty> type_ffv_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty> type_ffv_767;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_600> AgradCdfLogBetaBinomial_ffv_600;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_601> AgradCdfLogBetaBinomial_ffv_601;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_602> AgradCdfLogBetaBinomial_ffv_602;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_603> AgradCdfLogBetaBinomial_ffv_603;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_604> AgradCdfLogBetaBinomial_ffv_604;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_605> AgradCdfLogBetaBinomial_ffv_605;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_606> AgradCdfLogBetaBinomial_ffv_606;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_607> AgradCdfLogBetaBinomial_ffv_607;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_608> AgradCdfLogBetaBinomial_ffv_608;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_609> AgradCdfLogBetaBinomial_ffv_609;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_610> AgradCdfLogBetaBinomial_ffv_610;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_611> AgradCdfLogBetaBinomial_ffv_611;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_612> AgradCdfLogBetaBinomial_ffv_612;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_613> AgradCdfLogBetaBinomial_ffv_613;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_614> AgradCdfLogBetaBinomial_ffv_614;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_615> AgradCdfLogBetaBinomial_ffv_615;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_616> AgradCdfLogBetaBinomial_ffv_616;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_617> AgradCdfLogBetaBinomial_ffv_617;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_618> AgradCdfLogBetaBinomial_ffv_618;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_619> AgradCdfLogBetaBinomial_ffv_619;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_620> AgradCdfLogBetaBinomial_ffv_620;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_621> AgradCdfLogBetaBinomial_ffv_621;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_622> AgradCdfLogBetaBinomial_ffv_622;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_623> AgradCdfLogBetaBinomial_ffv_623;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_624> AgradCdfLogBetaBinomial_ffv_624;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_625> AgradCdfLogBetaBinomial_ffv_625;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_626> AgradCdfLogBetaBinomial_ffv_626;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_627> AgradCdfLogBetaBinomial_ffv_627;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_628> AgradCdfLogBetaBinomial_ffv_628;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_629> AgradCdfLogBetaBinomial_ffv_629;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_630> AgradCdfLogBetaBinomial_ffv_630;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_631> AgradCdfLogBetaBinomial_ffv_631;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_632> AgradCdfLogBetaBinomial_ffv_632;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_633> AgradCdfLogBetaBinomial_ffv_633;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_634> AgradCdfLogBetaBinomial_ffv_634;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_635> AgradCdfLogBetaBinomial_ffv_635;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_636> AgradCdfLogBetaBinomial_ffv_636;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_637> AgradCdfLogBetaBinomial_ffv_637;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_638> AgradCdfLogBetaBinomial_ffv_638;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_639> AgradCdfLogBetaBinomial_ffv_639;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_640> AgradCdfLogBetaBinomial_ffv_640;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_641> AgradCdfLogBetaBinomial_ffv_641;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_642> AgradCdfLogBetaBinomial_ffv_642;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_643> AgradCdfLogBetaBinomial_ffv_643;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_644> AgradCdfLogBetaBinomial_ffv_644;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_645> AgradCdfLogBetaBinomial_ffv_645;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_646> AgradCdfLogBetaBinomial_ffv_646;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_647> AgradCdfLogBetaBinomial_ffv_647;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_648> AgradCdfLogBetaBinomial_ffv_648;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_649> AgradCdfLogBetaBinomial_ffv_649;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_650> AgradCdfLogBetaBinomial_ffv_650;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_651> AgradCdfLogBetaBinomial_ffv_651;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_652> AgradCdfLogBetaBinomial_ffv_652;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_653> AgradCdfLogBetaBinomial_ffv_653;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_654> AgradCdfLogBetaBinomial_ffv_654;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_655> AgradCdfLogBetaBinomial_ffv_655;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_656> AgradCdfLogBetaBinomial_ffv_656;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_657> AgradCdfLogBetaBinomial_ffv_657;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_658> AgradCdfLogBetaBinomial_ffv_658;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_659> AgradCdfLogBetaBinomial_ffv_659;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_660> AgradCdfLogBetaBinomial_ffv_660;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_661> AgradCdfLogBetaBinomial_ffv_661;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_662> AgradCdfLogBetaBinomial_ffv_662;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_663> AgradCdfLogBetaBinomial_ffv_663;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_664> AgradCdfLogBetaBinomial_ffv_664;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_665> AgradCdfLogBetaBinomial_ffv_665;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_666> AgradCdfLogBetaBinomial_ffv_666;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_667> AgradCdfLogBetaBinomial_ffv_667;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_668> AgradCdfLogBetaBinomial_ffv_668;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_669> AgradCdfLogBetaBinomial_ffv_669;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_670> AgradCdfLogBetaBinomial_ffv_670;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_671> AgradCdfLogBetaBinomial_ffv_671;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_672> AgradCdfLogBetaBinomial_ffv_672;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_673> AgradCdfLogBetaBinomial_ffv_673;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_674> AgradCdfLogBetaBinomial_ffv_674;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_675> AgradCdfLogBetaBinomial_ffv_675;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_676> AgradCdfLogBetaBinomial_ffv_676;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_677> AgradCdfLogBetaBinomial_ffv_677;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_678> AgradCdfLogBetaBinomial_ffv_678;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_679> AgradCdfLogBetaBinomial_ffv_679;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_680> AgradCdfLogBetaBinomial_ffv_680;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_681> AgradCdfLogBetaBinomial_ffv_681;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_682> AgradCdfLogBetaBinomial_ffv_682;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_683> AgradCdfLogBetaBinomial_ffv_683;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_684> AgradCdfLogBetaBinomial_ffv_684;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_685> AgradCdfLogBetaBinomial_ffv_685;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_686> AgradCdfLogBetaBinomial_ffv_686;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_687> AgradCdfLogBetaBinomial_ffv_687;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_688> AgradCdfLogBetaBinomial_ffv_688;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_689> AgradCdfLogBetaBinomial_ffv_689;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_690> AgradCdfLogBetaBinomial_ffv_690;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_691> AgradCdfLogBetaBinomial_ffv_691;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_692> AgradCdfLogBetaBinomial_ffv_692;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_693> AgradCdfLogBetaBinomial_ffv_693;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_694> AgradCdfLogBetaBinomial_ffv_694;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_695> AgradCdfLogBetaBinomial_ffv_695;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_696> AgradCdfLogBetaBinomial_ffv_696;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_697> AgradCdfLogBetaBinomial_ffv_697;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_698> AgradCdfLogBetaBinomial_ffv_698;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_699> AgradCdfLogBetaBinomial_ffv_699;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_700> AgradCdfLogBetaBinomial_ffv_700;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_701> AgradCdfLogBetaBinomial_ffv_701;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_702> AgradCdfLogBetaBinomial_ffv_702;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_703> AgradCdfLogBetaBinomial_ffv_703;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_704> AgradCdfLogBetaBinomial_ffv_704;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_705> AgradCdfLogBetaBinomial_ffv_705;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_706> AgradCdfLogBetaBinomial_ffv_706;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_707> AgradCdfLogBetaBinomial_ffv_707;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_708> AgradCdfLogBetaBinomial_ffv_708;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_709> AgradCdfLogBetaBinomial_ffv_709;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_710> AgradCdfLogBetaBinomial_ffv_710;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_711> AgradCdfLogBetaBinomial_ffv_711;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_712> AgradCdfLogBetaBinomial_ffv_712;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_713> AgradCdfLogBetaBinomial_ffv_713;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_714> AgradCdfLogBetaBinomial_ffv_714;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_715> AgradCdfLogBetaBinomial_ffv_715;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_716> AgradCdfLogBetaBinomial_ffv_716;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_717> AgradCdfLogBetaBinomial_ffv_717;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_718> AgradCdfLogBetaBinomial_ffv_718;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_719> AgradCdfLogBetaBinomial_ffv_719;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_720> AgradCdfLogBetaBinomial_ffv_720;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_721> AgradCdfLogBetaBinomial_ffv_721;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_722> AgradCdfLogBetaBinomial_ffv_722;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_723> AgradCdfLogBetaBinomial_ffv_723;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_724> AgradCdfLogBetaBinomial_ffv_724;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_725> AgradCdfLogBetaBinomial_ffv_725;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_726> AgradCdfLogBetaBinomial_ffv_726;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_727> AgradCdfLogBetaBinomial_ffv_727;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_728> AgradCdfLogBetaBinomial_ffv_728;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_729> AgradCdfLogBetaBinomial_ffv_729;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_730> AgradCdfLogBetaBinomial_ffv_730;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_731> AgradCdfLogBetaBinomial_ffv_731;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_732> AgradCdfLogBetaBinomial_ffv_732;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_733> AgradCdfLogBetaBinomial_ffv_733;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_734> AgradCdfLogBetaBinomial_ffv_734;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_735> AgradCdfLogBetaBinomial_ffv_735;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_736> AgradCdfLogBetaBinomial_ffv_736;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_737> AgradCdfLogBetaBinomial_ffv_737;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_738> AgradCdfLogBetaBinomial_ffv_738;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_739> AgradCdfLogBetaBinomial_ffv_739;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_740> AgradCdfLogBetaBinomial_ffv_740;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_741> AgradCdfLogBetaBinomial_ffv_741;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_742> AgradCdfLogBetaBinomial_ffv_742;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_743> AgradCdfLogBetaBinomial_ffv_743;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_744> AgradCdfLogBetaBinomial_ffv_744;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_745> AgradCdfLogBetaBinomial_ffv_745;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_746> AgradCdfLogBetaBinomial_ffv_746;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_747> AgradCdfLogBetaBinomial_ffv_747;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_748> AgradCdfLogBetaBinomial_ffv_748;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_749> AgradCdfLogBetaBinomial_ffv_749;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_750> AgradCdfLogBetaBinomial_ffv_750;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_751> AgradCdfLogBetaBinomial_ffv_751;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_752> AgradCdfLogBetaBinomial_ffv_752;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_753> AgradCdfLogBetaBinomial_ffv_753;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_754> AgradCdfLogBetaBinomial_ffv_754;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_755> AgradCdfLogBetaBinomial_ffv_755;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_756> AgradCdfLogBetaBinomial_ffv_756;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_757> AgradCdfLogBetaBinomial_ffv_757;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_758> AgradCdfLogBetaBinomial_ffv_758;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_759> AgradCdfLogBetaBinomial_ffv_759;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_760> AgradCdfLogBetaBinomial_ffv_760;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_761> AgradCdfLogBetaBinomial_ffv_761;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_762> AgradCdfLogBetaBinomial_ffv_762;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_763> AgradCdfLogBetaBinomial_ffv_763;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_764> AgradCdfLogBetaBinomial_ffv_764;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_765> AgradCdfLogBetaBinomial_ffv_765;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_766> AgradCdfLogBetaBinomial_ffv_766;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_ffv_767> AgradCdfLogBetaBinomial_ffv_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_600, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_600);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_601, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_601);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_602, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_602);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_603, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_603);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_604, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_604);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_605, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_605);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_606, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_606);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_607, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_607);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_608, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_608);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_609, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_609);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_610, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_610);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_611, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_611);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_612, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_612);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_613, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_613);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_614, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_614);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_615, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_615);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_616, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_616);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_617, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_617);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_618, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_618);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_619, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_619);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_620, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_620);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_621, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_621);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_622, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_622);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_623, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_623);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_624, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_624);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_625, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_625);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_626, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_626);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_627, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_627);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_628, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_628);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_629, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_629);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_630, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_630);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_631, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_631);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_632, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_632);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_633, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_633);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_634, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_634);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_635, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_635);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_636, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_636);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_637, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_637);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_638, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_638);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_639, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_639);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_640, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_640);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_641, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_641);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_642, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_642);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_643, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_643);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_644, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_644);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_645, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_645);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_646, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_646);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_647, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_647);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_648, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_648);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_649, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_649);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_650, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_650);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_651, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_651);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_652, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_652);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_653, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_653);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_654, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_654);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_655, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_655);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_656, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_656);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_657, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_657);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_658, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_658);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_659, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_659);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_660, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_660);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_661, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_661);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_662, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_662);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_663, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_663);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_664, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_664);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_665, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_665);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_666, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_666);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_667, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_667);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_668, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_668);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_669, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_669);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_670, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_670);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_671, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_671);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_672, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_672);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_673, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_673);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_674, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_674);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_675, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_675);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_676, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_676);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_677, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_677);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_678, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_678);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_679, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_679);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_680, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_680);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_681, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_681);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_682, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_682);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_683, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_683);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_684, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_684);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_685, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_685);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_686, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_686);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_687, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_687);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_688, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_688);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_689, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_689);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_690, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_690);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_691, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_691);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_692, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_692);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_693, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_693);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_694, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_694);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_695, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_695);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_696, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_696);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_697, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_697);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_698, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_698);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_699, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_699);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_700, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_701, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_702, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_703, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_704, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_705, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_706, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_707, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_708, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_709, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_710, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_711, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_712, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_713, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_714, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_715, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_716, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_717, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_718, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_719, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_720, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_721, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_722, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_723, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_724, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_725, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_726, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_727, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_728, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_729, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_730, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_731, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_732, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_733, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_734, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_735, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_736, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_737, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_738, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_739, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_740, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_741, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_742, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_743, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_744, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_745, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_746, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_747, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_748, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_749, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_750, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_751, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_752, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_753, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_754, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_755, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_756, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_757, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_758, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_759, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_760, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_761, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_762, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_763, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_764, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_765, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_766, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_ffv_767, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_ffv_767);

