#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_700;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_701;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_702;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_703;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_704;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_705;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_706;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_707;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_708;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_709;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_710;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_711;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_712;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_713;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_714;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_715;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_716;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_717;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_718;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_719;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty> type_fd_720;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty> type_fd_721;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_722;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_723;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty> type_fd_724;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty> type_fd_725;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_726;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_727;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_728;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_729;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_730;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_731;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_732;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_733;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_734;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_735;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty> type_fd_736;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty> type_fd_737;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_738;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_739;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty> type_fd_740;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty> type_fd_741;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_742;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_743;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty> type_fd_744;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty> type_fd_745;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_746;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_747;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty> type_fd_748;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty> type_fd_749;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_750;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_751;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty> type_fd_752;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fd_753;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_754;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_755;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty> type_fd_756;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty> type_fd_757;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_758;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_759;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty> type_fd_760;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fd_761;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fd_762;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fd_763;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty> type_fd_764;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty> type_fd_765;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty> type_fd_766;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty> type_fd_767;

typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_700> AgradCdfLogBetaBinomial_fd_700;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_701> AgradCdfLogBetaBinomial_fd_701;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_702> AgradCdfLogBetaBinomial_fd_702;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_703> AgradCdfLogBetaBinomial_fd_703;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_704> AgradCdfLogBetaBinomial_fd_704;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_705> AgradCdfLogBetaBinomial_fd_705;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_706> AgradCdfLogBetaBinomial_fd_706;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_707> AgradCdfLogBetaBinomial_fd_707;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_708> AgradCdfLogBetaBinomial_fd_708;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_709> AgradCdfLogBetaBinomial_fd_709;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_710> AgradCdfLogBetaBinomial_fd_710;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_711> AgradCdfLogBetaBinomial_fd_711;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_712> AgradCdfLogBetaBinomial_fd_712;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_713> AgradCdfLogBetaBinomial_fd_713;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_714> AgradCdfLogBetaBinomial_fd_714;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_715> AgradCdfLogBetaBinomial_fd_715;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_716> AgradCdfLogBetaBinomial_fd_716;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_717> AgradCdfLogBetaBinomial_fd_717;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_718> AgradCdfLogBetaBinomial_fd_718;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_719> AgradCdfLogBetaBinomial_fd_719;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_720> AgradCdfLogBetaBinomial_fd_720;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_721> AgradCdfLogBetaBinomial_fd_721;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_722> AgradCdfLogBetaBinomial_fd_722;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_723> AgradCdfLogBetaBinomial_fd_723;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_724> AgradCdfLogBetaBinomial_fd_724;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_725> AgradCdfLogBetaBinomial_fd_725;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_726> AgradCdfLogBetaBinomial_fd_726;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_727> AgradCdfLogBetaBinomial_fd_727;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_728> AgradCdfLogBetaBinomial_fd_728;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_729> AgradCdfLogBetaBinomial_fd_729;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_730> AgradCdfLogBetaBinomial_fd_730;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_731> AgradCdfLogBetaBinomial_fd_731;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_732> AgradCdfLogBetaBinomial_fd_732;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_733> AgradCdfLogBetaBinomial_fd_733;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_734> AgradCdfLogBetaBinomial_fd_734;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_735> AgradCdfLogBetaBinomial_fd_735;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_736> AgradCdfLogBetaBinomial_fd_736;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_737> AgradCdfLogBetaBinomial_fd_737;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_738> AgradCdfLogBetaBinomial_fd_738;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_739> AgradCdfLogBetaBinomial_fd_739;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_740> AgradCdfLogBetaBinomial_fd_740;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_741> AgradCdfLogBetaBinomial_fd_741;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_742> AgradCdfLogBetaBinomial_fd_742;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_743> AgradCdfLogBetaBinomial_fd_743;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_744> AgradCdfLogBetaBinomial_fd_744;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_745> AgradCdfLogBetaBinomial_fd_745;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_746> AgradCdfLogBetaBinomial_fd_746;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_747> AgradCdfLogBetaBinomial_fd_747;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_748> AgradCdfLogBetaBinomial_fd_748;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_749> AgradCdfLogBetaBinomial_fd_749;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_750> AgradCdfLogBetaBinomial_fd_750;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_751> AgradCdfLogBetaBinomial_fd_751;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_752> AgradCdfLogBetaBinomial_fd_752;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_753> AgradCdfLogBetaBinomial_fd_753;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_754> AgradCdfLogBetaBinomial_fd_754;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_755> AgradCdfLogBetaBinomial_fd_755;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_756> AgradCdfLogBetaBinomial_fd_756;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_757> AgradCdfLogBetaBinomial_fd_757;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_758> AgradCdfLogBetaBinomial_fd_758;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_759> AgradCdfLogBetaBinomial_fd_759;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_760> AgradCdfLogBetaBinomial_fd_760;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_761> AgradCdfLogBetaBinomial_fd_761;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_762> AgradCdfLogBetaBinomial_fd_762;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_763> AgradCdfLogBetaBinomial_fd_763;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_764> AgradCdfLogBetaBinomial_fd_764;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_765> AgradCdfLogBetaBinomial_fd_765;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_766> AgradCdfLogBetaBinomial_fd_766;
typedef boost::mpl::vector<AgradCdfLogBetaBinomial, type_fd_767> AgradCdfLogBetaBinomial_fd_767;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_700, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_700);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_701, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_701);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_702, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_702);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_703, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_703);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_704, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_704);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_705, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_705);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_706, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_706);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_707, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_707);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_708, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_708);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_709, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_709);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_710, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_710);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_711, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_711);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_712, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_712);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_713, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_713);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_714, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_714);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_715, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_715);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_716, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_716);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_717, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_717);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_718, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_718);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_719, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_719);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_720, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_720);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_721, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_721);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_722, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_722);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_723, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_723);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_724, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_724);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_725, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_725);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_726, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_726);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_727, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_727);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_728, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_728);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_729, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_729);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_730, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_730);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_731, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_731);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_732, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_732);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_733, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_733);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_734, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_734);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_735, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_735);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_736, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_736);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_737, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_737);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_738, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_738);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_739, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_739);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_740, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_740);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_741, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_741);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_742, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_742);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_743, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_743);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_744, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_744);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_745, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_745);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_746, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_746);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_747, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_747);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_748, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_748);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_749, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_749);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_750, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_750);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_751, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_751);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_752, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_752);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_753, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_753);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_754, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_754);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_755, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_755);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_756, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_756);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_757, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_757);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_758, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_758);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_759, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_759);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_760, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_760);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_761, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_761);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_762, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_762);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_763, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_763);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_764, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_764);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_765, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_765);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_766, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_766);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogBetaBinomial_fd_767, AgradCdfLogTestFixture, AgradCdfLogBetaBinomial_fd_767);

