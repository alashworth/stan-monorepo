#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta_binomial/beta_binomial_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, double, empty, empty> type_fv_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, std::vector<double>, empty, empty> type_fv_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, fvar<var>, empty, empty> type_fv_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, double, empty, empty> type_fv_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<var>, empty, empty> type_fv_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<var>>, empty, empty> type_fv_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<var>, empty, empty> type_fv_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, double, empty, empty> type_fv_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, std::vector<double>, empty, empty> type_fv_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, fvar<var>, empty, empty> type_fv_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, double, empty, empty> type_fv_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<var>, empty, empty> type_fv_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<var>>, empty, empty> type_fv_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<var>, empty, empty> type_fv_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, double, empty, empty> type_fv_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<double>, empty, empty> type_fv_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_499;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, fvar<var>, empty, empty> type_fv_500;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_501;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_502;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_503;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, double, empty, empty> type_fv_504;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_505;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_506;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_507;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_508;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_509;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_510;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_511;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_512;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_513;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_514;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_515;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_516;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_517;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_518;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_519;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_520;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_521;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_522;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_523;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_524;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_525;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_526;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_527;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<var>, empty, empty> type_fv_528;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<var>>, empty, empty> type_fv_529;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_530;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_531;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<var>, empty, empty> type_fv_532;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_533;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_534;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_535;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_536;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_537;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_538;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_539;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_540;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_541;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_542;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_543;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, double, empty, empty> type_fv_544;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<double>, empty, empty> type_fv_545;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_546;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_547;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, fvar<var>, empty, empty> type_fv_548;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_549;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_550;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_551;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, double, empty, empty> type_fv_552;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<double>, empty, empty> type_fv_553;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_554;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_555;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, fvar<var>, empty, empty> type_fv_556;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty> type_fv_557;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_558;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_559;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty> type_fv_560;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_fv_561;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_562;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_563;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_564;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_565;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_566;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_567;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty> type_fv_568;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_fv_569;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_570;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_571;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_572;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_573;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_574;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_575;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, fvar<var>, empty, empty> type_fv_576;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, std::vector<fvar<var>>, empty, empty> type_fv_577;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_578;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_579;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, fvar<var>, empty, empty> type_fv_580;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, std::vector<fvar<var>>, empty, empty> type_fv_581;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_582;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_583;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty> type_fv_584;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty> type_fv_585;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_586;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_587;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty> type_fv_588;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty> type_fv_589;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_590;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_591;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, double, empty, empty> type_fv_592;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, std::vector<double>, empty, empty> type_fv_593;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_fv_594;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_fv_595;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, fvar<var>, empty, empty> type_fv_596;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, std::vector<fvar<var>>, empty, empty> type_fv_597;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty> type_fv_598;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, int, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty> type_fv_599;

typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_400> AgradCdfBetaBinomial_fv_400;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_401> AgradCdfBetaBinomial_fv_401;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_402> AgradCdfBetaBinomial_fv_402;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_403> AgradCdfBetaBinomial_fv_403;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_404> AgradCdfBetaBinomial_fv_404;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_405> AgradCdfBetaBinomial_fv_405;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_406> AgradCdfBetaBinomial_fv_406;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_407> AgradCdfBetaBinomial_fv_407;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_408> AgradCdfBetaBinomial_fv_408;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_409> AgradCdfBetaBinomial_fv_409;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_410> AgradCdfBetaBinomial_fv_410;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_411> AgradCdfBetaBinomial_fv_411;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_412> AgradCdfBetaBinomial_fv_412;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_413> AgradCdfBetaBinomial_fv_413;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_414> AgradCdfBetaBinomial_fv_414;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_415> AgradCdfBetaBinomial_fv_415;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_416> AgradCdfBetaBinomial_fv_416;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_417> AgradCdfBetaBinomial_fv_417;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_418> AgradCdfBetaBinomial_fv_418;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_419> AgradCdfBetaBinomial_fv_419;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_420> AgradCdfBetaBinomial_fv_420;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_421> AgradCdfBetaBinomial_fv_421;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_422> AgradCdfBetaBinomial_fv_422;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_423> AgradCdfBetaBinomial_fv_423;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_424> AgradCdfBetaBinomial_fv_424;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_425> AgradCdfBetaBinomial_fv_425;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_426> AgradCdfBetaBinomial_fv_426;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_427> AgradCdfBetaBinomial_fv_427;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_428> AgradCdfBetaBinomial_fv_428;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_429> AgradCdfBetaBinomial_fv_429;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_430> AgradCdfBetaBinomial_fv_430;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_431> AgradCdfBetaBinomial_fv_431;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_432> AgradCdfBetaBinomial_fv_432;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_433> AgradCdfBetaBinomial_fv_433;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_434> AgradCdfBetaBinomial_fv_434;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_435> AgradCdfBetaBinomial_fv_435;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_436> AgradCdfBetaBinomial_fv_436;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_437> AgradCdfBetaBinomial_fv_437;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_438> AgradCdfBetaBinomial_fv_438;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_439> AgradCdfBetaBinomial_fv_439;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_440> AgradCdfBetaBinomial_fv_440;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_441> AgradCdfBetaBinomial_fv_441;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_442> AgradCdfBetaBinomial_fv_442;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_443> AgradCdfBetaBinomial_fv_443;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_444> AgradCdfBetaBinomial_fv_444;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_445> AgradCdfBetaBinomial_fv_445;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_446> AgradCdfBetaBinomial_fv_446;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_447> AgradCdfBetaBinomial_fv_447;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_448> AgradCdfBetaBinomial_fv_448;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_449> AgradCdfBetaBinomial_fv_449;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_450> AgradCdfBetaBinomial_fv_450;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_451> AgradCdfBetaBinomial_fv_451;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_452> AgradCdfBetaBinomial_fv_452;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_453> AgradCdfBetaBinomial_fv_453;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_454> AgradCdfBetaBinomial_fv_454;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_455> AgradCdfBetaBinomial_fv_455;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_456> AgradCdfBetaBinomial_fv_456;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_457> AgradCdfBetaBinomial_fv_457;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_458> AgradCdfBetaBinomial_fv_458;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_459> AgradCdfBetaBinomial_fv_459;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_460> AgradCdfBetaBinomial_fv_460;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_461> AgradCdfBetaBinomial_fv_461;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_462> AgradCdfBetaBinomial_fv_462;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_463> AgradCdfBetaBinomial_fv_463;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_464> AgradCdfBetaBinomial_fv_464;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_465> AgradCdfBetaBinomial_fv_465;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_466> AgradCdfBetaBinomial_fv_466;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_467> AgradCdfBetaBinomial_fv_467;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_468> AgradCdfBetaBinomial_fv_468;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_469> AgradCdfBetaBinomial_fv_469;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_470> AgradCdfBetaBinomial_fv_470;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_471> AgradCdfBetaBinomial_fv_471;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_472> AgradCdfBetaBinomial_fv_472;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_473> AgradCdfBetaBinomial_fv_473;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_474> AgradCdfBetaBinomial_fv_474;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_475> AgradCdfBetaBinomial_fv_475;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_476> AgradCdfBetaBinomial_fv_476;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_477> AgradCdfBetaBinomial_fv_477;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_478> AgradCdfBetaBinomial_fv_478;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_479> AgradCdfBetaBinomial_fv_479;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_480> AgradCdfBetaBinomial_fv_480;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_481> AgradCdfBetaBinomial_fv_481;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_482> AgradCdfBetaBinomial_fv_482;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_483> AgradCdfBetaBinomial_fv_483;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_484> AgradCdfBetaBinomial_fv_484;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_485> AgradCdfBetaBinomial_fv_485;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_486> AgradCdfBetaBinomial_fv_486;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_487> AgradCdfBetaBinomial_fv_487;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_488> AgradCdfBetaBinomial_fv_488;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_489> AgradCdfBetaBinomial_fv_489;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_490> AgradCdfBetaBinomial_fv_490;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_491> AgradCdfBetaBinomial_fv_491;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_492> AgradCdfBetaBinomial_fv_492;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_493> AgradCdfBetaBinomial_fv_493;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_494> AgradCdfBetaBinomial_fv_494;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_495> AgradCdfBetaBinomial_fv_495;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_496> AgradCdfBetaBinomial_fv_496;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_497> AgradCdfBetaBinomial_fv_497;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_498> AgradCdfBetaBinomial_fv_498;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_499> AgradCdfBetaBinomial_fv_499;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_500> AgradCdfBetaBinomial_fv_500;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_501> AgradCdfBetaBinomial_fv_501;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_502> AgradCdfBetaBinomial_fv_502;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_503> AgradCdfBetaBinomial_fv_503;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_504> AgradCdfBetaBinomial_fv_504;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_505> AgradCdfBetaBinomial_fv_505;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_506> AgradCdfBetaBinomial_fv_506;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_507> AgradCdfBetaBinomial_fv_507;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_508> AgradCdfBetaBinomial_fv_508;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_509> AgradCdfBetaBinomial_fv_509;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_510> AgradCdfBetaBinomial_fv_510;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_511> AgradCdfBetaBinomial_fv_511;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_512> AgradCdfBetaBinomial_fv_512;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_513> AgradCdfBetaBinomial_fv_513;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_514> AgradCdfBetaBinomial_fv_514;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_515> AgradCdfBetaBinomial_fv_515;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_516> AgradCdfBetaBinomial_fv_516;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_517> AgradCdfBetaBinomial_fv_517;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_518> AgradCdfBetaBinomial_fv_518;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_519> AgradCdfBetaBinomial_fv_519;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_520> AgradCdfBetaBinomial_fv_520;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_521> AgradCdfBetaBinomial_fv_521;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_522> AgradCdfBetaBinomial_fv_522;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_523> AgradCdfBetaBinomial_fv_523;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_524> AgradCdfBetaBinomial_fv_524;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_525> AgradCdfBetaBinomial_fv_525;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_526> AgradCdfBetaBinomial_fv_526;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_527> AgradCdfBetaBinomial_fv_527;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_528> AgradCdfBetaBinomial_fv_528;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_529> AgradCdfBetaBinomial_fv_529;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_530> AgradCdfBetaBinomial_fv_530;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_531> AgradCdfBetaBinomial_fv_531;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_532> AgradCdfBetaBinomial_fv_532;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_533> AgradCdfBetaBinomial_fv_533;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_534> AgradCdfBetaBinomial_fv_534;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_535> AgradCdfBetaBinomial_fv_535;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_536> AgradCdfBetaBinomial_fv_536;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_537> AgradCdfBetaBinomial_fv_537;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_538> AgradCdfBetaBinomial_fv_538;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_539> AgradCdfBetaBinomial_fv_539;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_540> AgradCdfBetaBinomial_fv_540;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_541> AgradCdfBetaBinomial_fv_541;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_542> AgradCdfBetaBinomial_fv_542;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_543> AgradCdfBetaBinomial_fv_543;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_544> AgradCdfBetaBinomial_fv_544;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_545> AgradCdfBetaBinomial_fv_545;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_546> AgradCdfBetaBinomial_fv_546;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_547> AgradCdfBetaBinomial_fv_547;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_548> AgradCdfBetaBinomial_fv_548;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_549> AgradCdfBetaBinomial_fv_549;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_550> AgradCdfBetaBinomial_fv_550;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_551> AgradCdfBetaBinomial_fv_551;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_552> AgradCdfBetaBinomial_fv_552;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_553> AgradCdfBetaBinomial_fv_553;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_554> AgradCdfBetaBinomial_fv_554;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_555> AgradCdfBetaBinomial_fv_555;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_556> AgradCdfBetaBinomial_fv_556;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_557> AgradCdfBetaBinomial_fv_557;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_558> AgradCdfBetaBinomial_fv_558;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_559> AgradCdfBetaBinomial_fv_559;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_560> AgradCdfBetaBinomial_fv_560;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_561> AgradCdfBetaBinomial_fv_561;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_562> AgradCdfBetaBinomial_fv_562;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_563> AgradCdfBetaBinomial_fv_563;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_564> AgradCdfBetaBinomial_fv_564;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_565> AgradCdfBetaBinomial_fv_565;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_566> AgradCdfBetaBinomial_fv_566;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_567> AgradCdfBetaBinomial_fv_567;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_568> AgradCdfBetaBinomial_fv_568;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_569> AgradCdfBetaBinomial_fv_569;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_570> AgradCdfBetaBinomial_fv_570;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_571> AgradCdfBetaBinomial_fv_571;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_572> AgradCdfBetaBinomial_fv_572;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_573> AgradCdfBetaBinomial_fv_573;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_574> AgradCdfBetaBinomial_fv_574;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_575> AgradCdfBetaBinomial_fv_575;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_576> AgradCdfBetaBinomial_fv_576;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_577> AgradCdfBetaBinomial_fv_577;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_578> AgradCdfBetaBinomial_fv_578;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_579> AgradCdfBetaBinomial_fv_579;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_580> AgradCdfBetaBinomial_fv_580;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_581> AgradCdfBetaBinomial_fv_581;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_582> AgradCdfBetaBinomial_fv_582;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_583> AgradCdfBetaBinomial_fv_583;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_584> AgradCdfBetaBinomial_fv_584;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_585> AgradCdfBetaBinomial_fv_585;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_586> AgradCdfBetaBinomial_fv_586;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_587> AgradCdfBetaBinomial_fv_587;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_588> AgradCdfBetaBinomial_fv_588;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_589> AgradCdfBetaBinomial_fv_589;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_590> AgradCdfBetaBinomial_fv_590;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_591> AgradCdfBetaBinomial_fv_591;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_592> AgradCdfBetaBinomial_fv_592;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_593> AgradCdfBetaBinomial_fv_593;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_594> AgradCdfBetaBinomial_fv_594;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_595> AgradCdfBetaBinomial_fv_595;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_596> AgradCdfBetaBinomial_fv_596;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_597> AgradCdfBetaBinomial_fv_597;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_598> AgradCdfBetaBinomial_fv_598;
typedef boost::mpl::vector<AgradCdfBetaBinomial, type_fv_599> AgradCdfBetaBinomial_fv_599;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_400, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_401, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_402, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_403, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_404, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_405, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_406, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_407, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_408, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_409, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_410, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_411, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_412, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_413, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_414, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_415, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_416, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_417, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_418, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_419, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_420, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_421, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_422, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_423, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_424, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_425, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_426, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_427, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_428, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_429, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_430, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_431, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_432, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_433, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_434, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_435, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_436, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_437, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_438, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_439, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_440, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_441, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_442, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_443, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_444, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_445, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_446, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_447, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_448, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_449, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_450, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_451, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_452, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_453, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_454, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_455, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_456, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_457, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_458, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_459, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_460, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_461, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_462, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_463, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_464, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_465, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_466, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_467, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_468, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_469, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_470, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_471, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_472, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_473, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_474, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_475, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_476, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_477, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_478, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_479, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_480, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_481, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_482, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_483, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_484, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_485, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_486, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_487, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_488, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_489, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_490, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_491, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_492, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_493, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_494, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_495, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_496, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_497, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_498, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_499, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_499);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_500, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_500);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_501, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_501);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_502, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_502);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_503, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_503);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_504, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_504);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_505, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_505);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_506, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_506);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_507, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_507);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_508, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_508);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_509, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_509);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_510, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_510);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_511, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_511);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_512, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_512);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_513, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_513);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_514, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_514);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_515, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_515);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_516, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_516);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_517, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_517);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_518, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_518);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_519, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_519);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_520, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_520);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_521, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_521);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_522, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_522);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_523, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_523);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_524, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_524);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_525, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_525);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_526, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_526);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_527, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_527);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_528, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_528);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_529, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_529);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_530, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_530);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_531, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_531);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_532, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_532);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_533, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_533);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_534, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_534);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_535, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_535);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_536, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_536);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_537, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_537);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_538, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_538);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_539, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_539);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_540, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_540);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_541, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_541);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_542, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_542);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_543, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_543);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_544, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_544);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_545, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_545);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_546, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_546);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_547, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_547);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_548, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_548);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_549, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_549);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_550, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_550);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_551, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_551);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_552, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_552);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_553, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_553);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_554, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_554);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_555, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_555);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_556, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_556);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_557, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_557);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_558, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_558);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_559, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_559);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_560, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_560);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_561, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_561);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_562, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_562);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_563, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_563);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_564, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_564);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_565, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_565);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_566, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_566);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_567, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_567);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_568, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_568);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_569, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_569);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_570, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_570);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_571, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_571);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_572, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_572);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_573, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_573);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_574, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_574);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_575, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_575);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_576, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_576);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_577, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_577);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_578, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_578);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_579, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_579);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_580, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_580);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_581, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_581);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_582, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_582);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_583, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_583);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_584, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_584);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_585, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_585);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_586, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_586);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_587, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_587);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_588, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_588);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_589, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_589);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_590, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_590);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_591, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_591);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_592, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_592);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_593, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_593);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_594, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_594);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_595, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_595);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_596, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_596);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_597, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_597);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_598, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_598);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBetaBinomial_fv_599, AgradCdfTestFixture, AgradCdfBetaBinomial_fv_599);

