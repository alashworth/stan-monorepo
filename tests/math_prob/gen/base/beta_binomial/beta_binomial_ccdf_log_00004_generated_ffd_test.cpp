#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/beta_binomial/beta_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, double, empty, empty> type_ffd_400;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_401;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_402;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_403;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_404;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_405;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_406;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_407;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_408;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_409;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_410;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_411;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_412;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_413;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_414;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_415;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_416;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_417;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_418;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_419;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_420;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_421;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_422;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_423;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_424;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_425;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_426;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_427;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_428;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_429;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_430;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, int, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_431;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, fvar<fvar<double> >, empty, empty> type_ffd_432;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_433;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_434;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_435;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_436;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_437;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_438;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_439;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_440;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_441;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_442;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_443;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_444;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_445;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_446;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_447;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, double, empty, empty> type_ffd_448;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_449;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_450;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_451;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty> type_ffd_452;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_453;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_454;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_455;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, double, empty, empty> type_ffd_456;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty> type_ffd_457;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_458;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_459;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty> type_ffd_460;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_461;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_462;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_463;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty> type_ffd_464;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty> type_ffd_465;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_466;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_467;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_468;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_469;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_470;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_471;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty> type_ffd_472;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty> type_ffd_473;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_474;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_475;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_476;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_477;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_478;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<int>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_479;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, fvar<fvar<double> >, empty, empty> type_ffd_480;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_481;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_482;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_483;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<double> >, empty, empty> type_ffd_484;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_485;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_486;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_487;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty> type_ffd_488;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_489;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_490;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_491;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty> type_ffd_492;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty> type_ffd_493;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty> type_ffd_494;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty> type_ffd_495;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, double, empty, empty> type_ffd_496;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, std::vector<double>, empty, empty> type_ffd_497;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty> type_ffd_498;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty> type_ffd_499;

typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_400> AgradCcdfLogBetaBinomial_ffd_400;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_401> AgradCcdfLogBetaBinomial_ffd_401;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_402> AgradCcdfLogBetaBinomial_ffd_402;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_403> AgradCcdfLogBetaBinomial_ffd_403;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_404> AgradCcdfLogBetaBinomial_ffd_404;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_405> AgradCcdfLogBetaBinomial_ffd_405;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_406> AgradCcdfLogBetaBinomial_ffd_406;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_407> AgradCcdfLogBetaBinomial_ffd_407;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_408> AgradCcdfLogBetaBinomial_ffd_408;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_409> AgradCcdfLogBetaBinomial_ffd_409;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_410> AgradCcdfLogBetaBinomial_ffd_410;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_411> AgradCcdfLogBetaBinomial_ffd_411;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_412> AgradCcdfLogBetaBinomial_ffd_412;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_413> AgradCcdfLogBetaBinomial_ffd_413;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_414> AgradCcdfLogBetaBinomial_ffd_414;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_415> AgradCcdfLogBetaBinomial_ffd_415;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_416> AgradCcdfLogBetaBinomial_ffd_416;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_417> AgradCcdfLogBetaBinomial_ffd_417;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_418> AgradCcdfLogBetaBinomial_ffd_418;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_419> AgradCcdfLogBetaBinomial_ffd_419;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_420> AgradCcdfLogBetaBinomial_ffd_420;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_421> AgradCcdfLogBetaBinomial_ffd_421;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_422> AgradCcdfLogBetaBinomial_ffd_422;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_423> AgradCcdfLogBetaBinomial_ffd_423;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_424> AgradCcdfLogBetaBinomial_ffd_424;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_425> AgradCcdfLogBetaBinomial_ffd_425;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_426> AgradCcdfLogBetaBinomial_ffd_426;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_427> AgradCcdfLogBetaBinomial_ffd_427;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_428> AgradCcdfLogBetaBinomial_ffd_428;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_429> AgradCcdfLogBetaBinomial_ffd_429;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_430> AgradCcdfLogBetaBinomial_ffd_430;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_431> AgradCcdfLogBetaBinomial_ffd_431;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_432> AgradCcdfLogBetaBinomial_ffd_432;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_433> AgradCcdfLogBetaBinomial_ffd_433;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_434> AgradCcdfLogBetaBinomial_ffd_434;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_435> AgradCcdfLogBetaBinomial_ffd_435;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_436> AgradCcdfLogBetaBinomial_ffd_436;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_437> AgradCcdfLogBetaBinomial_ffd_437;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_438> AgradCcdfLogBetaBinomial_ffd_438;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_439> AgradCcdfLogBetaBinomial_ffd_439;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_440> AgradCcdfLogBetaBinomial_ffd_440;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_441> AgradCcdfLogBetaBinomial_ffd_441;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_442> AgradCcdfLogBetaBinomial_ffd_442;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_443> AgradCcdfLogBetaBinomial_ffd_443;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_444> AgradCcdfLogBetaBinomial_ffd_444;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_445> AgradCcdfLogBetaBinomial_ffd_445;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_446> AgradCcdfLogBetaBinomial_ffd_446;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_447> AgradCcdfLogBetaBinomial_ffd_447;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_448> AgradCcdfLogBetaBinomial_ffd_448;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_449> AgradCcdfLogBetaBinomial_ffd_449;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_450> AgradCcdfLogBetaBinomial_ffd_450;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_451> AgradCcdfLogBetaBinomial_ffd_451;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_452> AgradCcdfLogBetaBinomial_ffd_452;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_453> AgradCcdfLogBetaBinomial_ffd_453;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_454> AgradCcdfLogBetaBinomial_ffd_454;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_455> AgradCcdfLogBetaBinomial_ffd_455;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_456> AgradCcdfLogBetaBinomial_ffd_456;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_457> AgradCcdfLogBetaBinomial_ffd_457;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_458> AgradCcdfLogBetaBinomial_ffd_458;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_459> AgradCcdfLogBetaBinomial_ffd_459;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_460> AgradCcdfLogBetaBinomial_ffd_460;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_461> AgradCcdfLogBetaBinomial_ffd_461;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_462> AgradCcdfLogBetaBinomial_ffd_462;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_463> AgradCcdfLogBetaBinomial_ffd_463;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_464> AgradCcdfLogBetaBinomial_ffd_464;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_465> AgradCcdfLogBetaBinomial_ffd_465;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_466> AgradCcdfLogBetaBinomial_ffd_466;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_467> AgradCcdfLogBetaBinomial_ffd_467;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_468> AgradCcdfLogBetaBinomial_ffd_468;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_469> AgradCcdfLogBetaBinomial_ffd_469;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_470> AgradCcdfLogBetaBinomial_ffd_470;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_471> AgradCcdfLogBetaBinomial_ffd_471;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_472> AgradCcdfLogBetaBinomial_ffd_472;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_473> AgradCcdfLogBetaBinomial_ffd_473;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_474> AgradCcdfLogBetaBinomial_ffd_474;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_475> AgradCcdfLogBetaBinomial_ffd_475;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_476> AgradCcdfLogBetaBinomial_ffd_476;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_477> AgradCcdfLogBetaBinomial_ffd_477;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_478> AgradCcdfLogBetaBinomial_ffd_478;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_479> AgradCcdfLogBetaBinomial_ffd_479;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_480> AgradCcdfLogBetaBinomial_ffd_480;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_481> AgradCcdfLogBetaBinomial_ffd_481;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_482> AgradCcdfLogBetaBinomial_ffd_482;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_483> AgradCcdfLogBetaBinomial_ffd_483;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_484> AgradCcdfLogBetaBinomial_ffd_484;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_485> AgradCcdfLogBetaBinomial_ffd_485;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_486> AgradCcdfLogBetaBinomial_ffd_486;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_487> AgradCcdfLogBetaBinomial_ffd_487;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_488> AgradCcdfLogBetaBinomial_ffd_488;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_489> AgradCcdfLogBetaBinomial_ffd_489;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_490> AgradCcdfLogBetaBinomial_ffd_490;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_491> AgradCcdfLogBetaBinomial_ffd_491;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_492> AgradCcdfLogBetaBinomial_ffd_492;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_493> AgradCcdfLogBetaBinomial_ffd_493;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_494> AgradCcdfLogBetaBinomial_ffd_494;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_495> AgradCcdfLogBetaBinomial_ffd_495;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_496> AgradCcdfLogBetaBinomial_ffd_496;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_497> AgradCcdfLogBetaBinomial_ffd_497;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_498> AgradCcdfLogBetaBinomial_ffd_498;
typedef boost::mpl::vector<AgradCcdfLogBetaBinomial, type_ffd_499> AgradCcdfLogBetaBinomial_ffd_499;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_400, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_401, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_402, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_403, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_404, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_405, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_406, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_407, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_408, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_409, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_410, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_411, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_412, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_413, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_414, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_415, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_416, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_417, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_418, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_419, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_420, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_421, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_422, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_423, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_424, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_425, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_426, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_427, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_428, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_429, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_430, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_431, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_432, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_433, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_434, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_435, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_436, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_437, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_438, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_439, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_440, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_441, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_442, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_443, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_444, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_445, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_446, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_447, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_447);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_448, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_448);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_449, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_449);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_450, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_450);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_451, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_451);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_452, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_452);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_453, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_453);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_454, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_454);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_455, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_455);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_456, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_456);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_457, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_457);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_458, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_458);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_459, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_459);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_460, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_460);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_461, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_461);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_462, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_462);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_463, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_463);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_464, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_464);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_465, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_465);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_466, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_466);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_467, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_467);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_468, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_468);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_469, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_469);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_470, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_470);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_471, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_471);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_472, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_472);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_473, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_473);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_474, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_474);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_475, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_475);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_476, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_476);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_477, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_477);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_478, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_478);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_479, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_479);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_480, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_480);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_481, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_481);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_482, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_482);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_483, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_483);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_484, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_484);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_485, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_485);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_486, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_486);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_487, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_487);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_488, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_488);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_489, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_489);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_490, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_490);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_491, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_491);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_492, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_492);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_493, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_493);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_494, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_494);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_495, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_495);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_496, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_496);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_497, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_497);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_498, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_498);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogBetaBinomial_ffd_499, AgradCcdfLogTestFixture, AgradCcdfLogBetaBinomial_ffd_499);

