#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/double_exponential/double_exponential_cdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fd_400;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fd_401;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_402;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_403;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_404;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_405;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_406;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_407;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fd_408;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fd_409;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_410;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_411;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_412;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_413;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_414;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_415;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, double, empty, empty, empty> type_fd_416;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, std::vector<double>, empty, empty, empty> type_fd_417;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_418;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_419;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, fvar<double>, empty, empty, empty> type_fd_420;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, std::vector<fvar<double>>, empty, empty, empty> type_fd_421;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_422;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_423;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, double, empty, empty, empty> type_fd_424;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<double>, empty, empty, empty> type_fd_425;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_426;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_427;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, fvar<double>, empty, empty, empty> type_fd_428;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty, empty> type_fd_429;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_430;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_431;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fd_432;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fd_433;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_434;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_435;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_436;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_437;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_438;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_439;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fd_440;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fd_441;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_442;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_443;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_444;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_445;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_446;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_447;

typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_400> AgradCdfLogDoubleExponential_fd_400;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_401> AgradCdfLogDoubleExponential_fd_401;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_402> AgradCdfLogDoubleExponential_fd_402;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_403> AgradCdfLogDoubleExponential_fd_403;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_404> AgradCdfLogDoubleExponential_fd_404;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_405> AgradCdfLogDoubleExponential_fd_405;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_406> AgradCdfLogDoubleExponential_fd_406;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_407> AgradCdfLogDoubleExponential_fd_407;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_408> AgradCdfLogDoubleExponential_fd_408;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_409> AgradCdfLogDoubleExponential_fd_409;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_410> AgradCdfLogDoubleExponential_fd_410;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_411> AgradCdfLogDoubleExponential_fd_411;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_412> AgradCdfLogDoubleExponential_fd_412;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_413> AgradCdfLogDoubleExponential_fd_413;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_414> AgradCdfLogDoubleExponential_fd_414;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_415> AgradCdfLogDoubleExponential_fd_415;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_416> AgradCdfLogDoubleExponential_fd_416;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_417> AgradCdfLogDoubleExponential_fd_417;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_418> AgradCdfLogDoubleExponential_fd_418;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_419> AgradCdfLogDoubleExponential_fd_419;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_420> AgradCdfLogDoubleExponential_fd_420;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_421> AgradCdfLogDoubleExponential_fd_421;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_422> AgradCdfLogDoubleExponential_fd_422;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_423> AgradCdfLogDoubleExponential_fd_423;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_424> AgradCdfLogDoubleExponential_fd_424;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_425> AgradCdfLogDoubleExponential_fd_425;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_426> AgradCdfLogDoubleExponential_fd_426;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_427> AgradCdfLogDoubleExponential_fd_427;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_428> AgradCdfLogDoubleExponential_fd_428;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_429> AgradCdfLogDoubleExponential_fd_429;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_430> AgradCdfLogDoubleExponential_fd_430;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_431> AgradCdfLogDoubleExponential_fd_431;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_432> AgradCdfLogDoubleExponential_fd_432;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_433> AgradCdfLogDoubleExponential_fd_433;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_434> AgradCdfLogDoubleExponential_fd_434;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_435> AgradCdfLogDoubleExponential_fd_435;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_436> AgradCdfLogDoubleExponential_fd_436;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_437> AgradCdfLogDoubleExponential_fd_437;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_438> AgradCdfLogDoubleExponential_fd_438;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_439> AgradCdfLogDoubleExponential_fd_439;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_440> AgradCdfLogDoubleExponential_fd_440;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_441> AgradCdfLogDoubleExponential_fd_441;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_442> AgradCdfLogDoubleExponential_fd_442;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_443> AgradCdfLogDoubleExponential_fd_443;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_444> AgradCdfLogDoubleExponential_fd_444;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_445> AgradCdfLogDoubleExponential_fd_445;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_446> AgradCdfLogDoubleExponential_fd_446;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_447> AgradCdfLogDoubleExponential_fd_447;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_400, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_401, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_402, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_403, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_404, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_405, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_406, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_407, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_408, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_409, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_410, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_411, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_412, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_413, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_414, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_415, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_416, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_417, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_418, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_419, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_420, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_421, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_422, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_423, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_424, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_425, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_426, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_427, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_428, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_429, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_430, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_431, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_432, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_433, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_434, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_435, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_436, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_437, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_438, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_439, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_440, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_441, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_442, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_443, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_444, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_445, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_446, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_447, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_447);

