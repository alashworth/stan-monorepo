#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/double_exponential/double_exponential_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty, empty> type_ffd_400;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_ffd_401;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_402;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_403;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_404;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_405;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_406;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_407;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty, empty> type_ffd_408;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_ffd_409;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_410;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_411;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_412;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_413;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_414;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_415;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, double, empty, empty, empty> type_ffd_416;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<double>, empty, empty, empty> type_ffd_417;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_418;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_419;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, fvar<fvar<double> >, empty, empty, empty> type_ffd_420;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_421;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_422;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_423;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, double, empty, empty, empty> type_ffd_424;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<double>, empty, empty, empty> type_ffd_425;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_426;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_427;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, fvar<fvar<double> >, empty, empty, empty> type_ffd_428;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_429;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_430;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_431;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, double, empty, empty, empty> type_ffd_432;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_ffd_433;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_434;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_435;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, fvar<fvar<double> >, empty, empty, empty> type_ffd_436;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_437;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_438;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_439;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, double, empty, empty, empty> type_ffd_440;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_ffd_441;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_442;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_443;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, fvar<fvar<double> >, empty, empty, empty> type_ffd_444;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<double> >>, empty, empty, empty> type_ffd_445;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffd_446;
typedef boost::mpl::vector<Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<double> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffd_447;

typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_400> AgradCdfDoubleExponential_ffd_400;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_401> AgradCdfDoubleExponential_ffd_401;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_402> AgradCdfDoubleExponential_ffd_402;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_403> AgradCdfDoubleExponential_ffd_403;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_404> AgradCdfDoubleExponential_ffd_404;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_405> AgradCdfDoubleExponential_ffd_405;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_406> AgradCdfDoubleExponential_ffd_406;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_407> AgradCdfDoubleExponential_ffd_407;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_408> AgradCdfDoubleExponential_ffd_408;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_409> AgradCdfDoubleExponential_ffd_409;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_410> AgradCdfDoubleExponential_ffd_410;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_411> AgradCdfDoubleExponential_ffd_411;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_412> AgradCdfDoubleExponential_ffd_412;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_413> AgradCdfDoubleExponential_ffd_413;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_414> AgradCdfDoubleExponential_ffd_414;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_415> AgradCdfDoubleExponential_ffd_415;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_416> AgradCdfDoubleExponential_ffd_416;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_417> AgradCdfDoubleExponential_ffd_417;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_418> AgradCdfDoubleExponential_ffd_418;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_419> AgradCdfDoubleExponential_ffd_419;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_420> AgradCdfDoubleExponential_ffd_420;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_421> AgradCdfDoubleExponential_ffd_421;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_422> AgradCdfDoubleExponential_ffd_422;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_423> AgradCdfDoubleExponential_ffd_423;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_424> AgradCdfDoubleExponential_ffd_424;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_425> AgradCdfDoubleExponential_ffd_425;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_426> AgradCdfDoubleExponential_ffd_426;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_427> AgradCdfDoubleExponential_ffd_427;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_428> AgradCdfDoubleExponential_ffd_428;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_429> AgradCdfDoubleExponential_ffd_429;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_430> AgradCdfDoubleExponential_ffd_430;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_431> AgradCdfDoubleExponential_ffd_431;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_432> AgradCdfDoubleExponential_ffd_432;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_433> AgradCdfDoubleExponential_ffd_433;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_434> AgradCdfDoubleExponential_ffd_434;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_435> AgradCdfDoubleExponential_ffd_435;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_436> AgradCdfDoubleExponential_ffd_436;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_437> AgradCdfDoubleExponential_ffd_437;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_438> AgradCdfDoubleExponential_ffd_438;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_439> AgradCdfDoubleExponential_ffd_439;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_440> AgradCdfDoubleExponential_ffd_440;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_441> AgradCdfDoubleExponential_ffd_441;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_442> AgradCdfDoubleExponential_ffd_442;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_443> AgradCdfDoubleExponential_ffd_443;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_444> AgradCdfDoubleExponential_ffd_444;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_445> AgradCdfDoubleExponential_ffd_445;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_446> AgradCdfDoubleExponential_ffd_446;
typedef boost::mpl::vector<AgradCdfDoubleExponential, type_ffd_447> AgradCdfDoubleExponential_ffd_447;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_400, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_401, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_402, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_403, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_404, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_405, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_406, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_407, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_408, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_409, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_410, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_411, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_412, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_413, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_414, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_415, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_416, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_417, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_418, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_419, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_420, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_421, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_422, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_423, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_424, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_425, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_426, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_427, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_428, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_429, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_430, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_431, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_432, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_433, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_434, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_435, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_436, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_437, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_438, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_439, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_440, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_441, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_442, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_443, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_444, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_445, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_446, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfDoubleExponential_ffd_447, AgradCdfTestFixture, AgradCdfDoubleExponential_ffd_447);

