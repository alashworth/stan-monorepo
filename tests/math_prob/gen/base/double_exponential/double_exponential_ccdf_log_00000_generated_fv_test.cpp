#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <double_exponential/double_exponential_ccdf_log_test.hpp>

typedef boost::mpl::vector<double, double, fvar<var>, empty, empty, empty> type_fv_0;
typedef boost::mpl::vector<double, double, std::vector<fvar<var>>, empty, empty, empty> type_fv_1;
typedef boost::mpl::vector<double, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_2;
typedef boost::mpl::vector<double, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_3;
typedef boost::mpl::vector<double, std::vector<double>, fvar<var>, empty, empty, empty> type_fv_4;
typedef boost::mpl::vector<double, std::vector<double>, std::vector<fvar<var>>, empty, empty, empty> type_fv_5;
typedef boost::mpl::vector<double, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_6;
typedef boost::mpl::vector<double, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_7;
typedef boost::mpl::vector<double, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_8;
typedef boost::mpl::vector<double, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_9;
typedef boost::mpl::vector<double, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_10;
typedef boost::mpl::vector<double, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_11;
typedef boost::mpl::vector<double, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_12;
typedef boost::mpl::vector<double, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_13;
typedef boost::mpl::vector<double, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_14;
typedef boost::mpl::vector<double, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_15;
typedef boost::mpl::vector<double, fvar<var>, double, empty, empty, empty> type_fv_16;
typedef boost::mpl::vector<double, fvar<var>, std::vector<double>, empty, empty, empty> type_fv_17;
typedef boost::mpl::vector<double, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_18;
typedef boost::mpl::vector<double, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_19;
typedef boost::mpl::vector<double, fvar<var>, fvar<var>, empty, empty, empty> type_fv_20;
typedef boost::mpl::vector<double, fvar<var>, std::vector<fvar<var>>, empty, empty, empty> type_fv_21;
typedef boost::mpl::vector<double, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_22;
typedef boost::mpl::vector<double, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_23;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, double, empty, empty, empty> type_fv_24;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, std::vector<double>, empty, empty, empty> type_fv_25;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_26;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_27;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, fvar<var>, empty, empty, empty> type_fv_28;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty, empty> type_fv_29;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_30;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_31;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fv_32;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fv_33;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_34;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_35;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_36;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_37;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_38;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_39;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fv_40;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fv_41;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_42;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_43;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_44;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_45;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_46;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_47;
typedef boost::mpl::vector<std::vector<double>, double, fvar<var>, empty, empty, empty> type_fv_48;
typedef boost::mpl::vector<std::vector<double>, double, std::vector<fvar<var>>, empty, empty, empty> type_fv_49;
typedef boost::mpl::vector<std::vector<double>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_50;
typedef boost::mpl::vector<std::vector<double>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_51;
typedef boost::mpl::vector<std::vector<double>, std::vector<double>, fvar<var>, empty, empty, empty> type_fv_52;
typedef boost::mpl::vector<std::vector<double>, std::vector<double>, std::vector<fvar<var>>, empty, empty, empty> type_fv_53;
typedef boost::mpl::vector<std::vector<double>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_54;
typedef boost::mpl::vector<std::vector<double>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_55;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_56;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_57;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_58;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_59;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_60;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_61;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_62;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_63;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, double, empty, empty, empty> type_fv_64;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, std::vector<double>, empty, empty, empty> type_fv_65;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_66;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_67;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, fvar<var>, empty, empty, empty> type_fv_68;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, std::vector<fvar<var>>, empty, empty, empty> type_fv_69;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_70;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_71;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, double, empty, empty, empty> type_fv_72;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, std::vector<double>, empty, empty, empty> type_fv_73;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_74;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_75;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, fvar<var>, empty, empty, empty> type_fv_76;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty, empty> type_fv_77;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_78;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_79;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fv_80;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fv_81;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_82;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_83;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_84;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_85;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_86;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_87;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fv_88;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fv_89;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_90;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_91;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_92;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_93;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_94;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_95;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, double, fvar<var>, empty, empty, empty> type_fv_96;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, double, std::vector<fvar<var>>, empty, empty, empty> type_fv_97;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_98;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_99;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, fvar<var>, empty, empty, empty> type_fv_100;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<var>>, empty, empty, empty> type_fv_101;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_102;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_103;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_104;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_105;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_106;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_107;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_108;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_109;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_110;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_111;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, double, empty, empty, empty> type_fv_112;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, std::vector<double>, empty, empty, empty> type_fv_113;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_114;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_115;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, fvar<var>, empty, empty, empty> type_fv_116;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, std::vector<fvar<var>>, empty, empty, empty> type_fv_117;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_118;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_119;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, double, empty, empty, empty> type_fv_120;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<double>, empty, empty, empty> type_fv_121;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_122;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_123;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, fvar<var>, empty, empty, empty> type_fv_124;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty, empty> type_fv_125;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_126;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_127;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fv_128;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fv_129;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_130;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_131;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_132;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_133;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_134;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_135;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fv_136;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fv_137;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_138;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_139;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_140;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_141;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_142;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_143;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, double, fvar<var>, empty, empty, empty> type_fv_144;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, double, std::vector<fvar<var>>, empty, empty, empty> type_fv_145;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_146;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_147;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, fvar<var>, empty, empty, empty> type_fv_148;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<var>>, empty, empty, empty> type_fv_149;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_150;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_151;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_152;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_153;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_154;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_155;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_156;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_157;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_158;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_159;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, double, empty, empty, empty> type_fv_160;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, std::vector<double>, empty, empty, empty> type_fv_161;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_162;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_163;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, fvar<var>, empty, empty, empty> type_fv_164;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, std::vector<fvar<var>>, empty, empty, empty> type_fv_165;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_166;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_167;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, double, empty, empty, empty> type_fv_168;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<double>, empty, empty, empty> type_fv_169;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_170;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_171;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, fvar<var>, empty, empty, empty> type_fv_172;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty, empty> type_fv_173;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_174;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_175;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fv_176;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fv_177;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_178;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_179;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_180;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_181;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_182;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_183;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fv_184;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fv_185;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_186;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_187;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_188;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_189;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_190;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_191;
typedef boost::mpl::vector<fvar<var>, double, double, empty, empty, empty> type_fv_192;
typedef boost::mpl::vector<fvar<var>, double, std::vector<double>, empty, empty, empty> type_fv_193;
typedef boost::mpl::vector<fvar<var>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_194;
typedef boost::mpl::vector<fvar<var>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_195;
typedef boost::mpl::vector<fvar<var>, double, fvar<var>, empty, empty, empty> type_fv_196;
typedef boost::mpl::vector<fvar<var>, double, std::vector<fvar<var>>, empty, empty, empty> type_fv_197;
typedef boost::mpl::vector<fvar<var>, double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_198;
typedef boost::mpl::vector<fvar<var>, double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_199;

typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_0> AgradCcdfLogDoubleExponential_fv_0;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_1> AgradCcdfLogDoubleExponential_fv_1;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_2> AgradCcdfLogDoubleExponential_fv_2;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_3> AgradCcdfLogDoubleExponential_fv_3;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_4> AgradCcdfLogDoubleExponential_fv_4;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_5> AgradCcdfLogDoubleExponential_fv_5;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_6> AgradCcdfLogDoubleExponential_fv_6;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_7> AgradCcdfLogDoubleExponential_fv_7;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_8> AgradCcdfLogDoubleExponential_fv_8;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_9> AgradCcdfLogDoubleExponential_fv_9;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_10> AgradCcdfLogDoubleExponential_fv_10;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_11> AgradCcdfLogDoubleExponential_fv_11;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_12> AgradCcdfLogDoubleExponential_fv_12;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_13> AgradCcdfLogDoubleExponential_fv_13;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_14> AgradCcdfLogDoubleExponential_fv_14;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_15> AgradCcdfLogDoubleExponential_fv_15;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_16> AgradCcdfLogDoubleExponential_fv_16;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_17> AgradCcdfLogDoubleExponential_fv_17;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_18> AgradCcdfLogDoubleExponential_fv_18;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_19> AgradCcdfLogDoubleExponential_fv_19;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_20> AgradCcdfLogDoubleExponential_fv_20;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_21> AgradCcdfLogDoubleExponential_fv_21;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_22> AgradCcdfLogDoubleExponential_fv_22;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_23> AgradCcdfLogDoubleExponential_fv_23;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_24> AgradCcdfLogDoubleExponential_fv_24;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_25> AgradCcdfLogDoubleExponential_fv_25;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_26> AgradCcdfLogDoubleExponential_fv_26;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_27> AgradCcdfLogDoubleExponential_fv_27;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_28> AgradCcdfLogDoubleExponential_fv_28;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_29> AgradCcdfLogDoubleExponential_fv_29;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_30> AgradCcdfLogDoubleExponential_fv_30;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_31> AgradCcdfLogDoubleExponential_fv_31;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_32> AgradCcdfLogDoubleExponential_fv_32;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_33> AgradCcdfLogDoubleExponential_fv_33;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_34> AgradCcdfLogDoubleExponential_fv_34;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_35> AgradCcdfLogDoubleExponential_fv_35;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_36> AgradCcdfLogDoubleExponential_fv_36;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_37> AgradCcdfLogDoubleExponential_fv_37;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_38> AgradCcdfLogDoubleExponential_fv_38;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_39> AgradCcdfLogDoubleExponential_fv_39;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_40> AgradCcdfLogDoubleExponential_fv_40;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_41> AgradCcdfLogDoubleExponential_fv_41;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_42> AgradCcdfLogDoubleExponential_fv_42;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_43> AgradCcdfLogDoubleExponential_fv_43;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_44> AgradCcdfLogDoubleExponential_fv_44;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_45> AgradCcdfLogDoubleExponential_fv_45;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_46> AgradCcdfLogDoubleExponential_fv_46;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_47> AgradCcdfLogDoubleExponential_fv_47;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_48> AgradCcdfLogDoubleExponential_fv_48;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_49> AgradCcdfLogDoubleExponential_fv_49;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_50> AgradCcdfLogDoubleExponential_fv_50;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_51> AgradCcdfLogDoubleExponential_fv_51;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_52> AgradCcdfLogDoubleExponential_fv_52;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_53> AgradCcdfLogDoubleExponential_fv_53;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_54> AgradCcdfLogDoubleExponential_fv_54;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_55> AgradCcdfLogDoubleExponential_fv_55;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_56> AgradCcdfLogDoubleExponential_fv_56;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_57> AgradCcdfLogDoubleExponential_fv_57;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_58> AgradCcdfLogDoubleExponential_fv_58;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_59> AgradCcdfLogDoubleExponential_fv_59;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_60> AgradCcdfLogDoubleExponential_fv_60;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_61> AgradCcdfLogDoubleExponential_fv_61;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_62> AgradCcdfLogDoubleExponential_fv_62;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_63> AgradCcdfLogDoubleExponential_fv_63;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_64> AgradCcdfLogDoubleExponential_fv_64;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_65> AgradCcdfLogDoubleExponential_fv_65;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_66> AgradCcdfLogDoubleExponential_fv_66;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_67> AgradCcdfLogDoubleExponential_fv_67;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_68> AgradCcdfLogDoubleExponential_fv_68;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_69> AgradCcdfLogDoubleExponential_fv_69;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_70> AgradCcdfLogDoubleExponential_fv_70;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_71> AgradCcdfLogDoubleExponential_fv_71;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_72> AgradCcdfLogDoubleExponential_fv_72;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_73> AgradCcdfLogDoubleExponential_fv_73;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_74> AgradCcdfLogDoubleExponential_fv_74;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_75> AgradCcdfLogDoubleExponential_fv_75;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_76> AgradCcdfLogDoubleExponential_fv_76;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_77> AgradCcdfLogDoubleExponential_fv_77;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_78> AgradCcdfLogDoubleExponential_fv_78;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_79> AgradCcdfLogDoubleExponential_fv_79;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_80> AgradCcdfLogDoubleExponential_fv_80;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_81> AgradCcdfLogDoubleExponential_fv_81;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_82> AgradCcdfLogDoubleExponential_fv_82;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_83> AgradCcdfLogDoubleExponential_fv_83;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_84> AgradCcdfLogDoubleExponential_fv_84;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_85> AgradCcdfLogDoubleExponential_fv_85;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_86> AgradCcdfLogDoubleExponential_fv_86;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_87> AgradCcdfLogDoubleExponential_fv_87;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_88> AgradCcdfLogDoubleExponential_fv_88;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_89> AgradCcdfLogDoubleExponential_fv_89;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_90> AgradCcdfLogDoubleExponential_fv_90;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_91> AgradCcdfLogDoubleExponential_fv_91;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_92> AgradCcdfLogDoubleExponential_fv_92;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_93> AgradCcdfLogDoubleExponential_fv_93;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_94> AgradCcdfLogDoubleExponential_fv_94;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_95> AgradCcdfLogDoubleExponential_fv_95;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_96> AgradCcdfLogDoubleExponential_fv_96;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_97> AgradCcdfLogDoubleExponential_fv_97;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_98> AgradCcdfLogDoubleExponential_fv_98;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_99> AgradCcdfLogDoubleExponential_fv_99;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_100> AgradCcdfLogDoubleExponential_fv_100;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_101> AgradCcdfLogDoubleExponential_fv_101;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_102> AgradCcdfLogDoubleExponential_fv_102;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_103> AgradCcdfLogDoubleExponential_fv_103;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_104> AgradCcdfLogDoubleExponential_fv_104;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_105> AgradCcdfLogDoubleExponential_fv_105;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_106> AgradCcdfLogDoubleExponential_fv_106;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_107> AgradCcdfLogDoubleExponential_fv_107;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_108> AgradCcdfLogDoubleExponential_fv_108;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_109> AgradCcdfLogDoubleExponential_fv_109;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_110> AgradCcdfLogDoubleExponential_fv_110;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_111> AgradCcdfLogDoubleExponential_fv_111;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_112> AgradCcdfLogDoubleExponential_fv_112;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_113> AgradCcdfLogDoubleExponential_fv_113;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_114> AgradCcdfLogDoubleExponential_fv_114;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_115> AgradCcdfLogDoubleExponential_fv_115;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_116> AgradCcdfLogDoubleExponential_fv_116;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_117> AgradCcdfLogDoubleExponential_fv_117;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_118> AgradCcdfLogDoubleExponential_fv_118;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_119> AgradCcdfLogDoubleExponential_fv_119;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_120> AgradCcdfLogDoubleExponential_fv_120;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_121> AgradCcdfLogDoubleExponential_fv_121;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_122> AgradCcdfLogDoubleExponential_fv_122;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_123> AgradCcdfLogDoubleExponential_fv_123;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_124> AgradCcdfLogDoubleExponential_fv_124;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_125> AgradCcdfLogDoubleExponential_fv_125;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_126> AgradCcdfLogDoubleExponential_fv_126;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_127> AgradCcdfLogDoubleExponential_fv_127;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_128> AgradCcdfLogDoubleExponential_fv_128;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_129> AgradCcdfLogDoubleExponential_fv_129;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_130> AgradCcdfLogDoubleExponential_fv_130;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_131> AgradCcdfLogDoubleExponential_fv_131;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_132> AgradCcdfLogDoubleExponential_fv_132;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_133> AgradCcdfLogDoubleExponential_fv_133;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_134> AgradCcdfLogDoubleExponential_fv_134;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_135> AgradCcdfLogDoubleExponential_fv_135;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_136> AgradCcdfLogDoubleExponential_fv_136;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_137> AgradCcdfLogDoubleExponential_fv_137;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_138> AgradCcdfLogDoubleExponential_fv_138;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_139> AgradCcdfLogDoubleExponential_fv_139;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_140> AgradCcdfLogDoubleExponential_fv_140;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_141> AgradCcdfLogDoubleExponential_fv_141;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_142> AgradCcdfLogDoubleExponential_fv_142;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_143> AgradCcdfLogDoubleExponential_fv_143;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_144> AgradCcdfLogDoubleExponential_fv_144;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_145> AgradCcdfLogDoubleExponential_fv_145;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_146> AgradCcdfLogDoubleExponential_fv_146;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_147> AgradCcdfLogDoubleExponential_fv_147;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_148> AgradCcdfLogDoubleExponential_fv_148;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_149> AgradCcdfLogDoubleExponential_fv_149;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_150> AgradCcdfLogDoubleExponential_fv_150;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_151> AgradCcdfLogDoubleExponential_fv_151;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_152> AgradCcdfLogDoubleExponential_fv_152;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_153> AgradCcdfLogDoubleExponential_fv_153;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_154> AgradCcdfLogDoubleExponential_fv_154;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_155> AgradCcdfLogDoubleExponential_fv_155;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_156> AgradCcdfLogDoubleExponential_fv_156;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_157> AgradCcdfLogDoubleExponential_fv_157;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_158> AgradCcdfLogDoubleExponential_fv_158;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_159> AgradCcdfLogDoubleExponential_fv_159;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_160> AgradCcdfLogDoubleExponential_fv_160;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_161> AgradCcdfLogDoubleExponential_fv_161;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_162> AgradCcdfLogDoubleExponential_fv_162;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_163> AgradCcdfLogDoubleExponential_fv_163;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_164> AgradCcdfLogDoubleExponential_fv_164;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_165> AgradCcdfLogDoubleExponential_fv_165;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_166> AgradCcdfLogDoubleExponential_fv_166;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_167> AgradCcdfLogDoubleExponential_fv_167;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_168> AgradCcdfLogDoubleExponential_fv_168;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_169> AgradCcdfLogDoubleExponential_fv_169;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_170> AgradCcdfLogDoubleExponential_fv_170;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_171> AgradCcdfLogDoubleExponential_fv_171;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_172> AgradCcdfLogDoubleExponential_fv_172;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_173> AgradCcdfLogDoubleExponential_fv_173;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_174> AgradCcdfLogDoubleExponential_fv_174;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_175> AgradCcdfLogDoubleExponential_fv_175;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_176> AgradCcdfLogDoubleExponential_fv_176;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_177> AgradCcdfLogDoubleExponential_fv_177;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_178> AgradCcdfLogDoubleExponential_fv_178;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_179> AgradCcdfLogDoubleExponential_fv_179;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_180> AgradCcdfLogDoubleExponential_fv_180;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_181> AgradCcdfLogDoubleExponential_fv_181;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_182> AgradCcdfLogDoubleExponential_fv_182;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_183> AgradCcdfLogDoubleExponential_fv_183;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_184> AgradCcdfLogDoubleExponential_fv_184;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_185> AgradCcdfLogDoubleExponential_fv_185;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_186> AgradCcdfLogDoubleExponential_fv_186;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_187> AgradCcdfLogDoubleExponential_fv_187;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_188> AgradCcdfLogDoubleExponential_fv_188;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_189> AgradCcdfLogDoubleExponential_fv_189;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_190> AgradCcdfLogDoubleExponential_fv_190;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_191> AgradCcdfLogDoubleExponential_fv_191;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_192> AgradCcdfLogDoubleExponential_fv_192;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_193> AgradCcdfLogDoubleExponential_fv_193;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_194> AgradCcdfLogDoubleExponential_fv_194;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_195> AgradCcdfLogDoubleExponential_fv_195;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_196> AgradCcdfLogDoubleExponential_fv_196;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_197> AgradCcdfLogDoubleExponential_fv_197;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_198> AgradCcdfLogDoubleExponential_fv_198;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fv_199> AgradCcdfLogDoubleExponential_fv_199;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_0, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_1, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_2, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_3, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_4, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_5, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_6, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_7, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_8, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_9, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_10, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_11, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_12, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_13, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_14, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_15, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_16, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_17, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_18, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_19, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_20, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_21, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_22, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_23, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_24, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_25, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_26, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_27, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_28, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_29, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_30, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_31, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_32, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_33, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_34, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_35, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_36, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_37, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_38, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_39, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_40, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_41, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_42, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_43, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_44, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_45, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_46, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_47, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_47);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_48, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_48);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_49, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_49);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_50, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_50);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_51, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_51);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_52, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_52);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_53, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_53);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_54, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_54);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_55, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_55);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_56, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_56);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_57, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_57);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_58, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_58);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_59, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_59);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_60, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_60);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_61, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_61);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_62, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_62);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_63, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_63);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_64, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_64);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_65, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_65);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_66, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_66);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_67, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_67);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_68, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_68);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_69, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_69);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_70, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_70);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_71, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_71);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_72, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_72);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_73, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_73);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_74, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_74);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_75, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_75);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_76, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_76);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_77, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_77);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_78, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_78);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_79, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_79);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_80, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_80);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_81, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_81);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_82, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_82);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_83, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_83);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_84, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_84);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_85, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_85);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_86, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_86);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_87, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_87);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_88, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_88);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_89, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_89);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_90, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_90);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_91, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_91);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_92, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_92);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_93, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_93);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_94, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_94);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_95, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_95);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_96, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_96);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_97, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_97);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_98, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_98);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_99, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_99);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_100, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_100);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_101, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_101);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_102, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_102);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_103, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_103);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_104, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_104);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_105, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_105);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_106, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_106);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_107, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_107);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_108, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_108);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_109, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_109);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_110, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_110);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_111, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_111);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_112, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_112);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_113, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_113);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_114, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_114);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_115, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_115);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_116, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_116);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_117, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_117);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_118, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_118);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_119, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_119);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_120, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_120);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_121, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_121);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_122, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_122);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_123, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_123);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_124, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_124);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_125, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_125);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_126, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_126);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_127, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_127);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_128, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_128);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_129, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_129);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_130, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_130);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_131, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_131);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_132, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_132);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_133, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_133);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_134, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_134);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_135, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_135);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_136, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_136);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_137, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_137);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_138, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_138);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_139, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_139);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_140, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_140);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_141, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_141);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_142, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_142);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_143, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_143);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_144, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_144);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_145, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_145);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_146, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_146);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_147, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_147);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_148, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_148);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_149, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_149);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_150, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_150);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_151, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_151);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_152, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_152);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_153, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_153);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_154, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_154);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_155, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_155);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_156, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_156);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_157, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_157);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_158, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_158);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_159, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_159);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_160, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_160);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_161, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_161);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_162, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_162);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_163, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_163);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_164, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_164);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_165, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_165);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_166, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_166);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_167, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_167);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_168, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_168);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_169, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_169);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_170, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_170);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_171, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_171);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_172, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_172);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_173, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_173);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_174, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_174);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_175, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_175);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_176, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_176);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_177, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_177);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_178, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_178);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_179, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_179);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_180, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_180);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_181, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_181);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_182, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_182);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_183, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_183);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_184, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_184);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_185, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_185);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_186, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_186);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_187, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_187);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_188, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_188);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_189, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_189);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_190, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_190);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_191, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_191);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_192, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_192);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_193, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_193);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_194, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_194);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_195, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_195);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_196, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_196);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_197, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_197);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_198, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_198);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fv_199, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fv_199);

