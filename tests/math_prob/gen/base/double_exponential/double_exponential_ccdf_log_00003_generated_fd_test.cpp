#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/double_exponential/double_exponential_ccdf_log_test.hpp>

typedef boost::mpl::vector<std::vector<fvar<double>>, std::vector<fvar<double>>, fvar<double>, empty, empty, empty> type_fd_300;
typedef boost::mpl::vector<std::vector<fvar<double>>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty, empty> type_fd_301;
typedef boost::mpl::vector<std::vector<fvar<double>>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_302;
typedef boost::mpl::vector<std::vector<fvar<double>>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_303;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fd_304;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fd_305;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_306;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_307;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_308;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_309;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_310;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_311;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fd_312;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fd_313;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_314;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_315;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_316;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_317;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_318;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_319;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, double, empty, empty, empty> type_fd_320;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, std::vector<double>, empty, empty, empty> type_fd_321;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_322;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_323;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, fvar<double>, empty, empty, empty> type_fd_324;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, std::vector<fvar<double>>, empty, empty, empty> type_fd_325;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_326;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_327;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, double, empty, empty, empty> type_fd_328;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, std::vector<double>, empty, empty, empty> type_fd_329;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_330;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_331;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, fvar<double>, empty, empty, empty> type_fd_332;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<double>>, empty, empty, empty> type_fd_333;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_334;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_335;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fd_336;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fd_337;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_338;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_339;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_340;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_341;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_342;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_343;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fd_344;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fd_345;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_346;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_347;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_348;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_349;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_350;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_351;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, double, empty, empty, empty> type_fd_352;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, std::vector<double>, empty, empty, empty> type_fd_353;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_354;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_355;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, fvar<double>, empty, empty, empty> type_fd_356;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, std::vector<fvar<double>>, empty, empty, empty> type_fd_357;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_358;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_359;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, double, empty, empty, empty> type_fd_360;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<double>, empty, empty, empty> type_fd_361;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_362;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_363;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty, empty> type_fd_364;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty, empty> type_fd_365;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_366;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_367;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fd_368;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fd_369;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_370;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_371;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_372;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_373;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_374;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_375;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fd_376;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fd_377;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_378;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_379;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_380;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_381;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_382;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_383;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, double, empty, empty, empty> type_fd_384;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, std::vector<double>, empty, empty, empty> type_fd_385;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_386;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_387;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty, empty> type_fd_388;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty, empty> type_fd_389;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_390;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_391;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, double, empty, empty, empty> type_fd_392;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, std::vector<double>, empty, empty, empty> type_fd_393;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_394;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_395;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty, empty> type_fd_396;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty, empty> type_fd_397;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_398;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_399;

typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_300> AgradCcdfLogDoubleExponential_fd_300;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_301> AgradCcdfLogDoubleExponential_fd_301;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_302> AgradCcdfLogDoubleExponential_fd_302;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_303> AgradCcdfLogDoubleExponential_fd_303;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_304> AgradCcdfLogDoubleExponential_fd_304;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_305> AgradCcdfLogDoubleExponential_fd_305;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_306> AgradCcdfLogDoubleExponential_fd_306;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_307> AgradCcdfLogDoubleExponential_fd_307;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_308> AgradCcdfLogDoubleExponential_fd_308;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_309> AgradCcdfLogDoubleExponential_fd_309;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_310> AgradCcdfLogDoubleExponential_fd_310;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_311> AgradCcdfLogDoubleExponential_fd_311;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_312> AgradCcdfLogDoubleExponential_fd_312;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_313> AgradCcdfLogDoubleExponential_fd_313;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_314> AgradCcdfLogDoubleExponential_fd_314;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_315> AgradCcdfLogDoubleExponential_fd_315;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_316> AgradCcdfLogDoubleExponential_fd_316;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_317> AgradCcdfLogDoubleExponential_fd_317;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_318> AgradCcdfLogDoubleExponential_fd_318;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_319> AgradCcdfLogDoubleExponential_fd_319;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_320> AgradCcdfLogDoubleExponential_fd_320;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_321> AgradCcdfLogDoubleExponential_fd_321;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_322> AgradCcdfLogDoubleExponential_fd_322;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_323> AgradCcdfLogDoubleExponential_fd_323;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_324> AgradCcdfLogDoubleExponential_fd_324;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_325> AgradCcdfLogDoubleExponential_fd_325;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_326> AgradCcdfLogDoubleExponential_fd_326;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_327> AgradCcdfLogDoubleExponential_fd_327;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_328> AgradCcdfLogDoubleExponential_fd_328;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_329> AgradCcdfLogDoubleExponential_fd_329;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_330> AgradCcdfLogDoubleExponential_fd_330;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_331> AgradCcdfLogDoubleExponential_fd_331;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_332> AgradCcdfLogDoubleExponential_fd_332;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_333> AgradCcdfLogDoubleExponential_fd_333;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_334> AgradCcdfLogDoubleExponential_fd_334;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_335> AgradCcdfLogDoubleExponential_fd_335;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_336> AgradCcdfLogDoubleExponential_fd_336;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_337> AgradCcdfLogDoubleExponential_fd_337;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_338> AgradCcdfLogDoubleExponential_fd_338;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_339> AgradCcdfLogDoubleExponential_fd_339;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_340> AgradCcdfLogDoubleExponential_fd_340;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_341> AgradCcdfLogDoubleExponential_fd_341;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_342> AgradCcdfLogDoubleExponential_fd_342;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_343> AgradCcdfLogDoubleExponential_fd_343;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_344> AgradCcdfLogDoubleExponential_fd_344;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_345> AgradCcdfLogDoubleExponential_fd_345;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_346> AgradCcdfLogDoubleExponential_fd_346;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_347> AgradCcdfLogDoubleExponential_fd_347;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_348> AgradCcdfLogDoubleExponential_fd_348;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_349> AgradCcdfLogDoubleExponential_fd_349;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_350> AgradCcdfLogDoubleExponential_fd_350;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_351> AgradCcdfLogDoubleExponential_fd_351;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_352> AgradCcdfLogDoubleExponential_fd_352;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_353> AgradCcdfLogDoubleExponential_fd_353;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_354> AgradCcdfLogDoubleExponential_fd_354;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_355> AgradCcdfLogDoubleExponential_fd_355;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_356> AgradCcdfLogDoubleExponential_fd_356;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_357> AgradCcdfLogDoubleExponential_fd_357;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_358> AgradCcdfLogDoubleExponential_fd_358;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_359> AgradCcdfLogDoubleExponential_fd_359;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_360> AgradCcdfLogDoubleExponential_fd_360;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_361> AgradCcdfLogDoubleExponential_fd_361;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_362> AgradCcdfLogDoubleExponential_fd_362;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_363> AgradCcdfLogDoubleExponential_fd_363;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_364> AgradCcdfLogDoubleExponential_fd_364;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_365> AgradCcdfLogDoubleExponential_fd_365;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_366> AgradCcdfLogDoubleExponential_fd_366;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_367> AgradCcdfLogDoubleExponential_fd_367;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_368> AgradCcdfLogDoubleExponential_fd_368;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_369> AgradCcdfLogDoubleExponential_fd_369;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_370> AgradCcdfLogDoubleExponential_fd_370;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_371> AgradCcdfLogDoubleExponential_fd_371;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_372> AgradCcdfLogDoubleExponential_fd_372;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_373> AgradCcdfLogDoubleExponential_fd_373;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_374> AgradCcdfLogDoubleExponential_fd_374;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_375> AgradCcdfLogDoubleExponential_fd_375;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_376> AgradCcdfLogDoubleExponential_fd_376;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_377> AgradCcdfLogDoubleExponential_fd_377;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_378> AgradCcdfLogDoubleExponential_fd_378;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_379> AgradCcdfLogDoubleExponential_fd_379;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_380> AgradCcdfLogDoubleExponential_fd_380;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_381> AgradCcdfLogDoubleExponential_fd_381;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_382> AgradCcdfLogDoubleExponential_fd_382;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_383> AgradCcdfLogDoubleExponential_fd_383;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_384> AgradCcdfLogDoubleExponential_fd_384;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_385> AgradCcdfLogDoubleExponential_fd_385;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_386> AgradCcdfLogDoubleExponential_fd_386;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_387> AgradCcdfLogDoubleExponential_fd_387;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_388> AgradCcdfLogDoubleExponential_fd_388;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_389> AgradCcdfLogDoubleExponential_fd_389;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_390> AgradCcdfLogDoubleExponential_fd_390;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_391> AgradCcdfLogDoubleExponential_fd_391;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_392> AgradCcdfLogDoubleExponential_fd_392;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_393> AgradCcdfLogDoubleExponential_fd_393;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_394> AgradCcdfLogDoubleExponential_fd_394;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_395> AgradCcdfLogDoubleExponential_fd_395;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_396> AgradCcdfLogDoubleExponential_fd_396;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_397> AgradCcdfLogDoubleExponential_fd_397;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_398> AgradCcdfLogDoubleExponential_fd_398;
typedef boost::mpl::vector<AgradCcdfLogDoubleExponential, type_fd_399> AgradCcdfLogDoubleExponential_fd_399;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_300, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_300);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_301, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_301);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_302, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_302);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_303, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_303);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_304, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_304);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_305, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_305);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_306, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_306);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_307, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_307);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_308, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_308);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_309, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_309);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_310, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_310);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_311, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_311);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_312, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_312);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_313, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_313);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_314, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_314);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_315, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_315);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_316, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_316);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_317, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_317);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_318, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_318);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_319, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_319);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_320, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_320);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_321, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_321);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_322, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_322);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_323, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_323);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_324, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_324);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_325, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_325);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_326, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_326);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_327, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_327);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_328, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_328);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_329, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_329);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_330, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_330);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_331, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_331);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_332, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_332);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_333, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_333);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_334, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_334);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_335, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_335);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_336, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_336);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_337, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_337);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_338, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_338);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_339, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_339);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_340, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_340);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_341, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_341);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_342, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_342);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_343, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_343);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_344, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_344);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_345, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_345);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_346, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_346);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_347, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_347);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_348, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_348);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_349, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_349);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_350, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_350);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_351, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_351);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_352, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_352);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_353, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_353);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_354, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_354);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_355, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_355);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_356, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_356);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_357, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_357);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_358, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_358);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_359, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_359);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_360, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_360);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_361, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_361);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_362, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_362);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_363, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_363);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_364, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_364);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_365, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_365);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_366, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_366);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_367, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_367);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_368, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_368);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_369, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_369);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_370, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_370);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_371, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_371);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_372, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_372);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_373, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_373);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_374, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_374);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_375, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_375);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_376, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_376);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_377, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_377);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_378, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_378);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_379, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_379);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_380, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_380);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_381, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_381);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_382, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_382);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_383, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_383);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_384, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_384);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_385, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_385);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_386, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_386);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_387, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_387);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_388, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_388);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_389, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_389);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_390, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_390);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_391, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_391);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_392, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_392);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_393, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_393);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_394, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_394);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_395, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_395);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_396, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_396);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_397, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_397);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_398, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_398);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogDoubleExponential_fd_399, AgradCcdfLogTestFixture, AgradCcdfLogDoubleExponential_fd_399);

