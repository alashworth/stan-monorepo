#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/double_exponential/double_exponential_cdf_log_test.hpp>

typedef boost::mpl::vector<std::vector<fvar<double>>, std::vector<fvar<double>>, fvar<double>, empty, empty, empty> type_fd_300;
typedef boost::mpl::vector<std::vector<fvar<double>>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty, empty> type_fd_301;
typedef boost::mpl::vector<std::vector<fvar<double>>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_302;
typedef boost::mpl::vector<std::vector<fvar<double>>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_303;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fd_304;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fd_305;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_306;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_307;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_308;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_309;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_310;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_311;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fd_312;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fd_313;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_314;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_315;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_316;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_317;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_318;
typedef boost::mpl::vector<std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_319;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, double, empty, empty, empty> type_fd_320;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, std::vector<double>, empty, empty, empty> type_fd_321;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_322;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_323;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, fvar<double>, empty, empty, empty> type_fd_324;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, std::vector<fvar<double>>, empty, empty, empty> type_fd_325;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_326;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_327;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, double, empty, empty, empty> type_fd_328;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, std::vector<double>, empty, empty, empty> type_fd_329;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_330;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_331;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, fvar<double>, empty, empty, empty> type_fd_332;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<double>>, empty, empty, empty> type_fd_333;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_334;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_335;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fd_336;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fd_337;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_338;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_339;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_340;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_341;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_342;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_343;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fd_344;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fd_345;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_346;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_347;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_348;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_349;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_350;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_351;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, double, empty, empty, empty> type_fd_352;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, std::vector<double>, empty, empty, empty> type_fd_353;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_354;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_355;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, fvar<double>, empty, empty, empty> type_fd_356;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, std::vector<fvar<double>>, empty, empty, empty> type_fd_357;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_358;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_359;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, double, empty, empty, empty> type_fd_360;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<double>, empty, empty, empty> type_fd_361;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_362;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_363;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, fvar<double>, empty, empty, empty> type_fd_364;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, std::vector<fvar<double>>, empty, empty, empty> type_fd_365;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_366;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_367;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fd_368;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fd_369;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_370;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_371;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, fvar<double>, empty, empty, empty> type_fd_372;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, std::vector<fvar<double>>, empty, empty, empty> type_fd_373;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_374;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_375;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fd_376;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fd_377;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_378;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_379;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, fvar<double>, empty, empty, empty> type_fd_380;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<fvar<double>>, empty, empty, empty> type_fd_381;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_382;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_383;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, double, empty, empty, empty> type_fd_384;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, std::vector<double>, empty, empty, empty> type_fd_385;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_386;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_387;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, fvar<double>, empty, empty, empty> type_fd_388;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, std::vector<fvar<double>>, empty, empty, empty> type_fd_389;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_390;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_391;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, double, empty, empty, empty> type_fd_392;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, std::vector<double>, empty, empty, empty> type_fd_393;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_394;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_395;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, fvar<double>, empty, empty, empty> type_fd_396;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<double>>, empty, empty, empty> type_fd_397;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, Eigen::Dynamic, 1>, empty, empty, empty> type_fd_398;
typedef boost::mpl::vector<Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<double>, 1, Eigen::Dynamic>, empty, empty, empty> type_fd_399;

typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_300> AgradCdfLogDoubleExponential_fd_300;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_301> AgradCdfLogDoubleExponential_fd_301;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_302> AgradCdfLogDoubleExponential_fd_302;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_303> AgradCdfLogDoubleExponential_fd_303;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_304> AgradCdfLogDoubleExponential_fd_304;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_305> AgradCdfLogDoubleExponential_fd_305;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_306> AgradCdfLogDoubleExponential_fd_306;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_307> AgradCdfLogDoubleExponential_fd_307;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_308> AgradCdfLogDoubleExponential_fd_308;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_309> AgradCdfLogDoubleExponential_fd_309;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_310> AgradCdfLogDoubleExponential_fd_310;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_311> AgradCdfLogDoubleExponential_fd_311;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_312> AgradCdfLogDoubleExponential_fd_312;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_313> AgradCdfLogDoubleExponential_fd_313;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_314> AgradCdfLogDoubleExponential_fd_314;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_315> AgradCdfLogDoubleExponential_fd_315;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_316> AgradCdfLogDoubleExponential_fd_316;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_317> AgradCdfLogDoubleExponential_fd_317;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_318> AgradCdfLogDoubleExponential_fd_318;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_319> AgradCdfLogDoubleExponential_fd_319;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_320> AgradCdfLogDoubleExponential_fd_320;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_321> AgradCdfLogDoubleExponential_fd_321;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_322> AgradCdfLogDoubleExponential_fd_322;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_323> AgradCdfLogDoubleExponential_fd_323;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_324> AgradCdfLogDoubleExponential_fd_324;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_325> AgradCdfLogDoubleExponential_fd_325;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_326> AgradCdfLogDoubleExponential_fd_326;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_327> AgradCdfLogDoubleExponential_fd_327;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_328> AgradCdfLogDoubleExponential_fd_328;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_329> AgradCdfLogDoubleExponential_fd_329;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_330> AgradCdfLogDoubleExponential_fd_330;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_331> AgradCdfLogDoubleExponential_fd_331;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_332> AgradCdfLogDoubleExponential_fd_332;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_333> AgradCdfLogDoubleExponential_fd_333;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_334> AgradCdfLogDoubleExponential_fd_334;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_335> AgradCdfLogDoubleExponential_fd_335;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_336> AgradCdfLogDoubleExponential_fd_336;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_337> AgradCdfLogDoubleExponential_fd_337;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_338> AgradCdfLogDoubleExponential_fd_338;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_339> AgradCdfLogDoubleExponential_fd_339;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_340> AgradCdfLogDoubleExponential_fd_340;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_341> AgradCdfLogDoubleExponential_fd_341;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_342> AgradCdfLogDoubleExponential_fd_342;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_343> AgradCdfLogDoubleExponential_fd_343;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_344> AgradCdfLogDoubleExponential_fd_344;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_345> AgradCdfLogDoubleExponential_fd_345;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_346> AgradCdfLogDoubleExponential_fd_346;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_347> AgradCdfLogDoubleExponential_fd_347;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_348> AgradCdfLogDoubleExponential_fd_348;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_349> AgradCdfLogDoubleExponential_fd_349;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_350> AgradCdfLogDoubleExponential_fd_350;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_351> AgradCdfLogDoubleExponential_fd_351;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_352> AgradCdfLogDoubleExponential_fd_352;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_353> AgradCdfLogDoubleExponential_fd_353;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_354> AgradCdfLogDoubleExponential_fd_354;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_355> AgradCdfLogDoubleExponential_fd_355;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_356> AgradCdfLogDoubleExponential_fd_356;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_357> AgradCdfLogDoubleExponential_fd_357;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_358> AgradCdfLogDoubleExponential_fd_358;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_359> AgradCdfLogDoubleExponential_fd_359;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_360> AgradCdfLogDoubleExponential_fd_360;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_361> AgradCdfLogDoubleExponential_fd_361;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_362> AgradCdfLogDoubleExponential_fd_362;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_363> AgradCdfLogDoubleExponential_fd_363;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_364> AgradCdfLogDoubleExponential_fd_364;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_365> AgradCdfLogDoubleExponential_fd_365;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_366> AgradCdfLogDoubleExponential_fd_366;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_367> AgradCdfLogDoubleExponential_fd_367;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_368> AgradCdfLogDoubleExponential_fd_368;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_369> AgradCdfLogDoubleExponential_fd_369;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_370> AgradCdfLogDoubleExponential_fd_370;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_371> AgradCdfLogDoubleExponential_fd_371;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_372> AgradCdfLogDoubleExponential_fd_372;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_373> AgradCdfLogDoubleExponential_fd_373;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_374> AgradCdfLogDoubleExponential_fd_374;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_375> AgradCdfLogDoubleExponential_fd_375;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_376> AgradCdfLogDoubleExponential_fd_376;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_377> AgradCdfLogDoubleExponential_fd_377;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_378> AgradCdfLogDoubleExponential_fd_378;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_379> AgradCdfLogDoubleExponential_fd_379;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_380> AgradCdfLogDoubleExponential_fd_380;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_381> AgradCdfLogDoubleExponential_fd_381;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_382> AgradCdfLogDoubleExponential_fd_382;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_383> AgradCdfLogDoubleExponential_fd_383;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_384> AgradCdfLogDoubleExponential_fd_384;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_385> AgradCdfLogDoubleExponential_fd_385;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_386> AgradCdfLogDoubleExponential_fd_386;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_387> AgradCdfLogDoubleExponential_fd_387;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_388> AgradCdfLogDoubleExponential_fd_388;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_389> AgradCdfLogDoubleExponential_fd_389;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_390> AgradCdfLogDoubleExponential_fd_390;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_391> AgradCdfLogDoubleExponential_fd_391;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_392> AgradCdfLogDoubleExponential_fd_392;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_393> AgradCdfLogDoubleExponential_fd_393;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_394> AgradCdfLogDoubleExponential_fd_394;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_395> AgradCdfLogDoubleExponential_fd_395;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_396> AgradCdfLogDoubleExponential_fd_396;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_397> AgradCdfLogDoubleExponential_fd_397;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_398> AgradCdfLogDoubleExponential_fd_398;
typedef boost::mpl::vector<AgradCdfLogDoubleExponential, type_fd_399> AgradCdfLogDoubleExponential_fd_399;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_300, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_300);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_301, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_301);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_302, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_302);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_303, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_303);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_304, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_304);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_305, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_305);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_306, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_306);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_307, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_307);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_308, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_308);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_309, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_309);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_310, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_310);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_311, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_311);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_312, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_312);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_313, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_313);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_314, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_314);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_315, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_315);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_316, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_316);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_317, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_317);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_318, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_318);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_319, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_319);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_320, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_320);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_321, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_321);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_322, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_322);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_323, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_323);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_324, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_324);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_325, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_325);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_326, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_326);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_327, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_327);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_328, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_328);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_329, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_329);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_330, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_330);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_331, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_331);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_332, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_332);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_333, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_333);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_334, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_334);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_335, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_335);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_336, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_336);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_337, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_337);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_338, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_338);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_339, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_339);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_340, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_340);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_341, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_341);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_342, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_342);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_343, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_343);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_344, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_344);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_345, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_345);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_346, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_346);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_347, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_347);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_348, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_348);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_349, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_349);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_350, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_350);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_351, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_351);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_352, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_352);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_353, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_353);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_354, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_354);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_355, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_355);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_356, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_356);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_357, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_357);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_358, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_358);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_359, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_359);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_360, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_360);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_361, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_361);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_362, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_362);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_363, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_363);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_364, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_364);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_365, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_365);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_366, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_366);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_367, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_367);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_368, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_368);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_369, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_369);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_370, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_370);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_371, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_371);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_372, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_372);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_373, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_373);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_374, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_374);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_375, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_375);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_376, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_376);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_377, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_377);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_378, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_378);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_379, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_379);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_380, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_380);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_381, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_381);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_382, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_382);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_383, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_383);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_384, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_384);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_385, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_385);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_386, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_386);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_387, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_387);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_388, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_388);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_389, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_389);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_390, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_390);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_391, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_391);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_392, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_392);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_393, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_393);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_394, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_394);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_395, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_395);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_396, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_396);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_397, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_397);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_398, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_398);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfLogDoubleExponential_fd_399, AgradCdfLogTestFixture, AgradCdfLogDoubleExponential_fd_399);

