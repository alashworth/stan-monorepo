#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <exponential/exponential_ccdf_log_test.hpp>

typedef boost::mpl::vector<double, fvar<var>, empty, empty, empty, empty> type_fv_0;
typedef boost::mpl::vector<double, std::vector<fvar<var>>, empty, empty, empty, empty> type_fv_1;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_2;
typedef boost::mpl::vector<double, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_3;
typedef boost::mpl::vector<std::vector<double>, fvar<var>, empty, empty, empty, empty> type_fv_4;
typedef boost::mpl::vector<std::vector<double>, std::vector<fvar<var>>, empty, empty, empty, empty> type_fv_5;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_6;
typedef boost::mpl::vector<std::vector<double>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_7;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty, empty> type_fv_8;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty, empty> type_fv_9;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_10;
typedef boost::mpl::vector<Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_11;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty, empty> type_fv_12;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty, empty> type_fv_13;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_14;
typedef boost::mpl::vector<Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_15;
typedef boost::mpl::vector<fvar<var>, double, empty, empty, empty, empty> type_fv_16;
typedef boost::mpl::vector<fvar<var>, std::vector<double>, empty, empty, empty, empty> type_fv_17;
typedef boost::mpl::vector<fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_18;
typedef boost::mpl::vector<fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_19;
typedef boost::mpl::vector<fvar<var>, fvar<var>, empty, empty, empty, empty> type_fv_20;
typedef boost::mpl::vector<fvar<var>, std::vector<fvar<var>>, empty, empty, empty, empty> type_fv_21;
typedef boost::mpl::vector<fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_22;
typedef boost::mpl::vector<fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_23;
typedef boost::mpl::vector<std::vector<fvar<var>>, double, empty, empty, empty, empty> type_fv_24;
typedef boost::mpl::vector<std::vector<fvar<var>>, std::vector<double>, empty, empty, empty, empty> type_fv_25;
typedef boost::mpl::vector<std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_26;
typedef boost::mpl::vector<std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_27;
typedef boost::mpl::vector<std::vector<fvar<var>>, fvar<var>, empty, empty, empty, empty> type_fv_28;
typedef boost::mpl::vector<std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty, empty, empty> type_fv_29;
typedef boost::mpl::vector<std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_30;
typedef boost::mpl::vector<std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_31;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty, empty, empty> type_fv_32;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty, empty> type_fv_33;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_34;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_35;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty, empty> type_fv_36;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty, empty> type_fv_37;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_38;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_39;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty, empty, empty> type_fv_40;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty, empty> type_fv_41;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_42;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_43;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty, empty> type_fv_44;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty, empty> type_fv_45;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty, empty> type_fv_46;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty, empty> type_fv_47;

typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_0> AgradCcdfLogExponential_fv_0;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_1> AgradCcdfLogExponential_fv_1;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_2> AgradCcdfLogExponential_fv_2;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_3> AgradCcdfLogExponential_fv_3;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_4> AgradCcdfLogExponential_fv_4;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_5> AgradCcdfLogExponential_fv_5;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_6> AgradCcdfLogExponential_fv_6;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_7> AgradCcdfLogExponential_fv_7;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_8> AgradCcdfLogExponential_fv_8;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_9> AgradCcdfLogExponential_fv_9;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_10> AgradCcdfLogExponential_fv_10;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_11> AgradCcdfLogExponential_fv_11;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_12> AgradCcdfLogExponential_fv_12;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_13> AgradCcdfLogExponential_fv_13;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_14> AgradCcdfLogExponential_fv_14;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_15> AgradCcdfLogExponential_fv_15;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_16> AgradCcdfLogExponential_fv_16;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_17> AgradCcdfLogExponential_fv_17;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_18> AgradCcdfLogExponential_fv_18;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_19> AgradCcdfLogExponential_fv_19;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_20> AgradCcdfLogExponential_fv_20;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_21> AgradCcdfLogExponential_fv_21;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_22> AgradCcdfLogExponential_fv_22;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_23> AgradCcdfLogExponential_fv_23;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_24> AgradCcdfLogExponential_fv_24;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_25> AgradCcdfLogExponential_fv_25;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_26> AgradCcdfLogExponential_fv_26;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_27> AgradCcdfLogExponential_fv_27;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_28> AgradCcdfLogExponential_fv_28;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_29> AgradCcdfLogExponential_fv_29;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_30> AgradCcdfLogExponential_fv_30;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_31> AgradCcdfLogExponential_fv_31;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_32> AgradCcdfLogExponential_fv_32;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_33> AgradCcdfLogExponential_fv_33;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_34> AgradCcdfLogExponential_fv_34;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_35> AgradCcdfLogExponential_fv_35;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_36> AgradCcdfLogExponential_fv_36;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_37> AgradCcdfLogExponential_fv_37;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_38> AgradCcdfLogExponential_fv_38;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_39> AgradCcdfLogExponential_fv_39;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_40> AgradCcdfLogExponential_fv_40;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_41> AgradCcdfLogExponential_fv_41;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_42> AgradCcdfLogExponential_fv_42;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_43> AgradCcdfLogExponential_fv_43;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_44> AgradCcdfLogExponential_fv_44;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_45> AgradCcdfLogExponential_fv_45;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_46> AgradCcdfLogExponential_fv_46;
typedef boost::mpl::vector<AgradCcdfLogExponential, type_fv_47> AgradCcdfLogExponential_fv_47;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_0, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_0);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_1, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_1);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_2, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_2);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_3, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_3);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_4, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_4);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_5, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_5);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_6, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_6);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_7, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_7);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_8, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_8);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_9, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_9);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_10, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_10);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_11, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_11);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_12, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_12);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_13, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_13);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_14, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_14);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_15, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_15);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_16, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_16);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_17, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_17);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_18, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_18);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_19, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_19);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_20, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_20);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_21, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_21);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_22, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_22);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_23, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_23);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_24, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_24);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_25, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_25);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_26, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_26);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_27, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_27);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_28, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_28);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_29, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_29);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_30, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_30);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_31, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_31);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_32, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_32);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_33, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_33);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_34, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_34);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_35, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_35);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_36, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_36);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_37, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_37);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_38, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_38);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_39, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_39);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_40, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_40);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_41, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_41);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_42, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_42);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_43, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_43);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_44, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_44);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_45, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_45);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_46, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_46);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogExponential_fv_47, AgradCcdfLogTestFixture, AgradCcdfLogExponential_fv_47);

