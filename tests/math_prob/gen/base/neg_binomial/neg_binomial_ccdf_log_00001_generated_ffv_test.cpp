#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <C:/Users/andre/source/repos/stan-playground/stan-monorepo/tests/math_prob/neg_binomial/neg_binomial_ccdf_log_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, fvar<fvar<var> >, empty, empty, empty> type_ffv_100;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_101;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_102;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_103;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_104;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_105;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_106;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_107;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_108;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_109;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_110;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_111;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, double, empty, empty, empty> type_ffv_112;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<double>, empty, empty, empty> type_ffv_113;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_114;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_115;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty, empty> type_ffv_116;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_117;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_118;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_119;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, double, empty, empty, empty> type_ffv_120;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty, empty> type_ffv_121;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_122;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_123;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty, empty> type_ffv_124;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_125;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_126;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_127;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty, empty> type_ffv_128;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_ffv_129;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_130;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_131;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_132;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_133;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_134;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_135;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty, empty> type_ffv_136;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_ffv_137;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_138;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_139;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_140;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_141;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_142;
typedef boost::mpl::vector<Eigen::Matrix<int, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_143;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, double, fvar<fvar<var> >, empty, empty, empty> type_ffv_144;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, double, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_145;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_146;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, double, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_147;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, fvar<fvar<var> >, empty, empty, empty> type_ffv_148;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_149;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_150;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<double>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_151;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_152;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_153;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_154;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_155;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_156;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_157;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_158;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_159;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, double, empty, empty, empty> type_ffv_160;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<double>, empty, empty, empty> type_ffv_161;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_162;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_163;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, fvar<fvar<var> >, empty, empty, empty> type_ffv_164;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_165;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_166;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, fvar<fvar<var> >, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_167;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, double, empty, empty, empty> type_ffv_168;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<double>, empty, empty, empty> type_ffv_169;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_170;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_171;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, fvar<fvar<var> >, empty, empty, empty> type_ffv_172;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_173;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_174;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_175;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, double, empty, empty, empty> type_ffv_176;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_ffv_177;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_178;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_179;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, fvar<fvar<var> >, empty, empty, empty> type_ffv_180;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_181;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_182;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_183;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, double, empty, empty, empty> type_ffv_184;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_ffv_185;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_186;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_187;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, fvar<fvar<var> >, empty, empty, empty> type_ffv_188;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, std::vector<fvar<fvar<var> >>, empty, empty, empty> type_ffv_189;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, Eigen::Dynamic, 1>, empty, empty, empty> type_ffv_190;
typedef boost::mpl::vector<Eigen::Matrix<int, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<fvar<var> >, 1, Eigen::Dynamic>, empty, empty, empty> type_ffv_191;

typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_100> AgradCcdfLogNegBinomial_ffv_100;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_101> AgradCcdfLogNegBinomial_ffv_101;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_102> AgradCcdfLogNegBinomial_ffv_102;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_103> AgradCcdfLogNegBinomial_ffv_103;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_104> AgradCcdfLogNegBinomial_ffv_104;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_105> AgradCcdfLogNegBinomial_ffv_105;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_106> AgradCcdfLogNegBinomial_ffv_106;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_107> AgradCcdfLogNegBinomial_ffv_107;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_108> AgradCcdfLogNegBinomial_ffv_108;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_109> AgradCcdfLogNegBinomial_ffv_109;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_110> AgradCcdfLogNegBinomial_ffv_110;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_111> AgradCcdfLogNegBinomial_ffv_111;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_112> AgradCcdfLogNegBinomial_ffv_112;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_113> AgradCcdfLogNegBinomial_ffv_113;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_114> AgradCcdfLogNegBinomial_ffv_114;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_115> AgradCcdfLogNegBinomial_ffv_115;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_116> AgradCcdfLogNegBinomial_ffv_116;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_117> AgradCcdfLogNegBinomial_ffv_117;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_118> AgradCcdfLogNegBinomial_ffv_118;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_119> AgradCcdfLogNegBinomial_ffv_119;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_120> AgradCcdfLogNegBinomial_ffv_120;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_121> AgradCcdfLogNegBinomial_ffv_121;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_122> AgradCcdfLogNegBinomial_ffv_122;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_123> AgradCcdfLogNegBinomial_ffv_123;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_124> AgradCcdfLogNegBinomial_ffv_124;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_125> AgradCcdfLogNegBinomial_ffv_125;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_126> AgradCcdfLogNegBinomial_ffv_126;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_127> AgradCcdfLogNegBinomial_ffv_127;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_128> AgradCcdfLogNegBinomial_ffv_128;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_129> AgradCcdfLogNegBinomial_ffv_129;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_130> AgradCcdfLogNegBinomial_ffv_130;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_131> AgradCcdfLogNegBinomial_ffv_131;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_132> AgradCcdfLogNegBinomial_ffv_132;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_133> AgradCcdfLogNegBinomial_ffv_133;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_134> AgradCcdfLogNegBinomial_ffv_134;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_135> AgradCcdfLogNegBinomial_ffv_135;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_136> AgradCcdfLogNegBinomial_ffv_136;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_137> AgradCcdfLogNegBinomial_ffv_137;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_138> AgradCcdfLogNegBinomial_ffv_138;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_139> AgradCcdfLogNegBinomial_ffv_139;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_140> AgradCcdfLogNegBinomial_ffv_140;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_141> AgradCcdfLogNegBinomial_ffv_141;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_142> AgradCcdfLogNegBinomial_ffv_142;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_143> AgradCcdfLogNegBinomial_ffv_143;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_144> AgradCcdfLogNegBinomial_ffv_144;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_145> AgradCcdfLogNegBinomial_ffv_145;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_146> AgradCcdfLogNegBinomial_ffv_146;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_147> AgradCcdfLogNegBinomial_ffv_147;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_148> AgradCcdfLogNegBinomial_ffv_148;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_149> AgradCcdfLogNegBinomial_ffv_149;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_150> AgradCcdfLogNegBinomial_ffv_150;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_151> AgradCcdfLogNegBinomial_ffv_151;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_152> AgradCcdfLogNegBinomial_ffv_152;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_153> AgradCcdfLogNegBinomial_ffv_153;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_154> AgradCcdfLogNegBinomial_ffv_154;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_155> AgradCcdfLogNegBinomial_ffv_155;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_156> AgradCcdfLogNegBinomial_ffv_156;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_157> AgradCcdfLogNegBinomial_ffv_157;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_158> AgradCcdfLogNegBinomial_ffv_158;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_159> AgradCcdfLogNegBinomial_ffv_159;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_160> AgradCcdfLogNegBinomial_ffv_160;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_161> AgradCcdfLogNegBinomial_ffv_161;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_162> AgradCcdfLogNegBinomial_ffv_162;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_163> AgradCcdfLogNegBinomial_ffv_163;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_164> AgradCcdfLogNegBinomial_ffv_164;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_165> AgradCcdfLogNegBinomial_ffv_165;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_166> AgradCcdfLogNegBinomial_ffv_166;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_167> AgradCcdfLogNegBinomial_ffv_167;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_168> AgradCcdfLogNegBinomial_ffv_168;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_169> AgradCcdfLogNegBinomial_ffv_169;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_170> AgradCcdfLogNegBinomial_ffv_170;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_171> AgradCcdfLogNegBinomial_ffv_171;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_172> AgradCcdfLogNegBinomial_ffv_172;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_173> AgradCcdfLogNegBinomial_ffv_173;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_174> AgradCcdfLogNegBinomial_ffv_174;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_175> AgradCcdfLogNegBinomial_ffv_175;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_176> AgradCcdfLogNegBinomial_ffv_176;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_177> AgradCcdfLogNegBinomial_ffv_177;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_178> AgradCcdfLogNegBinomial_ffv_178;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_179> AgradCcdfLogNegBinomial_ffv_179;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_180> AgradCcdfLogNegBinomial_ffv_180;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_181> AgradCcdfLogNegBinomial_ffv_181;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_182> AgradCcdfLogNegBinomial_ffv_182;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_183> AgradCcdfLogNegBinomial_ffv_183;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_184> AgradCcdfLogNegBinomial_ffv_184;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_185> AgradCcdfLogNegBinomial_ffv_185;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_186> AgradCcdfLogNegBinomial_ffv_186;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_187> AgradCcdfLogNegBinomial_ffv_187;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_188> AgradCcdfLogNegBinomial_ffv_188;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_189> AgradCcdfLogNegBinomial_ffv_189;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_190> AgradCcdfLogNegBinomial_ffv_190;
typedef boost::mpl::vector<AgradCcdfLogNegBinomial, type_ffv_191> AgradCcdfLogNegBinomial_ffv_191;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_100, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_100);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_101, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_101);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_102, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_102);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_103, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_103);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_104, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_104);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_105, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_105);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_106, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_106);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_107, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_107);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_108, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_108);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_109, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_109);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_110, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_110);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_111, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_111);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_112, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_112);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_113, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_113);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_114, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_114);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_115, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_115);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_116, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_116);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_117, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_117);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_118, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_118);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_119, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_119);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_120, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_120);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_121, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_121);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_122, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_122);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_123, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_123);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_124, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_124);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_125, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_125);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_126, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_126);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_127, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_127);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_128, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_128);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_129, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_129);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_130, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_130);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_131, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_131);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_132, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_132);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_133, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_133);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_134, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_134);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_135, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_135);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_136, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_136);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_137, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_137);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_138, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_138);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_139, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_139);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_140, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_140);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_141, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_141);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_142, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_142);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_143, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_143);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_144, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_144);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_145, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_145);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_146, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_146);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_147, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_147);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_148, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_148);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_149, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_149);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_150, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_150);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_151, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_151);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_152, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_152);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_153, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_153);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_154, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_154);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_155, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_155);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_156, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_156);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_157, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_157);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_158, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_158);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_159, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_159);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_160, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_160);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_161, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_161);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_162, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_162);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_163, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_163);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_164, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_164);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_165, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_165);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_166, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_166);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_167, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_167);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_168, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_168);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_169, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_169);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_170, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_170);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_171, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_171);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_172, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_172);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_173, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_173);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_174, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_174);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_175, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_175);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_176, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_176);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_177, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_177);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_178, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_178);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_179, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_179);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_180, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_180);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_181, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_181);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_182, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_182);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_183, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_183);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_184, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_184);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_185, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_185);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_186, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_186);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_187, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_187);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_188, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_188);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_189, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_189);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_190, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_190);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCcdfLogNegBinomial_ffv_191, AgradCcdfLogTestFixture, AgradCcdfLogNegBinomial_ffv_191);

