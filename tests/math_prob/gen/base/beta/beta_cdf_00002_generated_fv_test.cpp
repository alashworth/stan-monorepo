#include <gtest/gtest.h>
#include <boost/mpl/vector.hpp>
#include <test_fixture_distr.hpp>
#include <test_fixture_cdf.hpp>
#include <test_fixture_cdf_log.hpp>
#include <test_fixture_ccdf_log.hpp>
#include <beta/beta_cdf_test.hpp>

typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fv_400;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fv_401;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_402;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_403;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_404;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_405;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_406;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_407;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fv_408;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fv_409;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_410;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_411;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_412;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_413;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_414;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_415;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, double, empty, empty, empty> type_fv_416;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, std::vector<double>, empty, empty, empty> type_fv_417;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_418;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_419;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, fvar<var>, empty, empty, empty> type_fv_420;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, std::vector<fvar<var>>, empty, empty, empty> type_fv_421;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_422;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_423;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, double, empty, empty, empty> type_fv_424;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<double>, empty, empty, empty> type_fv_425;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_426;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_427;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, fvar<var>, empty, empty, empty> type_fv_428;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, std::vector<fvar<var>>, empty, empty, empty> type_fv_429;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_430;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_431;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, double, empty, empty, empty> type_fv_432;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<double>, empty, empty, empty> type_fv_433;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_434;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_435;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, fvar<var>, empty, empty, empty> type_fv_436;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, std::vector<fvar<var>>, empty, empty, empty> type_fv_437;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_438;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_439;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, double, empty, empty, empty> type_fv_440;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<double>, empty, empty, empty> type_fv_441;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_442;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<double, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_443;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, fvar<var>, empty, empty, empty> type_fv_444;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, std::vector<fvar<var>>, empty, empty, empty> type_fv_445;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, Eigen::Dynamic, 1>, empty, empty, empty> type_fv_446;
typedef boost::mpl::vector<Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, Eigen::Matrix<fvar<var>, 1, Eigen::Dynamic>, empty, empty, empty> type_fv_447;

typedef boost::mpl::vector<AgradCdfBeta, type_fv_400> AgradCdfBeta_fv_400;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_401> AgradCdfBeta_fv_401;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_402> AgradCdfBeta_fv_402;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_403> AgradCdfBeta_fv_403;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_404> AgradCdfBeta_fv_404;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_405> AgradCdfBeta_fv_405;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_406> AgradCdfBeta_fv_406;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_407> AgradCdfBeta_fv_407;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_408> AgradCdfBeta_fv_408;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_409> AgradCdfBeta_fv_409;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_410> AgradCdfBeta_fv_410;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_411> AgradCdfBeta_fv_411;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_412> AgradCdfBeta_fv_412;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_413> AgradCdfBeta_fv_413;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_414> AgradCdfBeta_fv_414;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_415> AgradCdfBeta_fv_415;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_416> AgradCdfBeta_fv_416;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_417> AgradCdfBeta_fv_417;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_418> AgradCdfBeta_fv_418;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_419> AgradCdfBeta_fv_419;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_420> AgradCdfBeta_fv_420;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_421> AgradCdfBeta_fv_421;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_422> AgradCdfBeta_fv_422;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_423> AgradCdfBeta_fv_423;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_424> AgradCdfBeta_fv_424;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_425> AgradCdfBeta_fv_425;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_426> AgradCdfBeta_fv_426;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_427> AgradCdfBeta_fv_427;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_428> AgradCdfBeta_fv_428;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_429> AgradCdfBeta_fv_429;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_430> AgradCdfBeta_fv_430;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_431> AgradCdfBeta_fv_431;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_432> AgradCdfBeta_fv_432;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_433> AgradCdfBeta_fv_433;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_434> AgradCdfBeta_fv_434;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_435> AgradCdfBeta_fv_435;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_436> AgradCdfBeta_fv_436;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_437> AgradCdfBeta_fv_437;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_438> AgradCdfBeta_fv_438;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_439> AgradCdfBeta_fv_439;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_440> AgradCdfBeta_fv_440;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_441> AgradCdfBeta_fv_441;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_442> AgradCdfBeta_fv_442;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_443> AgradCdfBeta_fv_443;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_444> AgradCdfBeta_fv_444;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_445> AgradCdfBeta_fv_445;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_446> AgradCdfBeta_fv_446;
typedef boost::mpl::vector<AgradCdfBeta, type_fv_447> AgradCdfBeta_fv_447;

INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_400, AgradCdfTestFixture, AgradCdfBeta_fv_400);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_401, AgradCdfTestFixture, AgradCdfBeta_fv_401);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_402, AgradCdfTestFixture, AgradCdfBeta_fv_402);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_403, AgradCdfTestFixture, AgradCdfBeta_fv_403);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_404, AgradCdfTestFixture, AgradCdfBeta_fv_404);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_405, AgradCdfTestFixture, AgradCdfBeta_fv_405);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_406, AgradCdfTestFixture, AgradCdfBeta_fv_406);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_407, AgradCdfTestFixture, AgradCdfBeta_fv_407);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_408, AgradCdfTestFixture, AgradCdfBeta_fv_408);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_409, AgradCdfTestFixture, AgradCdfBeta_fv_409);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_410, AgradCdfTestFixture, AgradCdfBeta_fv_410);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_411, AgradCdfTestFixture, AgradCdfBeta_fv_411);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_412, AgradCdfTestFixture, AgradCdfBeta_fv_412);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_413, AgradCdfTestFixture, AgradCdfBeta_fv_413);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_414, AgradCdfTestFixture, AgradCdfBeta_fv_414);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_415, AgradCdfTestFixture, AgradCdfBeta_fv_415);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_416, AgradCdfTestFixture, AgradCdfBeta_fv_416);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_417, AgradCdfTestFixture, AgradCdfBeta_fv_417);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_418, AgradCdfTestFixture, AgradCdfBeta_fv_418);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_419, AgradCdfTestFixture, AgradCdfBeta_fv_419);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_420, AgradCdfTestFixture, AgradCdfBeta_fv_420);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_421, AgradCdfTestFixture, AgradCdfBeta_fv_421);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_422, AgradCdfTestFixture, AgradCdfBeta_fv_422);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_423, AgradCdfTestFixture, AgradCdfBeta_fv_423);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_424, AgradCdfTestFixture, AgradCdfBeta_fv_424);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_425, AgradCdfTestFixture, AgradCdfBeta_fv_425);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_426, AgradCdfTestFixture, AgradCdfBeta_fv_426);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_427, AgradCdfTestFixture, AgradCdfBeta_fv_427);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_428, AgradCdfTestFixture, AgradCdfBeta_fv_428);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_429, AgradCdfTestFixture, AgradCdfBeta_fv_429);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_430, AgradCdfTestFixture, AgradCdfBeta_fv_430);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_431, AgradCdfTestFixture, AgradCdfBeta_fv_431);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_432, AgradCdfTestFixture, AgradCdfBeta_fv_432);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_433, AgradCdfTestFixture, AgradCdfBeta_fv_433);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_434, AgradCdfTestFixture, AgradCdfBeta_fv_434);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_435, AgradCdfTestFixture, AgradCdfBeta_fv_435);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_436, AgradCdfTestFixture, AgradCdfBeta_fv_436);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_437, AgradCdfTestFixture, AgradCdfBeta_fv_437);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_438, AgradCdfTestFixture, AgradCdfBeta_fv_438);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_439, AgradCdfTestFixture, AgradCdfBeta_fv_439);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_440, AgradCdfTestFixture, AgradCdfBeta_fv_440);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_441, AgradCdfTestFixture, AgradCdfBeta_fv_441);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_442, AgradCdfTestFixture, AgradCdfBeta_fv_442);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_443, AgradCdfTestFixture, AgradCdfBeta_fv_443);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_444, AgradCdfTestFixture, AgradCdfBeta_fv_444);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_445, AgradCdfTestFixture, AgradCdfBeta_fv_445);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_446, AgradCdfTestFixture, AgradCdfBeta_fv_446);
INSTANTIATE_TYPED_TEST_CASE_P(AgradCdfBeta_fv_447, AgradCdfTestFixture, AgradCdfBeta_fv_447);

